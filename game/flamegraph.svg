<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="805.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="805.00"> </text><svg id="frames" x="10" width="1180" total_samples="682"><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="0.0000%" y="709" width="0.1466%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50"></text></g><g><title>pthread_mutex_destroy (1 samples, 0.15%)</title><rect x="0.0000%" y="693" width="0.1466%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>[libc.so.6] (3 samples, 0.44%)</title><rect x="0.0000%" y="725" width="0.4399%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="3"/><text x="0.2500%" y="735.50"></text></g><g><title>[unknown] (2 samples, 0.29%)</title><rect x="0.1466%" y="709" width="0.2933%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="2"/><text x="0.3966%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.2933%" y="693" width="0.1466%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.5433%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.2933%" y="677" width="0.1466%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="0.5433%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.2933%" y="661" width="0.1466%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="1"/><text x="0.5433%" y="671.50"></text></g><g><title>[libc.so.6] (4 samples, 0.59%)</title><rect x="0.0000%" y="741" width="0.5865%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="4"/><text x="0.2500%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.4399%" y="725" width="0.1466%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="1"/><text x="0.6899%" y="735.50"></text></g><g><title>[vkcf]_Analysis (5 samples, 0.73%)</title><rect x="0.0000%" y="757" width="0.7331%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="5"/><text x="0.2500%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="0.5865%" y="741" width="0.1466%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="1"/><text x="0.8365%" y="751.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (5 samples, 0.73%)</title><rect x="1.0264%" y="677" width="0.7331%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="5"/><text x="1.2764%" y="687.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (4 samples, 0.59%)</title><rect x="1.1730%" y="661" width="0.5865%" height="15" fill="rgb(216,20,37)" fg:x="8" fg:w="4"/><text x="1.4230%" y="671.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="1.6129%" y="645" width="0.1466%" height="15" fill="rgb(206,188,39)" fg:x="11" fg:w="1"/><text x="1.8629%" y="655.50"></text></g><g><title>__vdso_gettimeofday (1 samples, 0.15%)</title><rect x="2.0528%" y="661" width="0.1466%" height="15" fill="rgb(217,207,13)" fg:x="14" fg:w="1"/><text x="2.3028%" y="671.50"></text></g><g><title>pthread_cond_timedwait (3 samples, 0.44%)</title><rect x="2.1994%" y="661" width="0.4399%" height="15" fill="rgb(231,73,38)" fg:x="15" fg:w="3"/><text x="2.4494%" y="671.50"></text></g><g><title>[libc.so.6] (3 samples, 0.44%)</title><rect x="2.1994%" y="645" width="0.4399%" height="15" fill="rgb(225,20,46)" fg:x="15" fg:w="3"/><text x="2.4494%" y="655.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="2.6393%" y="661" width="0.1466%" height="15" fill="rgb(210,31,41)" fg:x="18" fg:w="1"/><text x="2.8893%" y="671.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (14 samples, 2.05%)</title><rect x="0.8798%" y="709" width="2.0528%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="14"/><text x="1.1298%" y="719.50">[..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (14 samples, 2.05%)</title><rect x="0.8798%" y="693" width="2.0528%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="14"/><text x="1.1298%" y="703.50">[..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (8 samples, 1.17%)</title><rect x="1.7595%" y="677" width="1.1730%" height="15" fill="rgb(249,33,26)" fg:x="12" fg:w="8"/><text x="2.0095%" y="687.50"></text></g><g><title>pthread_rwlock_wrlock (1 samples, 0.15%)</title><rect x="2.7859%" y="661" width="0.1466%" height="15" fill="rgb(235,183,28)" fg:x="19" fg:w="1"/><text x="3.0359%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="2.9326%" y="709" width="0.1466%" height="15" fill="rgb(221,5,38)" fg:x="20" fg:w="1"/><text x="3.1826%" y="719.50"></text></g><g><title>[libc.so.6] (17 samples, 2.49%)</title><rect x="0.7331%" y="741" width="2.4927%" height="15" fill="rgb(247,18,42)" fg:x="5" fg:w="17"/><text x="0.9831%" y="751.50">[l..</text></g><g><title>[libc.so.6] (17 samples, 2.49%)</title><rect x="0.7331%" y="725" width="2.4927%" height="15" fill="rgb(241,131,45)" fg:x="5" fg:w="17"/><text x="0.9831%" y="735.50">[l..</text></g><g><title>__ctype_init (1 samples, 0.15%)</title><rect x="3.0792%" y="709" width="0.1466%" height="15" fill="rgb(249,31,29)" fg:x="21" fg:w="1"/><text x="3.3292%" y="719.50"></text></g><g><title>[vkrt]_Analysis (18 samples, 2.64%)</title><rect x="0.7331%" y="757" width="2.6393%" height="15" fill="rgb(225,111,53)" fg:x="5" fg:w="18"/><text x="0.9831%" y="767.50">[v..</text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="3.2258%" y="741" width="0.1466%" height="15" fill="rgb(238,160,17)" fg:x="22" fg:w="1"/><text x="3.4758%" y="751.50"></text></g><g><title>CoreChecks::ValidateDescriptor (1 samples, 0.15%)</title><rect x="3.3724%" y="741" width="0.1466%" height="15" fill="rgb(214,148,48)" fg:x="23" fg:w="1"/><text x="3.6224%" y="751.50"></text></g><g><title>std::vector&lt;SAMPLER_STATE const*, std::allocator&lt;SAMPLER_STATE const*&gt; &gt;::~vector (1 samples, 0.15%)</title><rect x="3.3724%" y="725" width="0.1466%" height="15" fill="rgb(232,36,49)" fg:x="23" fg:w="1"/><text x="3.6224%" y="735.50"></text></g><g><title>std::_Vector_base&lt;SAMPLER_STATE const*, std::allocator&lt;SAMPLER_STATE const*&gt; &gt;::~_Vector_base (1 samples, 0.15%)</title><rect x="3.3724%" y="709" width="0.1466%" height="15" fill="rgb(209,103,24)" fg:x="23" fg:w="1"/><text x="3.6224%" y="719.50"></text></g><g><title>std::_Vector_base&lt;SAMPLER_STATE const*, std::allocator&lt;SAMPLER_STATE const*&gt; &gt;::_M_deallocate (1 samples, 0.15%)</title><rect x="3.3724%" y="693" width="0.1466%" height="15" fill="rgb(229,88,8)" fg:x="23" fg:w="1"/><text x="3.6224%" y="703.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;SAMPLER_STATE const*&gt; &gt;::deallocate (1 samples, 0.15%)</title><rect x="3.3724%" y="677" width="0.1466%" height="15" fill="rgb(213,181,19)" fg:x="23" fg:w="1"/><text x="3.6224%" y="687.50"></text></g><g><title>std::__new_allocator&lt;SAMPLER_STATE const*&gt;::deallocate (1 samples, 0.15%)</title><rect x="3.3724%" y="661" width="0.1466%" height="15" fill="rgb(254,191,54)" fg:x="23" fg:w="1"/><text x="3.6224%" y="671.50"></text></g><g><title>cfree (1 samples, 0.15%)</title><rect x="3.3724%" y="645" width="0.1466%" height="15" fill="rgb(241,83,37)" fg:x="23" fg:w="1"/><text x="3.6224%" y="655.50"></text></g><g><title>CoreChecks::ValidatePipelineDrawtimeState (3 samples, 0.44%)</title><rect x="3.5191%" y="741" width="0.4399%" height="15" fill="rgb(233,36,39)" fg:x="24" fg:w="3"/><text x="3.7691%" y="751.50"></text></g><g><title>CoreChecks::ValidateStatus (3 samples, 0.44%)</title><rect x="3.5191%" y="725" width="0.4399%" height="15" fill="rgb(226,3,54)" fg:x="24" fg:w="3"/><text x="3.7691%" y="735.50"></text></g><g><title>[[heap]] (2 samples, 0.29%)</title><rect x="3.9589%" y="741" width="0.2933%" height="15" fill="rgb(245,192,40)" fg:x="27" fg:w="2"/><text x="4.2089%" y="751.50"></text></g><g><title>[libc.so.6] (2 samples, 0.29%)</title><rect x="3.9589%" y="725" width="0.2933%" height="15" fill="rgb(238,167,29)" fg:x="27" fg:w="2"/><text x="4.2089%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="4.1056%" y="709" width="0.1466%" height="15" fill="rgb(232,182,51)" fg:x="28" fg:w="1"/><text x="4.3556%" y="719.50"></text></g><g><title>[[stack]] (1 samples, 0.15%)</title><rect x="4.2522%" y="741" width="0.1466%" height="15" fill="rgb(231,60,39)" fg:x="29" fg:w="1"/><text x="4.5022%" y="751.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="4.2522%" y="725" width="0.1466%" height="15" fill="rgb(208,69,12)" fg:x="29" fg:w="1"/><text x="4.5022%" y="735.50"></text></g><g><title>glVDPAURegisterVideoSurfaceWithPictureStructureNV (1 samples, 0.15%)</title><rect x="4.2522%" y="709" width="0.1466%" height="15" fill="rgb(235,93,37)" fg:x="29" fg:w="1"/><text x="4.5022%" y="719.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (1 samples, 0.15%)</title><rect x="4.2522%" y="693" width="0.1466%" height="15" fill="rgb(213,116,39)" fg:x="29" fg:w="1"/><text x="4.5022%" y="703.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (1 samples, 0.15%)</title><rect x="4.2522%" y="677" width="0.1466%" height="15" fill="rgb(222,207,29)" fg:x="29" fg:w="1"/><text x="4.5022%" y="687.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="4.2522%" y="661" width="0.1466%" height="15" fill="rgb(206,96,30)" fg:x="29" fg:w="1"/><text x="4.5022%" y="671.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="4.2522%" y="645" width="0.1466%" height="15" fill="rgb(218,138,4)" fg:x="29" fg:w="1"/><text x="4.5022%" y="655.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="4.2522%" y="629" width="0.1466%" height="15" fill="rgb(250,191,14)" fg:x="29" fg:w="1"/><text x="4.5022%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.29%)</title><rect x="4.8387%" y="709" width="0.2933%" height="15" fill="rgb(239,60,40)" fg:x="33" fg:w="2"/><text x="5.0887%" y="719.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.29%)</title><rect x="4.8387%" y="693" width="0.2933%" height="15" fill="rgb(206,27,48)" fg:x="33" fg:w="2"/><text x="5.0887%" y="703.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="4.9853%" y="677" width="0.1466%" height="15" fill="rgb(225,35,8)" fg:x="34" fg:w="1"/><text x="5.2353%" y="687.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="4.9853%" y="661" width="0.1466%" height="15" fill="rgb(250,213,24)" fg:x="34" fg:w="1"/><text x="5.2353%" y="671.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="4.9853%" y="645" width="0.1466%" height="15" fill="rgb(247,123,22)" fg:x="34" fg:w="1"/><text x="5.2353%" y="655.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="4.9853%" y="629" width="0.1466%" height="15" fill="rgb(231,138,38)" fg:x="34" fg:w="1"/><text x="5.2353%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.88%)</title><rect x="4.3988%" y="725" width="0.8798%" height="15" fill="rgb(231,145,46)" fg:x="30" fg:w="6"/><text x="4.6488%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="5.1320%" y="709" width="0.1466%" height="15" fill="rgb(251,118,11)" fg:x="35" fg:w="1"/><text x="5.3820%" y="719.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 1.03%)</title><rect x="4.3988%" y="741" width="1.0264%" height="15" fill="rgb(217,147,25)" fg:x="30" fg:w="7"/><text x="4.6488%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="5.2786%" y="725" width="0.1466%" height="15" fill="rgb(247,81,37)" fg:x="36" fg:w="1"/><text x="5.5286%" y="735.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (1 samples, 0.15%)</title><rect x="5.4252%" y="741" width="0.1466%" height="15" fill="rgb(209,12,38)" fg:x="37" fg:w="1"/><text x="5.6752%" y="751.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (1 samples, 0.15%)</title><rect x="5.4252%" y="725" width="0.1466%" height="15" fill="rgb(227,1,9)" fg:x="37" fg:w="1"/><text x="5.6752%" y="735.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (1 samples, 0.15%)</title><rect x="5.4252%" y="709" width="0.1466%" height="15" fill="rgb(248,47,43)" fg:x="37" fg:w="1"/><text x="5.6752%" y="719.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="5.4252%" y="693" width="0.1466%" height="15" fill="rgb(221,10,30)" fg:x="37" fg:w="1"/><text x="5.6752%" y="703.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="5.4252%" y="677" width="0.1466%" height="15" fill="rgb(210,229,1)" fg:x="37" fg:w="1"/><text x="5.6752%" y="687.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="5.4252%" y="661" width="0.1466%" height="15" fill="rgb(222,148,37)" fg:x="37" fg:w="1"/><text x="5.6752%" y="671.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="6.7449%" y="693" width="0.1466%" height="15" fill="rgb(234,67,33)" fg:x="46" fg:w="1"/><text x="6.9949%" y="703.50"></text></g><g><title>[libc.so.6] (2 samples, 0.29%)</title><rect x="6.8915%" y="645" width="0.2933%" height="15" fill="rgb(247,98,35)" fg:x="47" fg:w="2"/><text x="7.1415%" y="655.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (4 samples, 0.59%)</title><rect x="7.1848%" y="645" width="0.5865%" height="15" fill="rgb(247,138,52)" fg:x="49" fg:w="4"/><text x="7.4348%" y="655.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="7.6246%" y="629" width="0.1466%" height="15" fill="rgb(213,79,30)" fg:x="52" fg:w="1"/><text x="7.8746%" y="639.50"></text></g><g><title>__vdso_gettimeofday (1 samples, 0.15%)</title><rect x="7.7713%" y="645" width="0.1466%" height="15" fill="rgb(246,177,23)" fg:x="53" fg:w="1"/><text x="8.0213%" y="655.50"></text></g><g><title>[libc.so.6] (4 samples, 0.59%)</title><rect x="9.8240%" y="613" width="0.5865%" height="15" fill="rgb(230,62,27)" fg:x="67" fg:w="4"/><text x="10.0740%" y="623.50"></text></g><g><title>pthread_cond_timedwait (18 samples, 2.64%)</title><rect x="7.9179%" y="645" width="2.6393%" height="15" fill="rgb(216,154,8)" fg:x="54" fg:w="18"/><text x="8.1679%" y="655.50">pt..</text></g><g><title>[libc.so.6] (12 samples, 1.76%)</title><rect x="8.7977%" y="629" width="1.7595%" height="15" fill="rgb(244,35,45)" fg:x="60" fg:w="12"/><text x="9.0477%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="10.4106%" y="613" width="0.1466%" height="15" fill="rgb(251,115,12)" fg:x="71" fg:w="1"/><text x="10.6606%" y="623.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (26 samples, 3.81%)</title><rect x="6.8915%" y="661" width="3.8123%" height="15" fill="rgb(240,54,50)" fg:x="47" fg:w="26"/><text x="7.1415%" y="671.50">[lib..</text></g><g><title>pthread_mutex_unlock (1 samples, 0.15%)</title><rect x="10.5572%" y="645" width="0.1466%" height="15" fill="rgb(233,84,52)" fg:x="72" fg:w="1"/><text x="10.8072%" y="655.50"></text></g><g><title>open64 (1 samples, 0.15%)</title><rect x="10.7038%" y="661" width="0.1466%" height="15" fill="rgb(207,117,47)" fg:x="73" fg:w="1"/><text x="10.9538%" y="671.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (33 samples, 4.84%)</title><rect x="6.7449%" y="709" width="4.8387%" height="15" fill="rgb(249,43,39)" fg:x="46" fg:w="33"/><text x="6.9949%" y="719.50">[libnv..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (32 samples, 4.69%)</title><rect x="6.8915%" y="693" width="4.6921%" height="15" fill="rgb(209,38,44)" fg:x="47" fg:w="32"/><text x="7.1415%" y="703.50">[libn..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (32 samples, 4.69%)</title><rect x="6.8915%" y="677" width="4.6921%" height="15" fill="rgb(236,212,23)" fg:x="47" fg:w="32"/><text x="7.1415%" y="687.50">[libn..</text></g><g><title>pthread_cond_timedwait (5 samples, 0.73%)</title><rect x="10.8504%" y="661" width="0.7331%" height="15" fill="rgb(242,79,21)" fg:x="74" fg:w="5"/><text x="11.1004%" y="671.50"></text></g><g><title>[libc.so.6] (4 samples, 0.59%)</title><rect x="10.9971%" y="645" width="0.5865%" height="15" fill="rgb(211,96,35)" fg:x="75" fg:w="4"/><text x="11.2471%" y="655.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="11.4370%" y="629" width="0.1466%" height="15" fill="rgb(253,215,40)" fg:x="78" fg:w="1"/><text x="11.6870%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.44%)</title><rect x="11.5836%" y="709" width="0.4399%" height="15" fill="rgb(211,81,21)" fg:x="79" fg:w="3"/><text x="11.8336%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.29%)</title><rect x="11.7302%" y="693" width="0.2933%" height="15" fill="rgb(208,190,38)" fg:x="80" fg:w="2"/><text x="11.9802%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.29%)</title><rect x="11.7302%" y="677" width="0.2933%" height="15" fill="rgb(235,213,38)" fg:x="80" fg:w="2"/><text x="11.9802%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="11.8768%" y="661" width="0.1466%" height="15" fill="rgb(237,122,38)" fg:x="81" fg:w="1"/><text x="12.1268%" y="671.50"></text></g><g><title>__ctype_init (3 samples, 0.44%)</title><rect x="12.0235%" y="709" width="0.4399%" height="15" fill="rgb(244,218,35)" fg:x="82" fg:w="3"/><text x="12.2735%" y="719.50"></text></g><g><title>CB_SUBMISSION::EndUse (2 samples, 0.29%)</title><rect x="12.7566%" y="677" width="0.2933%" height="15" fill="rgb(240,68,47)" fg:x="87" fg:w="2"/><text x="13.0066%" y="687.50"></text></g><g><title>REFCOUNTED_NODE::EndUse (1 samples, 0.15%)</title><rect x="12.9032%" y="661" width="0.1466%" height="15" fill="rgb(210,16,53)" fg:x="88" fg:w="1"/><text x="13.1532%" y="671.50"></text></g><g><title>std::__atomic_base&lt;int&gt;::fetch_sub (1 samples, 0.15%)</title><rect x="12.9032%" y="645" width="0.1466%" height="15" fill="rgb(235,124,12)" fg:x="88" fg:w="1"/><text x="13.1532%" y="655.50"></text></g><g><title>QUEUE_STATE::NextSubmission (7 samples, 1.03%)</title><rect x="13.0499%" y="677" width="1.0264%" height="15" fill="rgb(224,169,11)" fg:x="89" fg:w="7"/><text x="13.2999%" y="687.50"></text></g><g><title>std::condition_variable::wait (5 samples, 0.73%)</title><rect x="13.3431%" y="661" width="0.7331%" height="15" fill="rgb(250,166,2)" fg:x="91" fg:w="5"/><text x="13.5931%" y="671.50"></text></g><g><title>std::__condvar::wait (5 samples, 0.73%)</title><rect x="13.3431%" y="645" width="0.7331%" height="15" fill="rgb(242,216,29)" fg:x="91" fg:w="5"/><text x="13.5931%" y="655.50"></text></g><g><title>std::condition_variable::wait (5 samples, 0.73%)</title><rect x="13.3431%" y="629" width="0.7331%" height="15" fill="rgb(230,116,27)" fg:x="91" fg:w="5"/><text x="13.5931%" y="639.50"></text></g><g><title>pthread_cond_wait (5 samples, 0.73%)</title><rect x="13.3431%" y="613" width="0.7331%" height="15" fill="rgb(228,99,48)" fg:x="91" fg:w="5"/><text x="13.5931%" y="623.50"></text></g><g><title>[libc.so.6] (3 samples, 0.44%)</title><rect x="13.6364%" y="597" width="0.4399%" height="15" fill="rgb(253,11,6)" fg:x="93" fg:w="3"/><text x="13.8864%" y="607.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="13.9296%" y="581" width="0.1466%" height="15" fill="rgb(247,143,39)" fg:x="95" fg:w="1"/><text x="14.1796%" y="591.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt; &gt;::_M_drop_node (1 samples, 0.15%)</title><rect x="14.2229%" y="613" width="0.1466%" height="15" fill="rgb(236,97,10)" fg:x="97" fg:w="1"/><text x="14.4729%" y="623.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt; &gt;::_M_destroy_node (1 samples, 0.15%)</title><rect x="14.2229%" y="597" width="0.1466%" height="15" fill="rgb(233,208,19)" fg:x="97" fg:w="1"/><text x="14.4729%" y="607.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt; &gt; &gt;::destroy&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt; (1 samples, 0.15%)</title><rect x="14.2229%" y="581" width="0.1466%" height="15" fill="rgb(216,164,2)" fg:x="97" fg:w="1"/><text x="14.4729%" y="591.50"></text></g><g><title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt; &gt;::destroy&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt; (1 samples, 0.15%)</title><rect x="14.2229%" y="565" width="0.1466%" height="15" fill="rgb(220,129,5)" fg:x="97" fg:w="1"/><text x="14.4729%" y="575.50"></text></g><g><title>std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt;::~pair (1 samples, 0.15%)</title><rect x="14.2229%" y="549" width="0.1466%" height="15" fill="rgb(242,17,10)" fg:x="97" fg:w="1"/><text x="14.4729%" y="559.50"></text></g><g><title>SEMAPHORE_STATE::SemOpEntry::~SemOpEntry (1 samples, 0.15%)</title><rect x="14.2229%" y="533" width="0.1466%" height="15" fill="rgb(242,107,0)" fg:x="97" fg:w="1"/><text x="14.4729%" y="543.50"></text></g><g><title>std::promise&lt;void&gt;::~promise (1 samples, 0.15%)</title><rect x="14.2229%" y="517" width="0.1466%" height="15" fill="rgb(251,28,31)" fg:x="97" fg:w="1"/><text x="14.4729%" y="527.50"></text></g><g><title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="14.2229%" y="501" width="0.1466%" height="15" fill="rgb(233,223,10)" fg:x="97" fg:w="1"/><text x="14.4729%" y="511.50"></text></g><g><title>std::__shared_ptr&lt;std::__future_base::_State_baseV2, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="14.2229%" y="485" width="0.1466%" height="15" fill="rgb(215,21,27)" fg:x="97" fg:w="1"/><text x="14.4729%" y="495.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="14.2229%" y="469" width="0.1466%" height="15" fill="rgb(232,23,21)" fg:x="97" fg:w="1"/><text x="14.4729%" y="479.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="14.2229%" y="453" width="0.1466%" height="15" fill="rgb(244,5,23)" fg:x="97" fg:w="1"/><text x="14.4729%" y="463.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="14.2229%" y="437" width="0.1466%" height="15" fill="rgb(226,81,46)" fg:x="97" fg:w="1"/><text x="14.4729%" y="447.50"></text></g><g><title>cfree (1 samples, 0.15%)</title><rect x="14.2229%" y="421" width="0.1466%" height="15" fill="rgb(247,70,30)" fg:x="97" fg:w="1"/><text x="14.4729%" y="431.50"></text></g><g><title>std::multimap&lt;unsigned long, SEMAPHORE_STATE::SemOpEntry, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt; &gt;::erase[abi:cxx11] (2 samples, 0.29%)</title><rect x="14.2229%" y="661" width="0.2933%" height="15" fill="rgb(212,68,19)" fg:x="97" fg:w="2"/><text x="14.4729%" y="671.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt; &gt;::erase[abi:cxx11] (2 samples, 0.29%)</title><rect x="14.2229%" y="645" width="0.2933%" height="15" fill="rgb(240,187,13)" fg:x="97" fg:w="2"/><text x="14.4729%" y="655.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt; &gt;::_M_erase_aux (2 samples, 0.29%)</title><rect x="14.2229%" y="629" width="0.2933%" height="15" fill="rgb(223,113,26)" fg:x="97" fg:w="2"/><text x="14.4729%" y="639.50"></text></g><g><title>std::_Rb_tree_rebalance_for_erase (1 samples, 0.15%)</title><rect x="14.3695%" y="613" width="0.1466%" height="15" fill="rgb(206,192,2)" fg:x="98" fg:w="1"/><text x="14.6195%" y="623.50"></text></g><g><title>SEMAPHORE_STATE::Retire (1 samples, 0.15%)</title><rect x="14.5161%" y="613" width="0.1466%" height="15" fill="rgb(241,108,4)" fg:x="99" fg:w="1"/><text x="14.7661%" y="623.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="14.5161%" y="597" width="0.1466%" height="15" fill="rgb(247,173,49)" fg:x="99" fg:w="1"/><text x="14.7661%" y="607.50"></text></g><g><title>_pthread_cleanup_push (1 samples, 0.15%)</title><rect x="14.5161%" y="581" width="0.1466%" height="15" fill="rgb(224,114,35)" fg:x="99" fg:w="1"/><text x="14.7661%" y="591.50"></text></g><g><title>std::__future_base::_State_baseV2::_M_set_result (2 samples, 0.29%)</title><rect x="14.5161%" y="645" width="0.2933%" height="15" fill="rgb(245,159,27)" fg:x="99" fg:w="2"/><text x="14.7661%" y="655.50"></text></g><g><title>std::call_once&lt;void (std::__future_base::_State_baseV2::*)(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*, bool*), std::__future_base::_State_baseV2*, std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*, bool*&gt; (2 samples, 0.29%)</title><rect x="14.5161%" y="629" width="0.2933%" height="15" fill="rgb(245,172,44)" fg:x="99" fg:w="2"/><text x="14.7661%" y="639.50"></text></g><g><title>std::once_flag::_Prepare_execution::_Prepare_execution&lt;std::call_once&lt;void (std::__future_base::_State_baseV2::*)(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*, bool*), std::__future_base::_State_baseV2*, std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*, bool*&gt;(std::once_flag&amp;, void (std::__future_base::_State_baseV2::*&amp;&amp;)(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*, bool*), std::__future_base::_State_baseV2*&amp;&amp;, std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*&amp;&amp;, bool*&amp;&amp;)::{lambda()#1}&gt; (1 samples, 0.15%)</title><rect x="14.6628%" y="613" width="0.1466%" height="15" fill="rgb(236,23,11)" fg:x="100" fg:w="1"/><text x="14.9128%" y="623.50"></text></g><g><title>__tls_get_addr (1 samples, 0.15%)</title><rect x="14.6628%" y="597" width="0.1466%" height="15" fill="rgb(205,117,38)" fg:x="100" fg:w="1"/><text x="14.9128%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="14.6628%" y="581" width="0.1466%" height="15" fill="rgb(237,72,25)" fg:x="100" fg:w="1"/><text x="14.9128%" y="591.50"></text></g><g><title>[libc.so.6] (64 samples, 9.38%)</title><rect x="5.5718%" y="741" width="9.3842%" height="15" fill="rgb(244,70,9)" fg:x="38" fg:w="64"/><text x="5.8218%" y="751.50">[libc.so.6]</text></g><g><title>[libc.so.6] (64 samples, 9.38%)</title><rect x="5.5718%" y="725" width="9.3842%" height="15" fill="rgb(217,125,39)" fg:x="38" fg:w="64"/><text x="5.8218%" y="735.50">[libc.so.6]</text></g><g><title>execute_native_thread_routine (17 samples, 2.49%)</title><rect x="12.4633%" y="709" width="2.4927%" height="15" fill="rgb(235,36,10)" fg:x="85" fg:w="17"/><text x="12.7133%" y="719.50">ex..</text></g><g><title>QUEUE_STATE::ThreadFunc (17 samples, 2.49%)</title><rect x="12.4633%" y="693" width="2.4927%" height="15" fill="rgb(251,123,47)" fg:x="85" fg:w="17"/><text x="12.7133%" y="703.50">QU..</text></g><g><title>SEMAPHORE_STATE::Retire (6 samples, 0.88%)</title><rect x="14.0762%" y="677" width="0.8798%" height="15" fill="rgb(221,13,13)" fg:x="96" fg:w="6"/><text x="14.3262%" y="687.50"></text></g><g><title>std::promise&lt;void&gt;::set_value (3 samples, 0.44%)</title><rect x="14.5161%" y="661" width="0.4399%" height="15" fill="rgb(238,131,9)" fg:x="99" fg:w="3"/><text x="14.7661%" y="671.50"></text></g><g><title>std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;::~function (1 samples, 0.15%)</title><rect x="14.8094%" y="645" width="0.1466%" height="15" fill="rgb(211,50,8)" fg:x="101" fg:w="1"/><text x="15.0594%" y="655.50"></text></g><g><title>std::_Function_base::~_Function_base (1 samples, 0.15%)</title><rect x="14.8094%" y="629" width="0.1466%" height="15" fill="rgb(245,182,24)" fg:x="101" fg:w="1"/><text x="15.0594%" y="639.50"></text></g><g><title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; (), std::__future_base::_State_baseV2::_Setter&lt;void, void&gt; &gt;::_M_manager (1 samples, 0.15%)</title><rect x="14.8094%" y="613" width="0.1466%" height="15" fill="rgb(242,14,37)" fg:x="101" fg:w="1"/><text x="15.0594%" y="623.50"></text></g><g><title>XStringToKeysym (1 samples, 0.15%)</title><rect x="16.1290%" y="709" width="0.1466%" height="15" fill="rgb(246,228,12)" fg:x="110" fg:w="1"/><text x="16.3790%" y="719.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="16.1290%" y="693" width="0.1466%" height="15" fill="rgb(213,55,15)" fg:x="110" fg:w="1"/><text x="16.3790%" y="703.50"></text></g><g><title>[libX11.so.6.4.0] (5 samples, 0.73%)</title><rect x="15.6891%" y="725" width="0.7331%" height="15" fill="rgb(209,9,3)" fg:x="107" fg:w="5"/><text x="15.9391%" y="735.50"></text></g><g><title>[libX11.so.6.4.0] (1 samples, 0.15%)</title><rect x="16.2757%" y="709" width="0.1466%" height="15" fill="rgb(230,59,30)" fg:x="111" fg:w="1"/><text x="16.5257%" y="719.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="16.4223%" y="693" width="0.2933%" height="15" fill="rgb(209,121,21)" fg:x="112" fg:w="2"/><text x="16.6723%" y="703.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="16.4223%" y="677" width="0.2933%" height="15" fill="rgb(220,109,13)" fg:x="112" fg:w="2"/><text x="16.6723%" y="687.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="16.4223%" y="661" width="0.2933%" height="15" fill="rgb(232,18,1)" fg:x="112" fg:w="2"/><text x="16.6723%" y="671.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="16.4223%" y="645" width="0.2933%" height="15" fill="rgb(215,41,42)" fg:x="112" fg:w="2"/><text x="16.6723%" y="655.50"></text></g><g><title>_nv008nvvm (2 samples, 0.29%)</title><rect x="16.4223%" y="629" width="0.2933%" height="15" fill="rgb(224,123,36)" fg:x="112" fg:w="2"/><text x="16.6723%" y="639.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (2 samples, 0.29%)</title><rect x="16.4223%" y="613" width="0.2933%" height="15" fill="rgb(240,125,3)" fg:x="112" fg:w="2"/><text x="16.6723%" y="623.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (2 samples, 0.29%)</title><rect x="16.4223%" y="597" width="0.2933%" height="15" fill="rgb(205,98,50)" fg:x="112" fg:w="2"/><text x="16.6723%" y="607.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (2 samples, 0.29%)</title><rect x="16.4223%" y="581" width="0.2933%" height="15" fill="rgb(205,185,37)" fg:x="112" fg:w="2"/><text x="16.6723%" y="591.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (2 samples, 0.29%)</title><rect x="16.4223%" y="565" width="0.2933%" height="15" fill="rgb(238,207,15)" fg:x="112" fg:w="2"/><text x="16.6723%" y="575.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="16.5689%" y="549" width="0.1466%" height="15" fill="rgb(213,199,42)" fg:x="113" fg:w="1"/><text x="16.8189%" y="559.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="16.5689%" y="533" width="0.1466%" height="15" fill="rgb(235,201,11)" fg:x="113" fg:w="1"/><text x="16.8189%" y="543.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="16.5689%" y="517" width="0.1466%" height="15" fill="rgb(207,46,11)" fg:x="113" fg:w="1"/><text x="16.8189%" y="527.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="16.5689%" y="501" width="0.1466%" height="15" fill="rgb(241,35,35)" fg:x="113" fg:w="1"/><text x="16.8189%" y="511.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="16.5689%" y="485" width="0.1466%" height="15" fill="rgb(243,32,47)" fg:x="113" fg:w="1"/><text x="16.8189%" y="495.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="16.5689%" y="469" width="0.1466%" height="15" fill="rgb(247,202,23)" fg:x="113" fg:w="1"/><text x="16.8189%" y="479.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (3 samples, 0.44%)</title><rect x="16.4223%" y="725" width="0.4399%" height="15" fill="rgb(219,102,11)" fg:x="112" fg:w="3"/><text x="16.6723%" y="735.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (3 samples, 0.44%)</title><rect x="16.4223%" y="709" width="0.4399%" height="15" fill="rgb(243,110,44)" fg:x="112" fg:w="3"/><text x="16.6723%" y="719.50"></text></g><g><title>_nv002nvvm (1 samples, 0.15%)</title><rect x="16.7155%" y="693" width="0.1466%" height="15" fill="rgb(222,74,54)" fg:x="114" fg:w="1"/><text x="16.9655%" y="703.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="16.7155%" y="677" width="0.1466%" height="15" fill="rgb(216,99,12)" fg:x="114" fg:w="1"/><text x="16.9655%" y="687.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="16.7155%" y="661" width="0.1466%" height="15" fill="rgb(226,22,26)" fg:x="114" fg:w="1"/><text x="16.9655%" y="671.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="16.7155%" y="645" width="0.1466%" height="15" fill="rgb(217,163,10)" fg:x="114" fg:w="1"/><text x="16.9655%" y="655.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="16.7155%" y="629" width="0.1466%" height="15" fill="rgb(213,25,53)" fg:x="114" fg:w="1"/><text x="16.9655%" y="639.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="16.7155%" y="613" width="0.1466%" height="15" fill="rgb(252,105,26)" fg:x="114" fg:w="1"/><text x="16.9655%" y="623.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="16.7155%" y="597" width="0.1466%" height="15" fill="rgb(220,39,43)" fg:x="114" fg:w="1"/><text x="16.9655%" y="607.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="16.7155%" y="581" width="0.1466%" height="15" fill="rgb(229,68,48)" fg:x="114" fg:w="1"/><text x="16.9655%" y="591.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="16.7155%" y="565" width="0.1466%" height="15" fill="rgb(252,8,32)" fg:x="114" fg:w="1"/><text x="16.9655%" y="575.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="16.7155%" y="549" width="0.1466%" height="15" fill="rgb(223,20,43)" fg:x="114" fg:w="1"/><text x="16.9655%" y="559.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="16.7155%" y="533" width="0.1466%" height="15" fill="rgb(229,81,49)" fg:x="114" fg:w="1"/><text x="16.9655%" y="543.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="16.7155%" y="517" width="0.1466%" height="15" fill="rgb(236,28,36)" fg:x="114" fg:w="1"/><text x="16.9655%" y="527.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="16.7155%" y="501" width="0.1466%" height="15" fill="rgb(249,185,26)" fg:x="114" fg:w="1"/><text x="16.9655%" y="511.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="16.7155%" y="485" width="0.1466%" height="15" fill="rgb(249,174,33)" fg:x="114" fg:w="1"/><text x="16.9655%" y="495.50"></text></g><g><title>malloc (1 samples, 0.15%)</title><rect x="16.7155%" y="469" width="0.1466%" height="15" fill="rgb(233,201,37)" fg:x="114" fg:w="1"/><text x="16.9655%" y="479.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (2 samples, 0.29%)</title><rect x="17.0088%" y="565" width="0.2933%" height="15" fill="rgb(221,78,26)" fg:x="116" fg:w="2"/><text x="17.2588%" y="575.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="17.1554%" y="549" width="0.1466%" height="15" fill="rgb(250,127,30)" fg:x="117" fg:w="1"/><text x="17.4054%" y="559.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="17.1554%" y="533" width="0.1466%" height="15" fill="rgb(230,49,44)" fg:x="117" fg:w="1"/><text x="17.4054%" y="543.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (4 samples, 0.59%)</title><rect x="16.8622%" y="725" width="0.5865%" height="15" fill="rgb(229,67,23)" fg:x="115" fg:w="4"/><text x="17.1122%" y="735.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (4 samples, 0.59%)</title><rect x="16.8622%" y="709" width="0.5865%" height="15" fill="rgb(249,83,47)" fg:x="115" fg:w="4"/><text x="17.1122%" y="719.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (4 samples, 0.59%)</title><rect x="16.8622%" y="693" width="0.5865%" height="15" fill="rgb(215,43,3)" fg:x="115" fg:w="4"/><text x="17.1122%" y="703.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (4 samples, 0.59%)</title><rect x="16.8622%" y="677" width="0.5865%" height="15" fill="rgb(238,154,13)" fg:x="115" fg:w="4"/><text x="17.1122%" y="687.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (4 samples, 0.59%)</title><rect x="16.8622%" y="661" width="0.5865%" height="15" fill="rgb(219,56,2)" fg:x="115" fg:w="4"/><text x="17.1122%" y="671.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (4 samples, 0.59%)</title><rect x="16.8622%" y="645" width="0.5865%" height="15" fill="rgb(233,0,4)" fg:x="115" fg:w="4"/><text x="17.1122%" y="655.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (4 samples, 0.59%)</title><rect x="16.8622%" y="629" width="0.5865%" height="15" fill="rgb(235,30,7)" fg:x="115" fg:w="4"/><text x="17.1122%" y="639.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (4 samples, 0.59%)</title><rect x="16.8622%" y="613" width="0.5865%" height="15" fill="rgb(250,79,13)" fg:x="115" fg:w="4"/><text x="17.1122%" y="623.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (3 samples, 0.44%)</title><rect x="17.0088%" y="597" width="0.4399%" height="15" fill="rgb(211,146,34)" fg:x="116" fg:w="3"/><text x="17.2588%" y="607.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (3 samples, 0.44%)</title><rect x="17.0088%" y="581" width="0.4399%" height="15" fill="rgb(228,22,38)" fg:x="116" fg:w="3"/><text x="17.2588%" y="591.50"></text></g><g><title>malloc (1 samples, 0.15%)</title><rect x="17.3021%" y="565" width="0.1466%" height="15" fill="rgb(235,168,5)" fg:x="118" fg:w="1"/><text x="17.5521%" y="575.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="17.3021%" y="549" width="0.1466%" height="15" fill="rgb(221,155,16)" fg:x="118" fg:w="1"/><text x="17.5521%" y="559.50"></text></g><g><title>[libvulkan.so.1.3.235] (1 samples, 0.15%)</title><rect x="17.4487%" y="725" width="0.1466%" height="15" fill="rgb(215,215,53)" fg:x="119" fg:w="1"/><text x="17.6987%" y="735.50"></text></g><g><title>dlopen (1 samples, 0.15%)</title><rect x="17.4487%" y="709" width="0.1466%" height="15" fill="rgb(223,4,10)" fg:x="119" fg:w="1"/><text x="17.6987%" y="719.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="17.4487%" y="693" width="0.1466%" height="15" fill="rgb(234,103,6)" fg:x="119" fg:w="1"/><text x="17.6987%" y="703.50"></text></g><g><title>_dl_catch_error (1 samples, 0.15%)</title><rect x="17.4487%" y="677" width="0.1466%" height="15" fill="rgb(227,97,0)" fg:x="119" fg:w="1"/><text x="17.6987%" y="687.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.15%)</title><rect x="17.4487%" y="661" width="0.1466%" height="15" fill="rgb(234,150,53)" fg:x="119" fg:w="1"/><text x="17.6987%" y="671.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="17.4487%" y="645" width="0.1466%" height="15" fill="rgb(228,201,54)" fg:x="119" fg:w="1"/><text x="17.6987%" y="655.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="17.4487%" y="629" width="0.1466%" height="15" fill="rgb(222,22,37)" fg:x="119" fg:w="1"/><text x="17.6987%" y="639.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.15%)</title><rect x="17.4487%" y="613" width="0.1466%" height="15" fill="rgb(237,53,32)" fg:x="119" fg:w="1"/><text x="17.6987%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="17.4487%" y="597" width="0.1466%" height="15" fill="rgb(233,25,53)" fg:x="119" fg:w="1"/><text x="17.6987%" y="607.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.15%)</title><rect x="17.4487%" y="581" width="0.1466%" height="15" fill="rgb(210,40,34)" fg:x="119" fg:w="1"/><text x="17.6987%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="17.4487%" y="565" width="0.1466%" height="15" fill="rgb(241,220,44)" fg:x="119" fg:w="1"/><text x="17.6987%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="17.4487%" y="549" width="0.1466%" height="15" fill="rgb(235,28,35)" fg:x="119" fg:w="1"/><text x="17.6987%" y="559.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, vulkan_layer_chassis::function_data, robin_hood::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, void&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::Table (1 samples, 0.15%)</title><rect x="17.5953%" y="709" width="0.1466%" height="15" fill="rgb(210,56,17)" fg:x="120" fg:w="1"/><text x="17.8453%" y="719.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, vulkan_layer_chassis::function_data, robin_hood::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, void&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::insert&lt;robin_hood::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, vulkan_layer_chassis::function_data&gt; const*&gt; (1 samples, 0.15%)</title><rect x="17.5953%" y="693" width="0.1466%" height="15" fill="rgb(224,130,29)" fg:x="120" fg:w="1"/><text x="17.8453%" y="703.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, vulkan_layer_chassis::function_data, robin_hood::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, void&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::insert (1 samples, 0.15%)</title><rect x="17.5953%" y="677" width="0.1466%" height="15" fill="rgb(235,212,8)" fg:x="120" fg:w="1"/><text x="17.8453%" y="687.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, vulkan_layer_chassis::function_data, robin_hood::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, void&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace&lt;robin_hood::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, vulkan_layer_chassis::function_data&gt; &gt; (1 samples, 0.15%)</title><rect x="17.5953%" y="661" width="0.1466%" height="15" fill="rgb(223,33,50)" fg:x="120" fg:w="1"/><text x="17.8453%" y="671.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, vulkan_layer_chassis::function_data, robin_hood::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, void&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::insertKeyPrepareEmptySpot&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (1 samples, 0.15%)</title><rect x="17.5953%" y="645" width="0.1466%" height="15" fill="rgb(219,149,13)" fg:x="120" fg:w="1"/><text x="17.8453%" y="655.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, vulkan_layer_chassis::function_data, robin_hood::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, void&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::increase_size (1 samples, 0.15%)</title><rect x="17.5953%" y="629" width="0.1466%" height="15" fill="rgb(250,156,29)" fg:x="120" fg:w="1"/><text x="17.8453%" y="639.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, vulkan_layer_chassis::function_data, robin_hood::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, void&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::rehashPowerOfTwo (1 samples, 0.15%)</title><rect x="17.5953%" y="613" width="0.1466%" height="15" fill="rgb(216,193,19)" fg:x="120" fg:w="1"/><text x="17.8453%" y="623.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, vulkan_layer_chassis::function_data, robin_hood::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, void&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::insert_move (1 samples, 0.15%)</title><rect x="17.5953%" y="597" width="0.1466%" height="15" fill="rgb(216,135,14)" fg:x="120" fg:w="1"/><text x="17.8453%" y="607.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, vulkan_layer_chassis::function_data, robin_hood::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, void&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::DataNode&lt;robin_hood::detail::Table&lt;true, 80ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, vulkan_layer_chassis::function_data, robin_hood::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, void&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, true&gt;::DataNode (1 samples, 0.15%)</title><rect x="17.5953%" y="581" width="0.1466%" height="15" fill="rgb(241,47,5)" fg:x="120" fg:w="1"/><text x="17.8453%" y="591.50"></text></g><g><title>robin_hood::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, vulkan_layer_chassis::function_data&gt;::pair (1 samples, 0.15%)</title><rect x="17.5953%" y="565" width="0.1466%" height="15" fill="rgb(233,42,35)" fg:x="120" fg:w="1"/><text x="17.8453%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="17.5953%" y="549" width="0.1466%" height="15" fill="rgb(231,13,6)" fg:x="120" fg:w="1"/><text x="17.8453%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="17.5953%" y="533" width="0.1466%" height="15" fill="rgb(207,181,40)" fg:x="120" fg:w="1"/><text x="17.8453%" y="543.50"></text></g><g><title>robin_hood::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair&lt;char const (&amp;) [21], char const (&amp;) [9]&gt; (1 samples, 0.15%)</title><rect x="17.7419%" y="709" width="0.1466%" height="15" fill="rgb(254,173,49)" fg:x="121" fg:w="1"/><text x="17.9919%" y="719.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.15%)</title><rect x="17.7419%" y="693" width="0.1466%" height="15" fill="rgb(221,1,38)" fg:x="121" fg:w="1"/><text x="17.9919%" y="703.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.15%)</title><rect x="17.7419%" y="677" width="0.1466%" height="15" fill="rgb(206,124,46)" fg:x="121" fg:w="1"/><text x="17.9919%" y="687.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (1 samples, 0.15%)</title><rect x="17.7419%" y="661" width="0.1466%" height="15" fill="rgb(249,21,11)" fg:x="121" fg:w="1"/><text x="17.9919%" y="671.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::allocate (1 samples, 0.15%)</title><rect x="17.7419%" y="645" width="0.1466%" height="15" fill="rgb(222,201,40)" fg:x="121" fg:w="1"/><text x="17.9919%" y="655.50"></text></g><g><title>std::__new_allocator&lt;char&gt;::allocate (1 samples, 0.15%)</title><rect x="17.7419%" y="629" width="0.1466%" height="15" fill="rgb(235,61,29)" fg:x="121" fg:w="1"/><text x="17.9919%" y="639.50"></text></g><g><title>operator new (1 samples, 0.15%)</title><rect x="17.7419%" y="613" width="0.1466%" height="15" fill="rgb(219,207,3)" fg:x="121" fg:w="1"/><text x="17.9919%" y="623.50"></text></g><g><title>__static_initialization_and_destruction_0 (4 samples, 0.59%)</title><rect x="17.5953%" y="725" width="0.5865%" height="15" fill="rgb(222,56,46)" fg:x="120" fg:w="4"/><text x="17.8453%" y="735.50"></text></g><g><title>std::set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::set (2 samples, 0.29%)</title><rect x="17.8886%" y="709" width="0.2933%" height="15" fill="rgb(239,76,54)" fg:x="122" fg:w="2"/><text x="18.1386%" y="719.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_insert_range_unique&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; (2 samples, 0.29%)</title><rect x="17.8886%" y="693" width="0.2933%" height="15" fill="rgb(231,124,27)" fg:x="122" fg:w="2"/><text x="18.1386%" y="703.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_insert_unique_&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Alloc_node&gt; (2 samples, 0.29%)</title><rect x="17.8886%" y="677" width="0.2933%" height="15" fill="rgb(249,195,6)" fg:x="122" fg:w="2"/><text x="18.1386%" y="687.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_insert_&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Alloc_node&gt; (2 samples, 0.29%)</title><rect x="17.8886%" y="661" width="0.2933%" height="15" fill="rgb(237,174,47)" fg:x="122" fg:w="2"/><text x="18.1386%" y="671.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Alloc_node::operator (2 samples, 0.29%)</title><rect x="17.8886%" y="645" width="0.2933%" height="15" fill="rgb(206,201,31)" fg:x="122" fg:w="2"/><text x="18.1386%" y="655.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_create_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (2 samples, 0.29%)</title><rect x="17.8886%" y="629" width="0.2933%" height="15" fill="rgb(231,57,52)" fg:x="122" fg:w="2"/><text x="18.1386%" y="639.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_construct_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (2 samples, 0.29%)</title><rect x="17.8886%" y="613" width="0.2933%" height="15" fill="rgb(248,177,22)" fg:x="122" fg:w="2"/><text x="18.1386%" y="623.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (2 samples, 0.29%)</title><rect x="17.8886%" y="597" width="0.2933%" height="15" fill="rgb(215,211,37)" fg:x="122" fg:w="2"/><text x="18.1386%" y="607.50"></text></g><g><title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (2 samples, 0.29%)</title><rect x="17.8886%" y="581" width="0.2933%" height="15" fill="rgb(241,128,51)" fg:x="122" fg:w="2"/><text x="18.1386%" y="591.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (2 samples, 0.29%)</title><rect x="17.8886%" y="565" width="0.2933%" height="15" fill="rgb(227,165,31)" fg:x="122" fg:w="2"/><text x="18.1386%" y="575.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (2 samples, 0.29%)</title><rect x="17.8886%" y="549" width="0.2933%" height="15" fill="rgb(228,167,24)" fg:x="122" fg:w="2"/><text x="18.1386%" y="559.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create (2 samples, 0.29%)</title><rect x="17.8886%" y="533" width="0.2933%" height="15" fill="rgb(228,143,12)" fg:x="122" fg:w="2"/><text x="18.1386%" y="543.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::allocate (2 samples, 0.29%)</title><rect x="17.8886%" y="517" width="0.2933%" height="15" fill="rgb(249,149,8)" fg:x="122" fg:w="2"/><text x="18.1386%" y="527.50"></text></g><g><title>std::__new_allocator&lt;char&gt;::allocate (2 samples, 0.29%)</title><rect x="17.8886%" y="501" width="0.2933%" height="15" fill="rgb(243,35,44)" fg:x="122" fg:w="2"/><text x="18.1386%" y="511.50"></text></g><g><title>operator new (2 samples, 0.29%)</title><rect x="17.8886%" y="485" width="0.2933%" height="15" fill="rgb(246,89,9)" fg:x="122" fg:w="2"/><text x="18.1386%" y="495.50"></text></g><g><title>malloc (2 samples, 0.29%)</title><rect x="17.8886%" y="469" width="0.2933%" height="15" fill="rgb(233,213,13)" fg:x="122" fg:w="2"/><text x="18.1386%" y="479.50"></text></g><g><title>hell_renderer::vulkan::swapchain::VulkanSwapchain::new (1 samples, 0.15%)</title><rect x="18.1818%" y="709" width="0.1466%" height="15" fill="rgb(233,141,41)" fg:x="124" fg:w="1"/><text x="18.4318%" y="719.50"></text></g><g><title>ash::extensions::khr::swapchain::Swapchain::create_swapchain (1 samples, 0.15%)</title><rect x="18.1818%" y="693" width="0.1466%" height="15" fill="rgb(239,167,4)" fg:x="124" fg:w="1"/><text x="18.4318%" y="703.50"></text></g><g><title>vulkan_layer_chassis::CreateSwapchainKHR (1 samples, 0.15%)</title><rect x="18.1818%" y="677" width="0.1466%" height="15" fill="rgb(209,217,16)" fg:x="124" fg:w="1"/><text x="18.4318%" y="687.50"></text></g><g><title>DispatchCreateSwapchainKHR (1 samples, 0.15%)</title><rect x="18.1818%" y="661" width="0.1466%" height="15" fill="rgb(219,88,35)" fg:x="124" fg:w="1"/><text x="18.4318%" y="671.50"></text></g><g><title>[libvulkan.so.1.3.235] (1 samples, 0.15%)</title><rect x="18.1818%" y="645" width="0.1466%" height="15" fill="rgb(220,193,23)" fg:x="124" fg:w="1"/><text x="18.4318%" y="655.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.1818%" y="629" width="0.1466%" height="15" fill="rgb(230,90,52)" fg:x="124" fg:w="1"/><text x="18.4318%" y="639.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.1818%" y="613" width="0.1466%" height="15" fill="rgb(252,106,19)" fg:x="124" fg:w="1"/><text x="18.4318%" y="623.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.1818%" y="597" width="0.1466%" height="15" fill="rgb(206,74,20)" fg:x="124" fg:w="1"/><text x="18.4318%" y="607.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.1818%" y="581" width="0.1466%" height="15" fill="rgb(230,138,44)" fg:x="124" fg:w="1"/><text x="18.4318%" y="591.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.1818%" y="565" width="0.1466%" height="15" fill="rgb(235,182,43)" fg:x="124" fg:w="1"/><text x="18.4318%" y="575.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.1818%" y="549" width="0.1466%" height="15" fill="rgb(242,16,51)" fg:x="124" fg:w="1"/><text x="18.4318%" y="559.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.1818%" y="533" width="0.1466%" height="15" fill="rgb(248,9,4)" fg:x="124" fg:w="1"/><text x="18.4318%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.1818%" y="517" width="0.1466%" height="15" fill="rgb(210,31,22)" fg:x="124" fg:w="1"/><text x="18.4318%" y="527.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.1818%" y="501" width="0.1466%" height="15" fill="rgb(239,54,39)" fg:x="124" fg:w="1"/><text x="18.4318%" y="511.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.1818%" y="485" width="0.1466%" height="15" fill="rgb(230,99,41)" fg:x="124" fg:w="1"/><text x="18.4318%" y="495.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.1818%" y="469" width="0.1466%" height="15" fill="rgb(253,106,12)" fg:x="124" fg:w="1"/><text x="18.4318%" y="479.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.1818%" y="453" width="0.1466%" height="15" fill="rgb(213,46,41)" fg:x="124" fg:w="1"/><text x="18.4318%" y="463.50"></text></g><g><title>hell_renderer::hell_renderer::HellRenderer::new (2 samples, 0.29%)</title><rect x="18.1818%" y="725" width="0.2933%" height="15" fill="rgb(215,133,35)" fg:x="124" fg:w="2"/><text x="18.4318%" y="735.50"></text></g><g><title>hell_renderer::vulkan::vulkan_backend::VulkanBackend::new (1 samples, 0.15%)</title><rect x="18.3284%" y="709" width="0.1466%" height="15" fill="rgb(213,28,5)" fg:x="125" fg:w="1"/><text x="18.5784%" y="719.50"></text></g><g><title>hell_renderer::vulkan::render_pass::VulkanRenderPassData::new (1 samples, 0.15%)</title><rect x="18.3284%" y="693" width="0.1466%" height="15" fill="rgb(215,77,49)" fg:x="125" fg:w="1"/><text x="18.5784%" y="703.50"></text></g><g><title>hell_renderer::vulkan::image::depth_image::DepthImage::new (1 samples, 0.15%)</title><rect x="18.3284%" y="677" width="0.1466%" height="15" fill="rgb(248,100,22)" fg:x="125" fg:w="1"/><text x="18.5784%" y="687.50"></text></g><g><title>hell_renderer::vulkan::image::raw_image::RawImage::transition_image_layout (1 samples, 0.15%)</title><rect x="18.3284%" y="661" width="0.1466%" height="15" fill="rgb(208,67,9)" fg:x="125" fg:w="1"/><text x="18.5784%" y="671.50"></text></g><g><title>hell_renderer::vulkan::command_buffer::VulkanCommandPool::begin_single_time_commands (1 samples, 0.15%)</title><rect x="18.3284%" y="645" width="0.1466%" height="15" fill="rgb(219,133,21)" fg:x="125" fg:w="1"/><text x="18.5784%" y="655.50"></text></g><g><title>ash::device::Device::begin_command_buffer (1 samples, 0.15%)</title><rect x="18.3284%" y="629" width="0.1466%" height="15" fill="rgb(246,46,29)" fg:x="125" fg:w="1"/><text x="18.5784%" y="639.50"></text></g><g><title>vulkan_layer_chassis::BeginCommandBuffer (1 samples, 0.15%)</title><rect x="18.3284%" y="613" width="0.1466%" height="15" fill="rgb(246,185,52)" fg:x="125" fg:w="1"/><text x="18.5784%" y="623.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.3284%" y="597" width="0.1466%" height="15" fill="rgb(252,136,11)" fg:x="125" fg:w="1"/><text x="18.5784%" y="607.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.3284%" y="581" width="0.1466%" height="15" fill="rgb(219,138,53)" fg:x="125" fg:w="1"/><text x="18.5784%" y="591.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.3284%" y="565" width="0.1466%" height="15" fill="rgb(211,51,23)" fg:x="125" fg:w="1"/><text x="18.5784%" y="575.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.3284%" y="549" width="0.1466%" height="15" fill="rgb(247,221,28)" fg:x="125" fg:w="1"/><text x="18.5784%" y="559.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.3284%" y="533" width="0.1466%" height="15" fill="rgb(251,222,45)" fg:x="125" fg:w="1"/><text x="18.5784%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.3284%" y="517" width="0.1466%" height="15" fill="rgb(217,162,53)" fg:x="125" fg:w="1"/><text x="18.5784%" y="527.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.3284%" y="501" width="0.1466%" height="15" fill="rgb(229,93,14)" fg:x="125" fg:w="1"/><text x="18.5784%" y="511.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.3284%" y="485" width="0.1466%" height="15" fill="rgb(209,67,49)" fg:x="125" fg:w="1"/><text x="18.5784%" y="495.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.3284%" y="469" width="0.1466%" height="15" fill="rgb(213,87,29)" fg:x="125" fg:w="1"/><text x="18.5784%" y="479.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.3284%" y="453" width="0.1466%" height="15" fill="rgb(205,151,52)" fg:x="125" fg:w="1"/><text x="18.5784%" y="463.50"></text></g><g><title>hell_renderer::vulkan::instance::VulkanInstance::new (1 samples, 0.15%)</title><rect x="18.4751%" y="725" width="0.1466%" height="15" fill="rgb(253,215,39)" fg:x="126" fg:w="1"/><text x="18.7251%" y="735.50"></text></g><g><title>ash::entry::Entry::create_instance (1 samples, 0.15%)</title><rect x="18.4751%" y="709" width="0.1466%" height="15" fill="rgb(221,220,41)" fg:x="126" fg:w="1"/><text x="18.7251%" y="719.50"></text></g><g><title>vkCreateInstance (1 samples, 0.15%)</title><rect x="18.4751%" y="693" width="0.1466%" height="15" fill="rgb(218,133,21)" fg:x="126" fg:w="1"/><text x="18.7251%" y="703.50"></text></g><g><title>[libvulkan.so.1.3.235] (1 samples, 0.15%)</title><rect x="18.4751%" y="677" width="0.1466%" height="15" fill="rgb(221,193,43)" fg:x="126" fg:w="1"/><text x="18.7251%" y="687.50"></text></g><g><title>vulkan_layer_chassis::CreateInstance (1 samples, 0.15%)</title><rect x="18.4751%" y="661" width="0.1466%" height="15" fill="rgb(240,128,52)" fg:x="126" fg:w="1"/><text x="18.7251%" y="671.50"></text></g><g><title>[libvulkan.so.1.3.235] (1 samples, 0.15%)</title><rect x="18.4751%" y="645" width="0.1466%" height="15" fill="rgb(253,114,12)" fg:x="126" fg:w="1"/><text x="18.7251%" y="655.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.4751%" y="629" width="0.1466%" height="15" fill="rgb(215,223,47)" fg:x="126" fg:w="1"/><text x="18.7251%" y="639.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.4751%" y="613" width="0.1466%" height="15" fill="rgb(248,225,23)" fg:x="126" fg:w="1"/><text x="18.7251%" y="623.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.4751%" y="597" width="0.1466%" height="15" fill="rgb(250,108,0)" fg:x="126" fg:w="1"/><text x="18.7251%" y="607.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.4751%" y="581" width="0.1466%" height="15" fill="rgb(228,208,7)" fg:x="126" fg:w="1"/><text x="18.7251%" y="591.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.4751%" y="565" width="0.1466%" height="15" fill="rgb(244,45,10)" fg:x="126" fg:w="1"/><text x="18.7251%" y="575.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.4751%" y="549" width="0.1466%" height="15" fill="rgb(207,125,25)" fg:x="126" fg:w="1"/><text x="18.7251%" y="559.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.4751%" y="533" width="0.1466%" height="15" fill="rgb(210,195,18)" fg:x="126" fg:w="1"/><text x="18.7251%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.4751%" y="517" width="0.1466%" height="15" fill="rgb(249,80,12)" fg:x="126" fg:w="1"/><text x="18.7251%" y="527.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.4751%" y="501" width="0.1466%" height="15" fill="rgb(221,65,9)" fg:x="126" fg:w="1"/><text x="18.7251%" y="511.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.4751%" y="485" width="0.1466%" height="15" fill="rgb(235,49,36)" fg:x="126" fg:w="1"/><text x="18.7251%" y="495.50"></text></g><g><title>dlopen (1 samples, 0.15%)</title><rect x="18.4751%" y="469" width="0.1466%" height="15" fill="rgb(225,32,20)" fg:x="126" fg:w="1"/><text x="18.7251%" y="479.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="18.4751%" y="453" width="0.1466%" height="15" fill="rgb(215,141,46)" fg:x="126" fg:w="1"/><text x="18.7251%" y="463.50"></text></g><g><title>_dl_catch_error (1 samples, 0.15%)</title><rect x="18.4751%" y="437" width="0.1466%" height="15" fill="rgb(250,160,47)" fg:x="126" fg:w="1"/><text x="18.7251%" y="447.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.15%)</title><rect x="18.4751%" y="421" width="0.1466%" height="15" fill="rgb(216,222,40)" fg:x="126" fg:w="1"/><text x="18.7251%" y="431.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="18.4751%" y="405" width="0.1466%" height="15" fill="rgb(234,217,39)" fg:x="126" fg:w="1"/><text x="18.7251%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="18.4751%" y="389" width="0.1466%" height="15" fill="rgb(207,178,40)" fg:x="126" fg:w="1"/><text x="18.7251%" y="399.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.15%)</title><rect x="18.4751%" y="373" width="0.1466%" height="15" fill="rgb(221,136,13)" fg:x="126" fg:w="1"/><text x="18.7251%" y="383.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="18.4751%" y="357" width="0.1466%" height="15" fill="rgb(249,199,10)" fg:x="126" fg:w="1"/><text x="18.7251%" y="367.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.15%)</title><rect x="18.4751%" y="341" width="0.1466%" height="15" fill="rgb(249,222,13)" fg:x="126" fg:w="1"/><text x="18.7251%" y="351.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="18.4751%" y="325" width="0.1466%" height="15" fill="rgb(244,185,38)" fg:x="126" fg:w="1"/><text x="18.7251%" y="335.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="18.4751%" y="309" width="0.1466%" height="15" fill="rgb(236,202,9)" fg:x="126" fg:w="1"/><text x="18.7251%" y="319.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="18.4751%" y="293" width="0.1466%" height="15" fill="rgb(250,229,37)" fg:x="126" fg:w="1"/><text x="18.7251%" y="303.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="18.4751%" y="277" width="0.1466%" height="15" fill="rgb(206,174,23)" fg:x="126" fg:w="1"/><text x="18.7251%" y="287.50"></text></g><g><title>hell_renderer::vulkan::logic_device::VulkanLogicDevice::new (1 samples, 0.15%)</title><rect x="18.6217%" y="725" width="0.1466%" height="15" fill="rgb(211,33,43)" fg:x="127" fg:w="1"/><text x="18.8717%" y="735.50"></text></g><g><title>ash::instance::Instance::create_device (1 samples, 0.15%)</title><rect x="18.6217%" y="709" width="0.1466%" height="15" fill="rgb(245,58,50)" fg:x="127" fg:w="1"/><text x="18.8717%" y="719.50"></text></g><g><title>vkCreateDevice (1 samples, 0.15%)</title><rect x="18.6217%" y="693" width="0.1466%" height="15" fill="rgb(244,68,36)" fg:x="127" fg:w="1"/><text x="18.8717%" y="703.50"></text></g><g><title>[libvulkan.so.1.3.235] (1 samples, 0.15%)</title><rect x="18.6217%" y="677" width="0.1466%" height="15" fill="rgb(232,229,15)" fg:x="127" fg:w="1"/><text x="18.8717%" y="687.50"></text></g><g><title>[libvulkan.so.1.3.235] (1 samples, 0.15%)</title><rect x="18.6217%" y="661" width="0.1466%" height="15" fill="rgb(254,30,23)" fg:x="127" fg:w="1"/><text x="18.8717%" y="671.50"></text></g><g><title>vulkan_layer_chassis::CreateDevice (1 samples, 0.15%)</title><rect x="18.6217%" y="645" width="0.1466%" height="15" fill="rgb(235,160,14)" fg:x="127" fg:w="1"/><text x="18.8717%" y="655.50"></text></g><g><title>[libvulkan.so.1.3.235] (1 samples, 0.15%)</title><rect x="18.6217%" y="629" width="0.1466%" height="15" fill="rgb(212,155,44)" fg:x="127" fg:w="1"/><text x="18.8717%" y="639.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.6217%" y="613" width="0.1466%" height="15" fill="rgb(226,2,50)" fg:x="127" fg:w="1"/><text x="18.8717%" y="623.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.6217%" y="597" width="0.1466%" height="15" fill="rgb(234,177,6)" fg:x="127" fg:w="1"/><text x="18.8717%" y="607.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.6217%" y="581" width="0.1466%" height="15" fill="rgb(217,24,9)" fg:x="127" fg:w="1"/><text x="18.8717%" y="591.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.6217%" y="565" width="0.1466%" height="15" fill="rgb(220,13,46)" fg:x="127" fg:w="1"/><text x="18.8717%" y="575.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.6217%" y="549" width="0.1466%" height="15" fill="rgb(239,221,27)" fg:x="127" fg:w="1"/><text x="18.8717%" y="559.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.6217%" y="533" width="0.1466%" height="15" fill="rgb(222,198,25)" fg:x="127" fg:w="1"/><text x="18.8717%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.6217%" y="517" width="0.1466%" height="15" fill="rgb(211,99,13)" fg:x="127" fg:w="1"/><text x="18.8717%" y="527.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.6217%" y="501" width="0.1466%" height="15" fill="rgb(232,111,31)" fg:x="127" fg:w="1"/><text x="18.8717%" y="511.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.6217%" y="485" width="0.1466%" height="15" fill="rgb(245,82,37)" fg:x="127" fg:w="1"/><text x="18.8717%" y="495.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.6217%" y="469" width="0.1466%" height="15" fill="rgb(227,149,46)" fg:x="127" fg:w="1"/><text x="18.8717%" y="479.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.6217%" y="453" width="0.1466%" height="15" fill="rgb(218,36,50)" fg:x="127" fg:w="1"/><text x="18.8717%" y="463.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.6217%" y="437" width="0.1466%" height="15" fill="rgb(226,80,48)" fg:x="127" fg:w="1"/><text x="18.8717%" y="447.50"></text></g><g><title>ash::instance::Instance::enumerate_device_extension_properties (1 samples, 0.15%)</title><rect x="18.7683%" y="677" width="0.1466%" height="15" fill="rgb(238,224,15)" fg:x="128" fg:w="1"/><text x="19.0183%" y="687.50"></text></g><g><title>ash::prelude::read_into_uninitialized_vector (1 samples, 0.15%)</title><rect x="18.7683%" y="661" width="0.1466%" height="15" fill="rgb(241,136,10)" fg:x="128" fg:w="1"/><text x="19.0183%" y="671.50"></text></g><g><title>vkEnumerateDeviceExtensionProperties (1 samples, 0.15%)</title><rect x="18.7683%" y="645" width="0.1466%" height="15" fill="rgb(208,32,45)" fg:x="128" fg:w="1"/><text x="19.0183%" y="655.50"></text></g><g><title>[libvulkan.so.1.3.235] (1 samples, 0.15%)</title><rect x="18.7683%" y="629" width="0.1466%" height="15" fill="rgb(207,135,9)" fg:x="128" fg:w="1"/><text x="19.0183%" y="639.50"></text></g><g><title>[libvulkan.so.1.3.235] (1 samples, 0.15%)</title><rect x="18.7683%" y="613" width="0.1466%" height="15" fill="rgb(206,86,44)" fg:x="128" fg:w="1"/><text x="19.0183%" y="623.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="18.7683%" y="597" width="0.1466%" height="15" fill="rgb(245,177,15)" fg:x="128" fg:w="1"/><text x="19.0183%" y="607.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.9150%" y="597" width="0.1466%" height="15" fill="rgb(206,64,50)" fg:x="129" fg:w="1"/><text x="19.1650%" y="607.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.9150%" y="581" width="0.1466%" height="15" fill="rgb(234,36,40)" fg:x="129" fg:w="1"/><text x="19.1650%" y="591.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.9150%" y="565" width="0.1466%" height="15" fill="rgb(213,64,8)" fg:x="129" fg:w="1"/><text x="19.1650%" y="575.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (1 samples, 0.15%)</title><rect x="18.9150%" y="549" width="0.1466%" height="15" fill="rgb(210,75,36)" fg:x="129" fg:w="1"/><text x="19.1650%" y="559.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="18.9150%" y="533" width="0.1466%" height="15" fill="rgb(229,88,21)" fg:x="129" fg:w="1"/><text x="19.1650%" y="543.50"></text></g><g><title>hell_renderer::vulkan::phys_device::VulkanPhysDevice::pick_phys_device (3 samples, 0.44%)</title><rect x="18.7683%" y="725" width="0.4399%" height="15" fill="rgb(252,204,47)" fg:x="128" fg:w="3"/><text x="19.0183%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.44%)</title><rect x="18.7683%" y="709" width="0.4399%" height="15" fill="rgb(208,77,27)" fg:x="128" fg:w="3"/><text x="19.0183%" y="719.50"></text></g><g><title>hell_renderer::vulkan::phys_device::VulkanPhysDevice::rate_device_suitability (3 samples, 0.44%)</title><rect x="18.7683%" y="693" width="0.4399%" height="15" fill="rgb(221,76,26)" fg:x="128" fg:w="3"/><text x="19.0183%" y="703.50"></text></g><g><title>hell_renderer::vulkan::queues::VulkanQueueSupport::new (2 samples, 0.29%)</title><rect x="18.9150%" y="677" width="0.2933%" height="15" fill="rgb(225,139,18)" fg:x="129" fg:w="2"/><text x="19.1650%" y="687.50"></text></g><g><title>ash::extensions::khr::surface::Surface::get_physical_device_surface_support (2 samples, 0.29%)</title><rect x="18.9150%" y="661" width="0.2933%" height="15" fill="rgb(230,137,11)" fg:x="129" fg:w="2"/><text x="19.1650%" y="671.50"></text></g><g><title>vulkan_layer_chassis::GetPhysicalDeviceSurfaceSupportKHR (2 samples, 0.29%)</title><rect x="18.9150%" y="645" width="0.2933%" height="15" fill="rgb(212,28,1)" fg:x="129" fg:w="2"/><text x="19.1650%" y="655.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="18.9150%" y="629" width="0.2933%" height="15" fill="rgb(248,164,17)" fg:x="129" fg:w="2"/><text x="19.1650%" y="639.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="18.9150%" y="613" width="0.2933%" height="15" fill="rgb(222,171,42)" fg:x="129" fg:w="2"/><text x="19.1650%" y="623.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.0616%" y="597" width="0.1466%" height="15" fill="rgb(243,84,45)" fg:x="130" fg:w="1"/><text x="19.3116%" y="607.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.0616%" y="581" width="0.1466%" height="15" fill="rgb(252,49,23)" fg:x="130" fg:w="1"/><text x="19.3116%" y="591.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.0616%" y="565" width="0.1466%" height="15" fill="rgb(215,19,7)" fg:x="130" fg:w="1"/><text x="19.3116%" y="575.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.0616%" y="549" width="0.1466%" height="15" fill="rgb(238,81,41)" fg:x="130" fg:w="1"/><text x="19.3116%" y="559.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.0616%" y="533" width="0.1466%" height="15" fill="rgb(210,199,37)" fg:x="130" fg:w="1"/><text x="19.3116%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.0616%" y="517" width="0.1466%" height="15" fill="rgb(244,192,49)" fg:x="130" fg:w="1"/><text x="19.3116%" y="527.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.0616%" y="501" width="0.1466%" height="15" fill="rgb(226,211,11)" fg:x="130" fg:w="1"/><text x="19.3116%" y="511.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.0616%" y="485" width="0.1466%" height="15" fill="rgb(236,162,54)" fg:x="130" fg:w="1"/><text x="19.3116%" y="495.50"></text></g><g><title>hell_renderer::vulkan::vulkan_backend::VulkanBackend::create_shaders (2 samples, 0.29%)</title><rect x="19.2082%" y="725" width="0.2933%" height="15" fill="rgb(220,229,9)" fg:x="131" fg:w="2"/><text x="19.4582%" y="735.50"></text></g><g><title>hell_renderer::vulkan::shader::sprite_shader::VulkanSpriteShader::new (2 samples, 0.29%)</title><rect x="19.2082%" y="709" width="0.2933%" height="15" fill="rgb(250,87,22)" fg:x="131" fg:w="2"/><text x="19.4582%" y="719.50"></text></g><g><title>hell_renderer::vulkan::pipeline::VulkanPipeline::new (2 samples, 0.29%)</title><rect x="19.2082%" y="693" width="0.2933%" height="15" fill="rgb(239,43,17)" fg:x="131" fg:w="2"/><text x="19.4582%" y="703.50"></text></g><g><title>ash::device::Device::create_graphics_pipelines (2 samples, 0.29%)</title><rect x="19.2082%" y="677" width="0.2933%" height="15" fill="rgb(231,177,25)" fg:x="131" fg:w="2"/><text x="19.4582%" y="687.50"></text></g><g><title>vulkan_layer_chassis::CreateGraphicsPipelines (2 samples, 0.29%)</title><rect x="19.2082%" y="661" width="0.2933%" height="15" fill="rgb(219,179,1)" fg:x="131" fg:w="2"/><text x="19.4582%" y="671.50"></text></g><g><title>DispatchCreateGraphicsPipelines (2 samples, 0.29%)</title><rect x="19.2082%" y="645" width="0.2933%" height="15" fill="rgb(238,219,53)" fg:x="131" fg:w="2"/><text x="19.4582%" y="655.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="19.2082%" y="629" width="0.2933%" height="15" fill="rgb(232,167,36)" fg:x="131" fg:w="2"/><text x="19.4582%" y="639.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="19.2082%" y="613" width="0.2933%" height="15" fill="rgb(244,19,51)" fg:x="131" fg:w="2"/><text x="19.4582%" y="623.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="19.2082%" y="597" width="0.2933%" height="15" fill="rgb(224,6,22)" fg:x="131" fg:w="2"/><text x="19.4582%" y="607.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="19.2082%" y="581" width="0.2933%" height="15" fill="rgb(224,145,5)" fg:x="131" fg:w="2"/><text x="19.4582%" y="591.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="19.2082%" y="565" width="0.2933%" height="15" fill="rgb(234,130,49)" fg:x="131" fg:w="2"/><text x="19.4582%" y="575.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="19.2082%" y="549" width="0.2933%" height="15" fill="rgb(254,6,2)" fg:x="131" fg:w="2"/><text x="19.4582%" y="559.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="19.2082%" y="533" width="0.2933%" height="15" fill="rgb(208,96,46)" fg:x="131" fg:w="2"/><text x="19.4582%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="19.2082%" y="517" width="0.2933%" height="15" fill="rgb(239,3,39)" fg:x="131" fg:w="2"/><text x="19.4582%" y="527.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="19.2082%" y="501" width="0.2933%" height="15" fill="rgb(233,210,1)" fg:x="131" fg:w="2"/><text x="19.4582%" y="511.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="19.2082%" y="485" width="0.2933%" height="15" fill="rgb(244,137,37)" fg:x="131" fg:w="2"/><text x="19.4582%" y="495.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="19.2082%" y="469" width="0.2933%" height="15" fill="rgb(240,136,2)" fg:x="131" fg:w="2"/><text x="19.4582%" y="479.50"></text></g><g><title>hell_renderer::vulkan::instance::VulkanInstance::new (1 samples, 0.15%)</title><rect x="19.5015%" y="709" width="0.1466%" height="15" fill="rgb(239,18,37)" fg:x="133" fg:w="1"/><text x="19.7515%" y="719.50"></text></g><g><title>ash::entry::Entry::create_instance (1 samples, 0.15%)</title><rect x="19.5015%" y="693" width="0.1466%" height="15" fill="rgb(218,185,22)" fg:x="133" fg:w="1"/><text x="19.7515%" y="703.50"></text></g><g><title>vkCreateInstance (1 samples, 0.15%)</title><rect x="19.5015%" y="677" width="0.1466%" height="15" fill="rgb(225,218,4)" fg:x="133" fg:w="1"/><text x="19.7515%" y="687.50"></text></g><g><title>[libvulkan.so.1.3.235] (1 samples, 0.15%)</title><rect x="19.5015%" y="661" width="0.1466%" height="15" fill="rgb(230,182,32)" fg:x="133" fg:w="1"/><text x="19.7515%" y="671.50"></text></g><g><title>dlopen (1 samples, 0.15%)</title><rect x="19.5015%" y="645" width="0.1466%" height="15" fill="rgb(242,56,43)" fg:x="133" fg:w="1"/><text x="19.7515%" y="655.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="19.5015%" y="629" width="0.1466%" height="15" fill="rgb(233,99,24)" fg:x="133" fg:w="1"/><text x="19.7515%" y="639.50"></text></g><g><title>_dl_catch_error (1 samples, 0.15%)</title><rect x="19.5015%" y="613" width="0.1466%" height="15" fill="rgb(234,209,42)" fg:x="133" fg:w="1"/><text x="19.7515%" y="623.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.15%)</title><rect x="19.5015%" y="597" width="0.1466%" height="15" fill="rgb(227,7,12)" fg:x="133" fg:w="1"/><text x="19.7515%" y="607.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="19.5015%" y="581" width="0.1466%" height="15" fill="rgb(245,203,43)" fg:x="133" fg:w="1"/><text x="19.7515%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="19.5015%" y="565" width="0.1466%" height="15" fill="rgb(238,205,33)" fg:x="133" fg:w="1"/><text x="19.7515%" y="575.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.15%)</title><rect x="19.5015%" y="549" width="0.1466%" height="15" fill="rgb(231,56,7)" fg:x="133" fg:w="1"/><text x="19.7515%" y="559.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="19.5015%" y="533" width="0.1466%" height="15" fill="rgb(244,186,29)" fg:x="133" fg:w="1"/><text x="19.7515%" y="543.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.15%)</title><rect x="19.5015%" y="517" width="0.1466%" height="15" fill="rgb(234,111,31)" fg:x="133" fg:w="1"/><text x="19.7515%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="19.5015%" y="501" width="0.1466%" height="15" fill="rgb(241,149,10)" fg:x="133" fg:w="1"/><text x="19.7515%" y="511.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="19.5015%" y="485" width="0.1466%" height="15" fill="rgb(249,206,44)" fg:x="133" fg:w="1"/><text x="19.7515%" y="495.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="19.5015%" y="469" width="0.1466%" height="15" fill="rgb(251,153,30)" fg:x="133" fg:w="1"/><text x="19.7515%" y="479.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.15%)</title><rect x="19.5015%" y="453" width="0.1466%" height="15" fill="rgb(239,152,38)" fg:x="133" fg:w="1"/><text x="19.7515%" y="463.50"></text></g><g><title>ValidationObject::InitObjectDispatchVectors (1 samples, 0.15%)</title><rect x="19.6481%" y="613" width="0.1466%" height="15" fill="rgb(249,139,47)" fg:x="134" fg:w="1"/><text x="19.8981%" y="623.50"></text></g><g><title>operator (1 samples, 0.15%)</title><rect x="19.6481%" y="597" width="0.1466%" height="15" fill="rgb(244,64,35)" fg:x="134" fg:w="1"/><text x="19.8981%" y="607.50"></text></g><g><title>std::vector&lt;ValidationObject*, std::allocator&lt;ValidationObject*&gt; &gt;::push_back (1 samples, 0.15%)</title><rect x="19.6481%" y="581" width="0.1466%" height="15" fill="rgb(216,46,15)" fg:x="134" fg:w="1"/><text x="19.8981%" y="591.50"></text></g><g><title>std::vector&lt;ValidationObject*, std::allocator&lt;ValidationObject*&gt; &gt;::_M_realloc_insert&lt;ValidationObject* const&amp;&gt; (1 samples, 0.15%)</title><rect x="19.6481%" y="565" width="0.1466%" height="15" fill="rgb(250,74,19)" fg:x="134" fg:w="1"/><text x="19.8981%" y="575.50"></text></g><g><title>std::_Vector_base&lt;ValidationObject*, std::allocator&lt;ValidationObject*&gt; &gt;::_M_allocate (1 samples, 0.15%)</title><rect x="19.6481%" y="549" width="0.1466%" height="15" fill="rgb(249,42,33)" fg:x="134" fg:w="1"/><text x="19.8981%" y="559.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;ValidationObject*&gt; &gt;::allocate (1 samples, 0.15%)</title><rect x="19.6481%" y="533" width="0.1466%" height="15" fill="rgb(242,149,17)" fg:x="134" fg:w="1"/><text x="19.8981%" y="543.50"></text></g><g><title>std::__new_allocator&lt;VkDebugUtilsMessengerEXT_T*&gt;::allocate (1 samples, 0.15%)</title><rect x="19.6481%" y="517" width="0.1466%" height="15" fill="rgb(244,29,21)" fg:x="134" fg:w="1"/><text x="19.8981%" y="527.50"></text></g><g><title>operator new (1 samples, 0.15%)</title><rect x="19.6481%" y="501" width="0.1466%" height="15" fill="rgb(220,130,37)" fg:x="134" fg:w="1"/><text x="19.8981%" y="511.50"></text></g><g><title>malloc (1 samples, 0.15%)</title><rect x="19.6481%" y="485" width="0.1466%" height="15" fill="rgb(211,67,2)" fg:x="134" fg:w="1"/><text x="19.8981%" y="495.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="19.6481%" y="469" width="0.1466%" height="15" fill="rgb(235,68,52)" fg:x="134" fg:w="1"/><text x="19.8981%" y="479.50"></text></g><g><title>hell_renderer::vulkan::vulkan_context::VulkanCtx::new (3 samples, 0.44%)</title><rect x="19.5015%" y="725" width="0.4399%" height="15" fill="rgb(246,142,3)" fg:x="133" fg:w="3"/><text x="19.7515%" y="735.50"></text></g><g><title>hell_renderer::vulkan::logic_device::VulkanLogicDevice::new (2 samples, 0.29%)</title><rect x="19.6481%" y="709" width="0.2933%" height="15" fill="rgb(241,25,7)" fg:x="134" fg:w="2"/><text x="19.8981%" y="719.50"></text></g><g><title>ash::instance::Instance::create_device (2 samples, 0.29%)</title><rect x="19.6481%" y="693" width="0.2933%" height="15" fill="rgb(242,119,39)" fg:x="134" fg:w="2"/><text x="19.8981%" y="703.50"></text></g><g><title>vkCreateDevice (2 samples, 0.29%)</title><rect x="19.6481%" y="677" width="0.2933%" height="15" fill="rgb(241,98,45)" fg:x="134" fg:w="2"/><text x="19.8981%" y="687.50"></text></g><g><title>[libvulkan.so.1.3.235] (2 samples, 0.29%)</title><rect x="19.6481%" y="661" width="0.2933%" height="15" fill="rgb(254,28,30)" fg:x="134" fg:w="2"/><text x="19.8981%" y="671.50"></text></g><g><title>[libvulkan.so.1.3.235] (2 samples, 0.29%)</title><rect x="19.6481%" y="645" width="0.2933%" height="15" fill="rgb(241,142,54)" fg:x="134" fg:w="2"/><text x="19.8981%" y="655.50"></text></g><g><title>vulkan_layer_chassis::CreateDevice (2 samples, 0.29%)</title><rect x="19.6481%" y="629" width="0.2933%" height="15" fill="rgb(222,85,15)" fg:x="134" fg:w="2"/><text x="19.8981%" y="639.50"></text></g><g><title>layer_init_device_dispatch_table (1 samples, 0.15%)</title><rect x="19.7947%" y="613" width="0.1466%" height="15" fill="rgb(210,85,47)" fg:x="135" fg:w="1"/><text x="20.0447%" y="623.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.7947%" y="597" width="0.1466%" height="15" fill="rgb(224,206,25)" fg:x="135" fg:w="1"/><text x="20.0447%" y="607.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.7947%" y="581" width="0.1466%" height="15" fill="rgb(243,201,19)" fg:x="135" fg:w="1"/><text x="20.0447%" y="591.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.7947%" y="565" width="0.1466%" height="15" fill="rgb(236,59,4)" fg:x="135" fg:w="1"/><text x="20.0447%" y="575.50"></text></g><g><title>hell_winit::window::Window::main_loop::{{closure}} (1 samples, 0.15%)</title><rect x="19.9413%" y="725" width="0.1466%" height="15" fill="rgb(254,179,45)" fg:x="136" fg:w="1"/><text x="20.1913%" y="735.50"></text></g><g><title>hell_winit::window::Window::handle_redraw_request (1 samples, 0.15%)</title><rect x="19.9413%" y="709" width="0.1466%" height="15" fill="rgb(226,14,10)" fg:x="136" fg:w="1"/><text x="20.1913%" y="719.50"></text></g><g><title>hell_app::app::HellApp::draw_frame (1 samples, 0.15%)</title><rect x="19.9413%" y="693" width="0.1466%" height="15" fill="rgb(244,27,41)" fg:x="136" fg:w="1"/><text x="20.1913%" y="703.50"></text></g><g><title>hell_renderer::hell_renderer::HellRenderer::draw_frame (1 samples, 0.15%)</title><rect x="19.9413%" y="677" width="0.1466%" height="15" fill="rgb(235,35,32)" fg:x="136" fg:w="1"/><text x="20.1913%" y="687.50"></text></g><g><title>hell_renderer::vulkan::vulkan_backend::VulkanBackend::draw_frame (1 samples, 0.15%)</title><rect x="19.9413%" y="661" width="0.1466%" height="15" fill="rgb(218,68,31)" fg:x="136" fg:w="1"/><text x="20.1913%" y="671.50"></text></g><g><title>hell_renderer::vulkan::frame::VulkanFrameData::present_queue (1 samples, 0.15%)</title><rect x="19.9413%" y="645" width="0.1466%" height="15" fill="rgb(207,120,37)" fg:x="136" fg:w="1"/><text x="20.1913%" y="655.50"></text></g><g><title>ash::extensions::khr::swapchain::Swapchain::queue_present (1 samples, 0.15%)</title><rect x="19.9413%" y="629" width="0.1466%" height="15" fill="rgb(227,98,0)" fg:x="136" fg:w="1"/><text x="20.1913%" y="639.50"></text></g><g><title>vulkan_layer_chassis::QueuePresentKHR (1 samples, 0.15%)</title><rect x="19.9413%" y="613" width="0.1466%" height="15" fill="rgb(207,7,3)" fg:x="136" fg:w="1"/><text x="20.1913%" y="623.50"></text></g><g><title>DispatchQueuePresentKHR (1 samples, 0.15%)</title><rect x="19.9413%" y="597" width="0.1466%" height="15" fill="rgb(206,98,19)" fg:x="136" fg:w="1"/><text x="20.1913%" y="607.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.9413%" y="581" width="0.1466%" height="15" fill="rgb(217,5,26)" fg:x="136" fg:w="1"/><text x="20.1913%" y="591.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.9413%" y="565" width="0.1466%" height="15" fill="rgb(235,190,38)" fg:x="136" fg:w="1"/><text x="20.1913%" y="575.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.9413%" y="549" width="0.1466%" height="15" fill="rgb(247,86,24)" fg:x="136" fg:w="1"/><text x="20.1913%" y="559.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.9413%" y="533" width="0.1466%" height="15" fill="rgb(205,101,16)" fg:x="136" fg:w="1"/><text x="20.1913%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.9413%" y="517" width="0.1466%" height="15" fill="rgb(246,168,33)" fg:x="136" fg:w="1"/><text x="20.1913%" y="527.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.9413%" y="501" width="0.1466%" height="15" fill="rgb(231,114,1)" fg:x="136" fg:w="1"/><text x="20.1913%" y="511.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.9413%" y="485" width="0.1466%" height="15" fill="rgb(207,184,53)" fg:x="136" fg:w="1"/><text x="20.1913%" y="495.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.9413%" y="469" width="0.1466%" height="15" fill="rgb(224,95,51)" fg:x="136" fg:w="1"/><text x="20.1913%" y="479.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.9413%" y="453" width="0.1466%" height="15" fill="rgb(212,188,45)" fg:x="136" fg:w="1"/><text x="20.1913%" y="463.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.9413%" y="437" width="0.1466%" height="15" fill="rgb(223,154,38)" fg:x="136" fg:w="1"/><text x="20.1913%" y="447.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.9413%" y="421" width="0.1466%" height="15" fill="rgb(251,22,52)" fg:x="136" fg:w="1"/><text x="20.1913%" y="431.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.9413%" y="405" width="0.1466%" height="15" fill="rgb(229,209,22)" fg:x="136" fg:w="1"/><text x="20.1913%" y="415.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.9413%" y="389" width="0.1466%" height="15" fill="rgb(234,138,34)" fg:x="136" fg:w="1"/><text x="20.1913%" y="399.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.9413%" y="373" width="0.1466%" height="15" fill="rgb(212,95,11)" fg:x="136" fg:w="1"/><text x="20.1913%" y="383.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="19.9413%" y="357" width="0.1466%" height="15" fill="rgb(240,179,47)" fg:x="136" fg:w="1"/><text x="20.1913%" y="367.50"></text></g><g><title>vkDestroyDevice (1 samples, 0.15%)</title><rect x="20.0880%" y="629" width="0.1466%" height="15" fill="rgb(240,163,11)" fg:x="137" fg:w="1"/><text x="20.3380%" y="639.50"></text></g><g><title>vulkan_layer_chassis::DestroyDevice (1 samples, 0.15%)</title><rect x="20.0880%" y="613" width="0.1466%" height="15" fill="rgb(236,37,12)" fg:x="137" fg:w="1"/><text x="20.3380%" y="623.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (1 samples, 0.15%)</title><rect x="20.0880%" y="597" width="0.1466%" height="15" fill="rgb(232,164,16)" fg:x="137" fg:w="1"/><text x="20.3380%" y="607.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="20.0880%" y="581" width="0.1466%" height="15" fill="rgb(244,205,15)" fg:x="137" fg:w="1"/><text x="20.3380%" y="591.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="20.0880%" y="565" width="0.1466%" height="15" fill="rgb(223,117,47)" fg:x="137" fg:w="1"/><text x="20.3380%" y="575.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="20.0880%" y="549" width="0.1466%" height="15" fill="rgb(244,107,35)" fg:x="137" fg:w="1"/><text x="20.3380%" y="559.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="20.0880%" y="533" width="0.1466%" height="15" fill="rgb(205,140,8)" fg:x="137" fg:w="1"/><text x="20.3380%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="20.0880%" y="517" width="0.1466%" height="15" fill="rgb(228,84,46)" fg:x="137" fg:w="1"/><text x="20.3380%" y="527.50"></text></g><g><title>robin_hood::detail::NodeAllocator&lt;robin_hood::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, 4ul, 16384ul, false&gt;::~NodeAllocator (2 samples, 0.29%)</title><rect x="20.2346%" y="437" width="0.2933%" height="15" fill="rgb(254,188,9)" fg:x="138" fg:w="2"/><text x="20.4846%" y="447.50"></text></g><g><title>robin_hood::detail::BulkPoolAllocator&lt;robin_hood::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, 4ul, 16384ul&gt;::~BulkPoolAllocator (2 samples, 0.29%)</title><rect x="20.2346%" y="421" width="0.2933%" height="15" fill="rgb(206,112,54)" fg:x="138" fg:w="2"/><text x="20.4846%" y="431.50"></text></g><g><title>robin_hood::detail::BulkPoolAllocator&lt;robin_hood::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, InstanceExtensions::InstanceInfo&gt;, 4ul, 16384ul&gt;::reset (2 samples, 0.29%)</title><rect x="20.2346%" y="405" width="0.2933%" height="15" fill="rgb(216,84,49)" fg:x="138" fg:w="2"/><text x="20.4846%" y="415.50"></text></g><g><title>cfree (2 samples, 0.29%)</title><rect x="20.2346%" y="389" width="0.2933%" height="15" fill="rgb(214,194,35)" fg:x="138" fg:w="2"/><text x="20.4846%" y="399.50"></text></g><g><title>[libc.so.6] (2 samples, 0.29%)</title><rect x="20.2346%" y="373" width="0.2933%" height="15" fill="rgb(249,28,3)" fg:x="138" fg:w="2"/><text x="20.4846%" y="383.50"></text></g><g><title>[libc.so.6] (2 samples, 0.29%)</title><rect x="20.2346%" y="357" width="0.2933%" height="15" fill="rgb(222,56,52)" fg:x="138" fg:w="2"/><text x="20.4846%" y="367.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="20.3812%" y="341" width="0.1466%" height="15" fill="rgb(245,217,50)" fg:x="139" fg:w="1"/><text x="20.6312%" y="351.50"></text></g><g><title>robin_hood::detail::Table&lt;false, 80ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, robin_hood::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, void&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~Table (4 samples, 0.59%)</title><rect x="20.2346%" y="453" width="0.5865%" height="15" fill="rgb(213,201,24)" fg:x="138" fg:w="4"/><text x="20.4846%" y="463.50"></text></g><g><title>robin_hood::detail::Table&lt;false, 80ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, robin_hood::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, void&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::destroy (2 samples, 0.29%)</title><rect x="20.5279%" y="437" width="0.2933%" height="15" fill="rgb(248,116,28)" fg:x="140" fg:w="2"/><text x="20.7779%" y="447.50"></text></g><g><title>robin_hood::detail::Table&lt;false, 80ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, robin_hood::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, void&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::destroy (2 samples, 0.29%)</title><rect x="20.5279%" y="421" width="0.2933%" height="15" fill="rgb(219,72,43)" fg:x="140" fg:w="2"/><text x="20.7779%" y="431.50"></text></g><g><title>robin_hood::detail::Table&lt;false, 80ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, robin_hood::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, void&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::Destroyer&lt;robin_hood::detail::Table&lt;false, 80ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, robin_hood::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, void&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, false&gt;::nodesDoNotDeallocate (2 samples, 0.29%)</title><rect x="20.5279%" y="405" width="0.2933%" height="15" fill="rgb(209,138,14)" fg:x="140" fg:w="2"/><text x="20.7779%" y="415.50"></text></g><g><title>robin_hood::detail::Table&lt;false, 80ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, robin_hood::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, void&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::DataNode&lt;robin_hood::detail::Table&lt;false, 80ul, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, robin_hood::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, void&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, false&gt;::destroyDoNotDeallocate (2 samples, 0.29%)</title><rect x="20.5279%" y="389" width="0.2933%" height="15" fill="rgb(222,18,33)" fg:x="140" fg:w="2"/><text x="20.7779%" y="399.50"></text></g><g><title>robin_hood::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::~pair (2 samples, 0.29%)</title><rect x="20.5279%" y="373" width="0.2933%" height="15" fill="rgb(213,199,7)" fg:x="140" fg:w="2"/><text x="20.7779%" y="383.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (2 samples, 0.29%)</title><rect x="20.5279%" y="357" width="0.2933%" height="15" fill="rgb(250,110,10)" fg:x="140" fg:w="2"/><text x="20.7779%" y="367.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (2 samples, 0.29%)</title><rect x="20.5279%" y="341" width="0.2933%" height="15" fill="rgb(248,123,6)" fg:x="140" fg:w="2"/><text x="20.7779%" y="351.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy (2 samples, 0.29%)</title><rect x="20.5279%" y="325" width="0.2933%" height="15" fill="rgb(206,91,31)" fg:x="140" fg:w="2"/><text x="20.7779%" y="335.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::deallocate (2 samples, 0.29%)</title><rect x="20.5279%" y="309" width="0.2933%" height="15" fill="rgb(211,154,13)" fg:x="140" fg:w="2"/><text x="20.7779%" y="319.50"></text></g><g><title>std::__new_allocator&lt;char&gt;::deallocate (2 samples, 0.29%)</title><rect x="20.5279%" y="293" width="0.2933%" height="15" fill="rgb(225,148,7)" fg:x="140" fg:w="2"/><text x="20.7779%" y="303.50"></text></g><g><title>cfree (2 samples, 0.29%)</title><rect x="20.5279%" y="277" width="0.2933%" height="15" fill="rgb(220,160,43)" fg:x="140" fg:w="2"/><text x="20.7779%" y="287.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="20.6745%" y="261" width="0.1466%" height="15" fill="rgb(213,52,39)" fg:x="141" fg:w="1"/><text x="20.9245%" y="271.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_drop_node (1 samples, 0.15%)</title><rect x="20.8211%" y="341" width="0.1466%" height="15" fill="rgb(243,137,7)" fg:x="142" fg:w="1"/><text x="21.0711%" y="351.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_destroy_node (1 samples, 0.15%)</title><rect x="20.8211%" y="325" width="0.1466%" height="15" fill="rgb(230,79,13)" fg:x="142" fg:w="1"/><text x="21.0711%" y="335.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.15%)</title><rect x="20.8211%" y="309" width="0.1466%" height="15" fill="rgb(247,105,23)" fg:x="142" fg:w="1"/><text x="21.0711%" y="319.50"></text></g><g><title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.15%)</title><rect x="20.8211%" y="293" width="0.1466%" height="15" fill="rgb(223,179,41)" fg:x="142" fg:w="1"/><text x="21.0711%" y="303.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.15%)</title><rect x="20.8211%" y="277" width="0.1466%" height="15" fill="rgb(218,9,34)" fg:x="142" fg:w="1"/><text x="21.0711%" y="287.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.15%)</title><rect x="20.8211%" y="261" width="0.1466%" height="15" fill="rgb(222,106,8)" fg:x="142" fg:w="1"/><text x="21.0711%" y="271.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.15%)</title><rect x="20.8211%" y="245" width="0.1466%" height="15" fill="rgb(211,220,0)" fg:x="142" fg:w="1"/><text x="21.0711%" y="255.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_local_data (1 samples, 0.15%)</title><rect x="20.8211%" y="229" width="0.1466%" height="15" fill="rgb(229,52,16)" fg:x="142" fg:w="1"/><text x="21.0711%" y="239.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (2 samples, 0.29%)</title><rect x="20.8211%" y="389" width="0.2933%" height="15" fill="rgb(212,155,18)" fg:x="142" fg:w="2"/><text x="21.0711%" y="399.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (2 samples, 0.29%)</title><rect x="20.8211%" y="373" width="0.2933%" height="15" fill="rgb(242,21,14)" fg:x="142" fg:w="2"/><text x="21.0711%" y="383.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (2 samples, 0.29%)</title><rect x="20.8211%" y="357" width="0.2933%" height="15" fill="rgb(222,19,48)" fg:x="142" fg:w="2"/><text x="21.0711%" y="367.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (1 samples, 0.15%)</title><rect x="20.9677%" y="341" width="0.1466%" height="15" fill="rgb(232,45,27)" fg:x="143" fg:w="1"/><text x="21.2177%" y="351.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (1 samples, 0.15%)</title><rect x="20.9677%" y="325" width="0.1466%" height="15" fill="rgb(249,103,42)" fg:x="143" fg:w="1"/><text x="21.2177%" y="335.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (1 samples, 0.15%)</title><rect x="20.9677%" y="309" width="0.1466%" height="15" fill="rgb(246,81,33)" fg:x="143" fg:w="1"/><text x="21.2177%" y="319.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (1 samples, 0.15%)</title><rect x="20.9677%" y="293" width="0.1466%" height="15" fill="rgb(252,33,42)" fg:x="143" fg:w="1"/><text x="21.2177%" y="303.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (1 samples, 0.15%)</title><rect x="20.9677%" y="277" width="0.1466%" height="15" fill="rgb(209,212,41)" fg:x="143" fg:w="1"/><text x="21.2177%" y="287.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (1 samples, 0.15%)</title><rect x="20.9677%" y="261" width="0.1466%" height="15" fill="rgb(207,154,6)" fg:x="143" fg:w="1"/><text x="21.2177%" y="271.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (1 samples, 0.15%)</title><rect x="20.9677%" y="245" width="0.1466%" height="15" fill="rgb(223,64,47)" fg:x="143" fg:w="1"/><text x="21.2177%" y="255.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (1 samples, 0.15%)</title><rect x="20.9677%" y="229" width="0.1466%" height="15" fill="rgb(211,161,38)" fg:x="143" fg:w="1"/><text x="21.2177%" y="239.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (1 samples, 0.15%)</title><rect x="20.9677%" y="213" width="0.1466%" height="15" fill="rgb(219,138,40)" fg:x="143" fg:w="1"/><text x="21.2177%" y="223.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_drop_node (1 samples, 0.15%)</title><rect x="20.9677%" y="197" width="0.1466%" height="15" fill="rgb(241,228,46)" fg:x="143" fg:w="1"/><text x="21.2177%" y="207.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_destroy_node (1 samples, 0.15%)</title><rect x="20.9677%" y="181" width="0.1466%" height="15" fill="rgb(223,209,38)" fg:x="143" fg:w="1"/><text x="21.2177%" y="191.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.15%)</title><rect x="20.9677%" y="165" width="0.1466%" height="15" fill="rgb(236,164,45)" fg:x="143" fg:w="1"/><text x="21.2177%" y="175.50"></text></g><g><title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.15%)</title><rect x="20.9677%" y="149" width="0.1466%" height="15" fill="rgb(231,15,5)" fg:x="143" fg:w="1"/><text x="21.2177%" y="159.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.15%)</title><rect x="20.9677%" y="133" width="0.1466%" height="15" fill="rgb(252,35,15)" fg:x="143" fg:w="1"/><text x="21.2177%" y="143.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.15%)</title><rect x="20.9677%" y="117" width="0.1466%" height="15" fill="rgb(248,181,18)" fg:x="143" fg:w="1"/><text x="21.2177%" y="127.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_destroy (1 samples, 0.15%)</title><rect x="20.9677%" y="101" width="0.1466%" height="15" fill="rgb(233,39,42)" fg:x="143" fg:w="1"/><text x="21.2177%" y="111.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;char&gt; &gt;::deallocate (1 samples, 0.15%)</title><rect x="20.9677%" y="85" width="0.1466%" height="15" fill="rgb(238,110,33)" fg:x="143" fg:w="1"/><text x="21.2177%" y="95.50"></text></g><g><title>std::__new_allocator&lt;char&gt;::deallocate (1 samples, 0.15%)</title><rect x="20.9677%" y="69" width="0.1466%" height="15" fill="rgb(233,195,10)" fg:x="143" fg:w="1"/><text x="21.2177%" y="79.50"></text></g><g><title>cfree (1 samples, 0.15%)</title><rect x="20.9677%" y="53" width="0.1466%" height="15" fill="rgb(254,105,3)" fg:x="143" fg:w="1"/><text x="21.2177%" y="63.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="20.9677%" y="37" width="0.1466%" height="15" fill="rgb(221,225,9)" fg:x="143" fg:w="1"/><text x="21.2177%" y="47.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (8 samples, 1.17%)</title><rect x="20.0880%" y="645" width="1.1730%" height="15" fill="rgb(224,227,45)" fg:x="137" fg:w="8"/><text x="20.3380%" y="655.50"></text></g><g><title>vkDestroyInstance (7 samples, 1.03%)</title><rect x="20.2346%" y="629" width="1.0264%" height="15" fill="rgb(229,198,43)" fg:x="138" fg:w="7"/><text x="20.4846%" y="639.50"></text></g><g><title>dlclose (7 samples, 1.03%)</title><rect x="20.2346%" y="613" width="1.0264%" height="15" fill="rgb(206,209,35)" fg:x="138" fg:w="7"/><text x="20.4846%" y="623.50"></text></g><g><title>[libc.so.6] (7 samples, 1.03%)</title><rect x="20.2346%" y="597" width="1.0264%" height="15" fill="rgb(245,195,53)" fg:x="138" fg:w="7"/><text x="20.4846%" y="607.50"></text></g><g><title>_dl_catch_error (7 samples, 1.03%)</title><rect x="20.2346%" y="581" width="1.0264%" height="15" fill="rgb(240,92,26)" fg:x="138" fg:w="7"/><text x="20.4846%" y="591.50"></text></g><g><title>_dl_catch_exception (7 samples, 1.03%)</title><rect x="20.2346%" y="565" width="1.0264%" height="15" fill="rgb(207,40,23)" fg:x="138" fg:w="7"/><text x="20.4846%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 1.03%)</title><rect x="20.2346%" y="549" width="1.0264%" height="15" fill="rgb(223,111,35)" fg:x="138" fg:w="7"/><text x="20.4846%" y="559.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 1.03%)</title><rect x="20.2346%" y="533" width="1.0264%" height="15" fill="rgb(229,147,28)" fg:x="138" fg:w="7"/><text x="20.4846%" y="543.50"></text></g><g><title>_dl_catch_exception (7 samples, 1.03%)</title><rect x="20.2346%" y="517" width="1.0264%" height="15" fill="rgb(211,29,28)" fg:x="138" fg:w="7"/><text x="20.4846%" y="527.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 1.03%)</title><rect x="20.2346%" y="501" width="1.0264%" height="15" fill="rgb(228,72,33)" fg:x="138" fg:w="7"/><text x="20.4846%" y="511.50"></text></g><g><title>__do_global_dtors_aux (7 samples, 1.03%)</title><rect x="20.2346%" y="485" width="1.0264%" height="15" fill="rgb(205,214,31)" fg:x="138" fg:w="7"/><text x="20.4846%" y="495.50"></text></g><g><title>__cxa_finalize (7 samples, 1.03%)</title><rect x="20.2346%" y="469" width="1.0264%" height="15" fill="rgb(224,111,15)" fg:x="138" fg:w="7"/><text x="20.4846%" y="479.50"></text></g><g><title>std::set&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~set (3 samples, 0.44%)</title><rect x="20.8211%" y="453" width="0.4399%" height="15" fill="rgb(253,21,26)" fg:x="142" fg:w="3"/><text x="21.0711%" y="463.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~_Rb_tree (3 samples, 0.44%)</title><rect x="20.8211%" y="437" width="0.4399%" height="15" fill="rgb(245,139,43)" fg:x="142" fg:w="3"/><text x="21.0711%" y="447.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (3 samples, 0.44%)</title><rect x="20.8211%" y="421" width="0.4399%" height="15" fill="rgb(252,170,7)" fg:x="142" fg:w="3"/><text x="21.0711%" y="431.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_erase (3 samples, 0.44%)</title><rect x="20.8211%" y="405" width="0.4399%" height="15" fill="rgb(231,118,14)" fg:x="142" fg:w="3"/><text x="21.0711%" y="415.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::_Identity&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_right (1 samples, 0.15%)</title><rect x="21.1144%" y="389" width="0.1466%" height="15" fill="rgb(238,83,0)" fg:x="144" fg:w="1"/><text x="21.3644%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.15%)</title><rect x="21.2610%" y="629" width="0.1466%" height="15" fill="rgb(221,39,39)" fg:x="145" fg:w="1"/><text x="21.5110%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;hell_renderer::vulkan::shader::sprite_shader::VulkanSpriteShader&gt; (1 samples, 0.15%)</title><rect x="21.2610%" y="613" width="0.1466%" height="15" fill="rgb(222,119,46)" fg:x="145" fg:w="1"/><text x="21.5110%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.15%)</title><rect x="21.2610%" y="597" width="0.1466%" height="15" fill="rgb(222,165,49)" fg:x="145" fg:w="1"/><text x="21.5110%" y="607.50"></text></g><g><title>vulkan_layer_chassis::FreeMemory (1 samples, 0.15%)</title><rect x="21.2610%" y="581" width="0.1466%" height="15" fill="rgb(219,113,52)" fg:x="145" fg:w="1"/><text x="21.5110%" y="591.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="21.2610%" y="565" width="0.1466%" height="15" fill="rgb(214,7,15)" fg:x="145" fg:w="1"/><text x="21.5110%" y="575.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="21.2610%" y="549" width="0.1466%" height="15" fill="rgb(235,32,4)" fg:x="145" fg:w="1"/><text x="21.5110%" y="559.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="21.2610%" y="533" width="0.1466%" height="15" fill="rgb(238,90,54)" fg:x="145" fg:w="1"/><text x="21.5110%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="21.8475%" y="421" width="0.1466%" height="15" fill="rgb(213,208,19)" fg:x="149" fg:w="1"/><text x="22.0975%" y="431.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (6 samples, 0.88%)</title><rect x="21.8475%" y="437" width="0.8798%" height="15" fill="rgb(233,156,4)" fg:x="149" fg:w="6"/><text x="22.0975%" y="447.50"></text></g><g><title>clock_gettime (5 samples, 0.73%)</title><rect x="21.9941%" y="421" width="0.7331%" height="15" fill="rgb(207,194,5)" fg:x="150" fg:w="5"/><text x="22.2441%" y="431.50"></text></g><g><title>__vdso_clock_gettime (5 samples, 0.73%)</title><rect x="21.9941%" y="405" width="0.7331%" height="15" fill="rgb(206,111,30)" fg:x="150" fg:w="5"/><text x="22.2441%" y="415.50"></text></g><g><title>[[vdso]] (5 samples, 0.73%)</title><rect x="21.9941%" y="389" width="0.7331%" height="15" fill="rgb(243,70,54)" fg:x="150" fg:w="5"/><text x="22.2441%" y="399.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (8 samples, 1.17%)</title><rect x="21.8475%" y="469" width="1.1730%" height="15" fill="rgb(242,28,8)" fg:x="149" fg:w="8"/><text x="22.0975%" y="479.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (8 samples, 1.17%)</title><rect x="21.8475%" y="453" width="1.1730%" height="15" fill="rgb(219,106,18)" fg:x="149" fg:w="8"/><text x="22.0975%" y="463.50"></text></g><g><title>clock_gettime (2 samples, 0.29%)</title><rect x="22.7273%" y="437" width="0.2933%" height="15" fill="rgb(244,222,10)" fg:x="155" fg:w="2"/><text x="22.9773%" y="447.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.29%)</title><rect x="22.7273%" y="421" width="0.2933%" height="15" fill="rgb(236,179,52)" fg:x="155" fg:w="2"/><text x="22.9773%" y="431.50"></text></g><g><title>[[vdso]] (2 samples, 0.29%)</title><rect x="22.7273%" y="405" width="0.2933%" height="15" fill="rgb(213,23,39)" fg:x="155" fg:w="2"/><text x="22.9773%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hell_winit::window::Window::main_loop::{{closure}}&gt; (22 samples, 3.23%)</title><rect x="20.0880%" y="661" width="3.2258%" height="15" fill="rgb(238,48,10)" fg:x="137" fg:w="22"/><text x="20.3380%" y="671.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;hell_renderer::hell_renderer::HellRenderer&gt; (14 samples, 2.05%)</title><rect x="21.2610%" y="645" width="2.0528%" height="15" fill="rgb(251,196,23)" fg:x="145" fg:w="14"/><text x="21.5110%" y="655.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hell_renderer::vulkan::swapchain::VulkanSwapchain&gt; (13 samples, 1.91%)</title><rect x="21.4076%" y="629" width="1.9062%" height="15" fill="rgb(250,152,24)" fg:x="146" fg:w="13"/><text x="21.6576%" y="639.50">c..</text></g><g><title>&lt;hell_renderer::vulkan::swapchain::VulkanSwapchain as core::ops::drop::Drop&gt;::drop (13 samples, 1.91%)</title><rect x="21.4076%" y="613" width="1.9062%" height="15" fill="rgb(209,150,17)" fg:x="146" fg:w="13"/><text x="21.6576%" y="623.50">&lt;..</text></g><g><title>vulkan_layer_chassis::DestroySwapchainKHR (13 samples, 1.91%)</title><rect x="21.4076%" y="597" width="1.9062%" height="15" fill="rgb(234,202,34)" fg:x="146" fg:w="13"/><text x="21.6576%" y="607.50">v..</text></g><g><title>DispatchDestroySwapchainKHR (13 samples, 1.91%)</title><rect x="21.4076%" y="581" width="1.9062%" height="15" fill="rgb(253,148,53)" fg:x="146" fg:w="13"/><text x="21.6576%" y="591.50">D..</text></g><g><title>[libGLX_nvidia.so.525.60.11] (13 samples, 1.91%)</title><rect x="21.4076%" y="565" width="1.9062%" height="15" fill="rgb(218,129,16)" fg:x="146" fg:w="13"/><text x="21.6576%" y="575.50">[..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (13 samples, 1.91%)</title><rect x="21.4076%" y="549" width="1.9062%" height="15" fill="rgb(216,85,19)" fg:x="146" fg:w="13"/><text x="21.6576%" y="559.50">[..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (13 samples, 1.91%)</title><rect x="21.4076%" y="533" width="1.9062%" height="15" fill="rgb(235,228,7)" fg:x="146" fg:w="13"/><text x="21.6576%" y="543.50">[..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (13 samples, 1.91%)</title><rect x="21.4076%" y="517" width="1.9062%" height="15" fill="rgb(245,175,0)" fg:x="146" fg:w="13"/><text x="21.6576%" y="527.50">[..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (13 samples, 1.91%)</title><rect x="21.4076%" y="501" width="1.9062%" height="15" fill="rgb(208,168,36)" fg:x="146" fg:w="13"/><text x="21.6576%" y="511.50">[..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (13 samples, 1.91%)</title><rect x="21.4076%" y="485" width="1.9062%" height="15" fill="rgb(246,171,24)" fg:x="146" fg:w="13"/><text x="21.6576%" y="495.50">[..</text></g><g><title>__sched_yield (2 samples, 0.29%)</title><rect x="23.0205%" y="469" width="0.2933%" height="15" fill="rgb(215,142,24)" fg:x="157" fg:w="2"/><text x="23.2705%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.29%)</title><rect x="23.0205%" y="453" width="0.2933%" height="15" fill="rgb(250,187,7)" fg:x="157" fg:w="2"/><text x="23.2705%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="23.1672%" y="437" width="0.1466%" height="15" fill="rgb(228,66,33)" fg:x="158" fg:w="1"/><text x="23.4172%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="23.1672%" y="421" width="0.1466%" height="15" fill="rgb(234,215,21)" fg:x="158" fg:w="1"/><text x="23.4172%" y="431.50"></text></g><g><title>[libX11.so.6.4.0] (1 samples, 0.15%)</title><rect x="23.6070%" y="629" width="0.1466%" height="15" fill="rgb(222,191,20)" fg:x="161" fg:w="1"/><text x="23.8570%" y="639.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="23.6070%" y="613" width="0.1466%" height="15" fill="rgb(245,79,54)" fg:x="161" fg:w="1"/><text x="23.8570%" y="623.50"></text></g><g><title>[libX11.so.6.4.0] (1 samples, 0.15%)</title><rect x="23.7537%" y="581" width="0.1466%" height="15" fill="rgb(240,10,37)" fg:x="162" fg:w="1"/><text x="24.0037%" y="591.50"></text></g><g><title>_XEventsQueued (2 samples, 0.29%)</title><rect x="23.7537%" y="629" width="0.2933%" height="15" fill="rgb(214,192,32)" fg:x="162" fg:w="2"/><text x="24.0037%" y="639.50"></text></g><g><title>[libX11.so.6.4.0] (2 samples, 0.29%)</title><rect x="23.7537%" y="613" width="0.2933%" height="15" fill="rgb(209,36,54)" fg:x="162" fg:w="2"/><text x="24.0037%" y="623.50"></text></g><g><title>[libX11.so.6.4.0] (2 samples, 0.29%)</title><rect x="23.7537%" y="597" width="0.2933%" height="15" fill="rgb(220,10,11)" fg:x="162" fg:w="2"/><text x="24.0037%" y="607.50"></text></g><g><title>[libxcb.so.1.1.0] (1 samples, 0.15%)</title><rect x="23.9003%" y="581" width="0.1466%" height="15" fill="rgb(221,106,17)" fg:x="163" fg:w="1"/><text x="24.1503%" y="591.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="23.9003%" y="565" width="0.1466%" height="15" fill="rgb(251,142,44)" fg:x="163" fg:w="1"/><text x="24.1503%" y="575.50"></text></g><g><title>XCheckIfEvent (5 samples, 0.73%)</title><rect x="23.4604%" y="645" width="0.7331%" height="15" fill="rgb(238,13,15)" fg:x="160" fg:w="5"/><text x="23.7104%" y="655.50"></text></g><g><title>_XFlush (1 samples, 0.15%)</title><rect x="24.0469%" y="629" width="0.1466%" height="15" fill="rgb(208,107,27)" fg:x="164" fg:w="1"/><text x="24.2969%" y="639.50"></text></g><g><title>_XSend (1 samples, 0.15%)</title><rect x="24.0469%" y="613" width="0.1466%" height="15" fill="rgb(205,136,37)" fg:x="164" fg:w="1"/><text x="24.2969%" y="623.50"></text></g><g><title>[libxcb.so.1.1.0] (1 samples, 0.15%)</title><rect x="24.1935%" y="629" width="0.1466%" height="15" fill="rgb(250,205,27)" fg:x="165" fg:w="1"/><text x="24.4435%" y="639.50"></text></g><g><title>recvmsg (1 samples, 0.15%)</title><rect x="24.1935%" y="613" width="0.1466%" height="15" fill="rgb(210,80,43)" fg:x="165" fg:w="1"/><text x="24.4435%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="24.1935%" y="597" width="0.1466%" height="15" fill="rgb(247,160,36)" fg:x="165" fg:w="1"/><text x="24.4435%" y="607.50"></text></g><g><title>hell_app::app::HellApp::advance_frame (1 samples, 0.15%)</title><rect x="24.3402%" y="629" width="0.1466%" height="15" fill="rgb(234,13,49)" fg:x="166" fg:w="1"/><text x="24.5902%" y="639.50"></text></g><g><title>hell_input::input::InputManager::reset_released_keys (1 samples, 0.15%)</title><rect x="24.3402%" y="613" width="0.1466%" height="15" fill="rgb(234,122,0)" fg:x="166" fg:w="1"/><text x="24.5902%" y="623.50"></text></g><g><title>&lt;nocoru::NocoruGame as hell_app::app::HellGame&gt;::update_game (2 samples, 0.29%)</title><rect x="24.4868%" y="597" width="0.2933%" height="15" fill="rgb(207,146,38)" fg:x="167" fg:w="2"/><text x="24.7368%" y="607.50"></text></g><g><title>nocoru::scene::NocoruScene::update_scene (2 samples, 0.29%)</title><rect x="24.4868%" y="581" width="0.2933%" height="15" fill="rgb(207,177,25)" fg:x="167" fg:w="2"/><text x="24.7368%" y="591.50"></text></g><g><title>hell_common::transform::Transform::translate_xy (1 samples, 0.15%)</title><rect x="24.6334%" y="565" width="0.1466%" height="15" fill="rgb(211,178,42)" fg:x="168" fg:w="1"/><text x="24.8834%" y="575.50"></text></g><g><title>DispatchBeginCommandBuffer (1 samples, 0.15%)</title><rect x="25.5132%" y="533" width="0.1466%" height="15" fill="rgb(230,69,54)" fg:x="174" fg:w="1"/><text x="25.7632%" y="543.50"></text></g><g><title>std::shared_ptr&lt;ObjTrackState&gt;::shared_ptr (1 samples, 0.15%)</title><rect x="25.6598%" y="517" width="0.1466%" height="15" fill="rgb(214,135,41)" fg:x="175" fg:w="1"/><text x="25.9098%" y="527.50"></text></g><g><title>std::__shared_ptr&lt;ObjTrackState, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr (1 samples, 0.15%)</title><rect x="25.6598%" y="501" width="0.1466%" height="15" fill="rgb(237,67,25)" fg:x="175" fg:w="1"/><text x="25.9098%" y="511.50"></text></g><g><title>ObjectLifetimes::PreCallValidateBeginCommandBuffer (2 samples, 0.29%)</title><rect x="25.6598%" y="533" width="0.2933%" height="15" fill="rgb(222,189,50)" fg:x="175" fg:w="2"/><text x="25.9098%" y="543.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, std::shared_ptr&lt;ObjTrackState&gt;, 6, robin_hood::hash&lt;unsigned long, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="25.8065%" y="517" width="0.1466%" height="15" fill="rgb(245,148,34)" fg:x="176" fg:w="1"/><text x="26.0565%" y="527.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="25.8065%" y="501" width="0.1466%" height="15" fill="rgb(222,29,6)" fg:x="176" fg:w="1"/><text x="26.0565%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="25.8065%" y="485" width="0.1466%" height="15" fill="rgb(221,189,43)" fg:x="176" fg:w="1"/><text x="26.0565%" y="495.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="25.8065%" y="469" width="0.1466%" height="15" fill="rgb(207,36,27)" fg:x="176" fg:w="1"/><text x="26.0565%" y="479.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="25.8065%" y="453" width="0.1466%" height="15" fill="rgb(217,90,24)" fg:x="176" fg:w="1"/><text x="26.0565%" y="463.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, std::shared_ptr&lt;ObjTrackState&gt;, 6, robin_hood::hash&lt;unsigned long, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="25.8065%" y="437" width="0.1466%" height="15" fill="rgb(224,66,35)" fg:x="176" fg:w="1"/><text x="26.0565%" y="447.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="25.8065%" y="421" width="0.1466%" height="15" fill="rgb(221,13,50)" fg:x="176" fg:w="1"/><text x="26.0565%" y="431.50"></text></g><g><title>ThreadSafety::FinishWriteObject (2 samples, 0.29%)</title><rect x="25.9531%" y="533" width="0.2933%" height="15" fill="rgb(236,68,49)" fg:x="177" fg:w="2"/><text x="26.2031%" y="543.50"></text></g><g><title>counter&lt;VkCommandBuffer_T*&gt;::FinishWrite (2 samples, 0.29%)</title><rect x="25.9531%" y="517" width="0.2933%" height="15" fill="rgb(229,146,28)" fg:x="177" fg:w="2"/><text x="26.2031%" y="527.50"></text></g><g><title>counter&lt;VkCommandBuffer_T*&gt;::FindObject (2 samples, 0.29%)</title><rect x="25.9531%" y="501" width="0.2933%" height="15" fill="rgb(225,31,38)" fg:x="177" fg:w="2"/><text x="26.2031%" y="511.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandBuffer_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt; &gt;::find (2 samples, 0.29%)</title><rect x="25.9531%" y="485" width="0.2933%" height="15" fill="rgb(250,208,3)" fg:x="177" fg:w="2"/><text x="26.2031%" y="495.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkCommandBuffer_T*, std::shared_ptr&lt;ObjectUseData&gt;, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt;, std::equal_to&lt;VkCommandBuffer_T*&gt; &gt;::find (2 samples, 0.29%)</title><rect x="25.9531%" y="469" width="0.2933%" height="15" fill="rgb(246,54,23)" fg:x="177" fg:w="2"/><text x="26.2031%" y="479.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkImageView_T*, std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, robin_hood::hash&lt;VkImageView_T*, void&gt;, std::equal_to&lt;VkImageView_T*&gt; &gt;::findIdx&lt;VkImageView_T*&gt; (2 samples, 0.29%)</title><rect x="25.9531%" y="453" width="0.2933%" height="15" fill="rgb(243,76,11)" fg:x="177" fg:w="2"/><text x="26.2031%" y="463.50"></text></g><g><title>ThreadSafety::PreCallRecordBeginCommandBuffer (1 samples, 0.15%)</title><rect x="26.2463%" y="533" width="0.1466%" height="15" fill="rgb(245,21,50)" fg:x="179" fg:w="1"/><text x="26.4963%" y="543.50"></text></g><g><title>ThreadSafety::StartWriteObject (1 samples, 0.15%)</title><rect x="26.2463%" y="517" width="0.1466%" height="15" fill="rgb(228,9,43)" fg:x="179" fg:w="1"/><text x="26.4963%" y="527.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandBuffer_T*, VkCommandPool_T*, 6, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="26.2463%" y="501" width="0.1466%" height="15" fill="rgb(208,100,47)" fg:x="179" fg:w="1"/><text x="26.4963%" y="511.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkCommandBuffer_T*, VkCommandPool_T*, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt;, std::equal_to&lt;VkCommandBuffer_T*&gt; &gt;::find (1 samples, 0.15%)</title><rect x="26.2463%" y="485" width="0.1466%" height="15" fill="rgb(232,26,8)" fg:x="179" fg:w="1"/><text x="26.4963%" y="495.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkCommandBuffer_T*, std::unique_ptr&lt;LoggingLabelState, std::default_delete&lt;LoggingLabelState&gt; &gt;, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt;, std::equal_to&lt;VkCommandBuffer_T*&gt; &gt;::findIdx&lt;VkCommandBuffer_T*&gt; (1 samples, 0.15%)</title><rect x="26.2463%" y="469" width="0.1466%" height="15" fill="rgb(216,166,38)" fg:x="179" fg:w="1"/><text x="26.4963%" y="479.50"></text></g><g><title>ValidationStateTracker::PreCallRecordBeginCommandBuffer (1 samples, 0.15%)</title><rect x="26.3930%" y="533" width="0.1466%" height="15" fill="rgb(251,202,51)" fg:x="180" fg:w="1"/><text x="26.6430%" y="543.50"></text></g><g><title>ValidationStateTracker::GetWrite&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt;, LockedSharedPtr&lt;CMD_BUFFER_STATE, std::unique_lock&lt;ReadWriteLock&gt; &gt; &gt; (1 samples, 0.15%)</title><rect x="26.3930%" y="517" width="0.1466%" height="15" fill="rgb(254,216,34)" fg:x="180" fg:w="1"/><text x="26.6430%" y="527.50"></text></g><g><title>CMD_BUFFER_STATE::WriteLock (1 samples, 0.15%)</title><rect x="26.3930%" y="501" width="0.1466%" height="15" fill="rgb(251,32,27)" fg:x="180" fg:w="1"/><text x="26.6430%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="26.3930%" y="485" width="0.1466%" height="15" fill="rgb(208,127,28)" fg:x="180" fg:w="1"/><text x="26.6430%" y="495.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="26.3930%" y="469" width="0.1466%" height="15" fill="rgb(224,137,22)" fg:x="180" fg:w="1"/><text x="26.6430%" y="479.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="26.3930%" y="453" width="0.1466%" height="15" fill="rgb(254,70,32)" fg:x="180" fg:w="1"/><text x="26.6430%" y="463.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="26.3930%" y="437" width="0.1466%" height="15" fill="rgb(229,75,37)" fg:x="180" fg:w="1"/><text x="26.6430%" y="447.50"></text></g><g><title>ValidationStateTracker::GetWrite&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt;, LockedSharedPtr&lt;CMD_BUFFER_STATE, std::unique_lock&lt;ReadWriteLock&gt; &gt; &gt; (1 samples, 0.15%)</title><rect x="26.3930%" y="421" width="0.1466%" height="15" fill="rgb(252,64,23)" fg:x="180" fg:w="1"/><text x="26.6430%" y="431.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="26.3930%" y="405" width="0.1466%" height="15" fill="rgb(232,162,48)" fg:x="180" fg:w="1"/><text x="26.6430%" y="415.50"></text></g><g><title>ash::device::Device::begin_command_buffer (12 samples, 1.76%)</title><rect x="25.5132%" y="565" width="1.7595%" height="15" fill="rgb(246,160,12)" fg:x="174" fg:w="12"/><text x="25.7632%" y="575.50"></text></g><g><title>vulkan_layer_chassis::BeginCommandBuffer (12 samples, 1.76%)</title><rect x="25.5132%" y="549" width="1.7595%" height="15" fill="rgb(247,166,0)" fg:x="174" fg:w="12"/><text x="25.7632%" y="559.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (5 samples, 0.73%)</title><rect x="26.5396%" y="533" width="0.7331%" height="15" fill="rgb(249,219,21)" fg:x="181" fg:w="5"/><text x="26.7896%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (4 samples, 0.59%)</title><rect x="26.6862%" y="517" width="0.5865%" height="15" fill="rgb(205,209,3)" fg:x="182" fg:w="4"/><text x="26.9362%" y="527.50"></text></g><g><title>ObjectLifetimes::PreCallValidateCmdBindDescriptorSets (2 samples, 0.29%)</title><rect x="27.4194%" y="533" width="0.2933%" height="15" fill="rgb(243,44,1)" fg:x="187" fg:w="2"/><text x="27.6694%" y="543.50"></text></g><g><title>ObjectLifetimes::ValidateObject&lt;VkPhysicalDevice_T*&gt; (1 samples, 0.15%)</title><rect x="27.5660%" y="517" width="0.1466%" height="15" fill="rgb(206,159,16)" fg:x="188" fg:w="1"/><text x="27.8160%" y="527.50"></text></g><g><title>ObjectLifetimes::CheckObjectValidity (1 samples, 0.15%)</title><rect x="27.5660%" y="501" width="0.1466%" height="15" fill="rgb(244,77,30)" fg:x="188" fg:w="1"/><text x="27.8160%" y="511.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, std::shared_ptr&lt;ObjTrackState&gt;, 6, robin_hood::hash&lt;unsigned long, void&gt; &gt;::contains (1 samples, 0.15%)</title><rect x="27.5660%" y="485" width="0.1466%" height="15" fill="rgb(218,69,12)" fg:x="188" fg:w="1"/><text x="27.8160%" y="495.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, unsigned long, std::shared_ptr&lt;ObjTrackState&gt;, robin_hood::hash&lt;unsigned long, void&gt;, std::equal_to&lt;unsigned long&gt; &gt;::count (1 samples, 0.15%)</title><rect x="27.5660%" y="469" width="0.1466%" height="15" fill="rgb(212,87,7)" fg:x="188" fg:w="1"/><text x="27.8160%" y="479.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, unsigned long, std::shared_ptr&lt;ObjTrackState&gt;, robin_hood::hash&lt;unsigned long, void&gt;, std::equal_to&lt;unsigned long&gt; &gt;::findIdx&lt;unsigned long&gt; (1 samples, 0.15%)</title><rect x="27.5660%" y="453" width="0.1466%" height="15" fill="rgb(245,114,25)" fg:x="188" fg:w="1"/><text x="27.8160%" y="463.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, unsigned long, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, robin_hood::hash&lt;unsigned long, void&gt;, std::equal_to&lt;unsigned long&gt; &gt;::keyToIdx&lt;unsigned long const&amp;&gt; (1 samples, 0.15%)</title><rect x="27.5660%" y="437" width="0.1466%" height="15" fill="rgb(210,61,42)" fg:x="188" fg:w="1"/><text x="27.8160%" y="447.50"></text></g><g><title>ThreadSafety::PreCallRecordCmdBindDescriptorSets (1 samples, 0.15%)</title><rect x="27.7126%" y="533" width="0.1466%" height="15" fill="rgb(211,52,33)" fg:x="189" fg:w="1"/><text x="27.9626%" y="543.50"></text></g><g><title>ThreadSafety::StartWriteObject (1 samples, 0.15%)</title><rect x="27.7126%" y="517" width="0.1466%" height="15" fill="rgb(234,58,33)" fg:x="189" fg:w="1"/><text x="27.9626%" y="527.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandBuffer_T*, VkCommandPool_T*, 6, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="27.7126%" y="501" width="0.1466%" height="15" fill="rgb(220,115,36)" fg:x="189" fg:w="1"/><text x="27.9626%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="27.7126%" y="485" width="0.1466%" height="15" fill="rgb(243,153,54)" fg:x="189" fg:w="1"/><text x="27.9626%" y="495.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="27.7126%" y="469" width="0.1466%" height="15" fill="rgb(251,47,18)" fg:x="189" fg:w="1"/><text x="27.9626%" y="479.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="27.7126%" y="453" width="0.1466%" height="15" fill="rgb(242,102,42)" fg:x="189" fg:w="1"/><text x="27.9626%" y="463.50"></text></g><g><title>ThreadSafety::PreCallRecordCmdBindDescriptorSets (1 samples, 0.15%)</title><rect x="27.7126%" y="437" width="0.1466%" height="15" fill="rgb(234,31,38)" fg:x="189" fg:w="1"/><text x="27.9626%" y="447.50"></text></g><g><title>CMD_BUFFER_STATE::UpdateLastBoundDescriptorSets (1 samples, 0.15%)</title><rect x="27.8592%" y="517" width="0.1466%" height="15" fill="rgb(221,117,51)" fg:x="190" fg:w="1"/><text x="28.1092%" y="527.50"></text></g><g><title>ValidationStateTracker::Get&lt;cvdescriptorset::DescriptorSet, state_object::Traits&lt;cvdescriptorset::DescriptorSet&gt; &gt; (1 samples, 0.15%)</title><rect x="27.8592%" y="501" width="0.1466%" height="15" fill="rgb(212,20,18)" fg:x="190" fg:w="1"/><text x="28.1092%" y="511.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkDescriptorSet_T*, std::shared_ptr&lt;cvdescriptorset::DescriptorSet&gt;, 2, robin_hood::hash&lt;VkDescriptorSet_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="27.8592%" y="485" width="0.1466%" height="15" fill="rgb(245,133,36)" fg:x="190" fg:w="1"/><text x="28.1092%" y="495.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="27.8592%" y="469" width="0.1466%" height="15" fill="rgb(212,6,19)" fg:x="190" fg:w="1"/><text x="28.1092%" y="479.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="27.8592%" y="453" width="0.1466%" height="15" fill="rgb(218,1,36)" fg:x="190" fg:w="1"/><text x="28.1092%" y="463.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="27.8592%" y="437" width="0.1466%" height="15" fill="rgb(246,84,54)" fg:x="190" fg:w="1"/><text x="28.1092%" y="447.50"></text></g><g><title>CMD_BUFFER_STATE::UpdateLastBoundDescriptorSets (1 samples, 0.15%)</title><rect x="27.8592%" y="421" width="0.1466%" height="15" fill="rgb(242,110,6)" fg:x="190" fg:w="1"/><text x="28.1092%" y="431.50"></text></g><g><title>pthread_mutex_unlock (1 samples, 0.15%)</title><rect x="27.8592%" y="405" width="0.1466%" height="15" fill="rgb(214,47,5)" fg:x="190" fg:w="1"/><text x="28.1092%" y="415.50"></text></g><g><title>ash::device::Device::cmd_bind_descriptor_sets (6 samples, 0.88%)</title><rect x="27.2727%" y="565" width="0.8798%" height="15" fill="rgb(218,159,25)" fg:x="186" fg:w="6"/><text x="27.5227%" y="575.50"></text></g><g><title>vulkan_layer_chassis::CmdBindDescriptorSets (6 samples, 0.88%)</title><rect x="27.2727%" y="549" width="0.8798%" height="15" fill="rgb(215,211,28)" fg:x="186" fg:w="6"/><text x="27.5227%" y="559.50"></text></g><g><title>ValidationStateTracker::PreCallRecordCmdBindDescriptorSets (2 samples, 0.29%)</title><rect x="27.8592%" y="533" width="0.2933%" height="15" fill="rgb(238,59,32)" fg:x="190" fg:w="2"/><text x="28.1092%" y="543.50"></text></g><g><title>std::shared_ptr&lt;PIPELINE_LAYOUT_STATE&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="28.0059%" y="517" width="0.1466%" height="15" fill="rgb(226,82,3)" fg:x="191" fg:w="1"/><text x="28.2559%" y="527.50"></text></g><g><title>std::__shared_ptr&lt;PIPELINE_LAYOUT_STATE, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="28.0059%" y="501" width="0.1466%" height="15" fill="rgb(240,164,32)" fg:x="191" fg:w="1"/><text x="28.2559%" y="511.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="28.0059%" y="485" width="0.1466%" height="15" fill="rgb(232,46,7)" fg:x="191" fg:w="1"/><text x="28.2559%" y="495.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="28.0059%" y="469" width="0.1466%" height="15" fill="rgb(229,129,53)" fg:x="191" fg:w="1"/><text x="28.2559%" y="479.50"></text></g><g><title>__gnu_cxx::__exchange_and_add_dispatch (1 samples, 0.15%)</title><rect x="28.0059%" y="453" width="0.1466%" height="15" fill="rgb(234,188,29)" fg:x="191" fg:w="1"/><text x="28.2559%" y="463.50"></text></g><g><title>CoreChecks::PreCallValidateEndCommandBuffer (1 samples, 0.15%)</title><rect x="28.2991%" y="533" width="0.1466%" height="15" fill="rgb(246,141,4)" fg:x="193" fg:w="1"/><text x="28.5491%" y="543.50"></text></g><g><title>CoreChecks::InsideRenderPass (1 samples, 0.15%)</title><rect x="28.2991%" y="517" width="0.1466%" height="15" fill="rgb(229,23,39)" fg:x="193" fg:w="1"/><text x="28.5491%" y="527.50"></text></g><g><title>DispatchEndCommandBuffer (3 samples, 0.44%)</title><rect x="28.4457%" y="533" width="0.4399%" height="15" fill="rgb(206,12,3)" fg:x="194" fg:w="3"/><text x="28.6957%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (3 samples, 0.44%)</title><rect x="28.4457%" y="517" width="0.4399%" height="15" fill="rgb(252,226,20)" fg:x="194" fg:w="3"/><text x="28.6957%" y="527.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="28.7390%" y="501" width="0.1466%" height="15" fill="rgb(216,123,35)" fg:x="196" fg:w="1"/><text x="28.9890%" y="511.50"></text></g><g><title>malloc (1 samples, 0.15%)</title><rect x="28.7390%" y="485" width="0.1466%" height="15" fill="rgb(212,68,40)" fg:x="196" fg:w="1"/><text x="28.9890%" y="495.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="28.7390%" y="469" width="0.1466%" height="15" fill="rgb(254,125,32)" fg:x="196" fg:w="1"/><text x="28.9890%" y="479.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="28.7390%" y="453" width="0.1466%" height="15" fill="rgb(253,97,22)" fg:x="196" fg:w="1"/><text x="28.9890%" y="463.50"></text></g><g><title>ash::device::Device::end_command_buffer (6 samples, 0.88%)</title><rect x="28.1525%" y="565" width="0.8798%" height="15" fill="rgb(241,101,14)" fg:x="192" fg:w="6"/><text x="28.4025%" y="575.50"></text></g><g><title>vulkan_layer_chassis::EndCommandBuffer (6 samples, 0.88%)</title><rect x="28.1525%" y="549" width="0.8798%" height="15" fill="rgb(238,103,29)" fg:x="192" fg:w="6"/><text x="28.4025%" y="559.50"></text></g><g><title>ThreadSafety::FinishWriteObject (1 samples, 0.15%)</title><rect x="28.8856%" y="533" width="0.1466%" height="15" fill="rgb(233,195,47)" fg:x="197" fg:w="1"/><text x="29.1356%" y="543.50"></text></g><g><title>ThreadSafety::FinishWriteObject (1 samples, 0.15%)</title><rect x="28.8856%" y="517" width="0.1466%" height="15" fill="rgb(246,218,30)" fg:x="197" fg:w="1"/><text x="29.1356%" y="527.50"></text></g><g><title>counter&lt;VkCommandPool_T*&gt;::FinishWrite (1 samples, 0.15%)</title><rect x="28.8856%" y="501" width="0.1466%" height="15" fill="rgb(219,145,47)" fg:x="197" fg:w="1"/><text x="29.1356%" y="511.50"></text></g><g><title>counter&lt;VkCommandPool_T*&gt;::FindObject (1 samples, 0.15%)</title><rect x="28.8856%" y="485" width="0.1466%" height="15" fill="rgb(243,12,26)" fg:x="197" fg:w="1"/><text x="29.1356%" y="495.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandPool_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkCommandPool_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="28.8856%" y="469" width="0.1466%" height="15" fill="rgb(214,87,16)" fg:x="197" fg:w="1"/><text x="29.1356%" y="479.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="28.8856%" y="453" width="0.1466%" height="15" fill="rgb(208,99,42)" fg:x="197" fg:w="1"/><text x="29.1356%" y="463.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="28.8856%" y="437" width="0.1466%" height="15" fill="rgb(253,99,2)" fg:x="197" fg:w="1"/><text x="29.1356%" y="447.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="28.8856%" y="421" width="0.1466%" height="15" fill="rgb(220,168,23)" fg:x="197" fg:w="1"/><text x="29.1356%" y="431.50"></text></g><g><title>__gthread_mutex_unlock (1 samples, 0.15%)</title><rect x="28.8856%" y="405" width="0.1466%" height="15" fill="rgb(242,38,24)" fg:x="197" fg:w="1"/><text x="29.1356%" y="415.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="28.8856%" y="389" width="0.1466%" height="15" fill="rgb(225,182,9)" fg:x="197" fg:w="1"/><text x="29.1356%" y="399.50"></text></g><g><title>CoreChecks::PreCallValidateResetCommandBuffer (1 samples, 0.15%)</title><rect x="29.0323%" y="517" width="0.1466%" height="15" fill="rgb(243,178,37)" fg:x="198" fg:w="1"/><text x="29.2823%" y="527.50"></text></g><g><title>LockedSharedPtr&lt;CMD_BUFFER_STATE, std::unique_lock&lt;ReadWriteLock&gt; &gt;::~LockedSharedPtr (1 samples, 0.15%)</title><rect x="29.0323%" y="501" width="0.1466%" height="15" fill="rgb(232,139,19)" fg:x="198" fg:w="1"/><text x="29.2823%" y="511.50"></text></g><g><title>std::shared_ptr&lt;CMD_BUFFER_STATE&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="29.0323%" y="485" width="0.1466%" height="15" fill="rgb(225,201,24)" fg:x="198" fg:w="1"/><text x="29.2823%" y="495.50"></text></g><g><title>std::__shared_ptr&lt;CMD_BUFFER_STATE, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="29.0323%" y="469" width="0.1466%" height="15" fill="rgb(221,47,46)" fg:x="198" fg:w="1"/><text x="29.2823%" y="479.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="29.0323%" y="453" width="0.1466%" height="15" fill="rgb(249,23,13)" fg:x="198" fg:w="1"/><text x="29.2823%" y="463.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="29.0323%" y="437" width="0.1466%" height="15" fill="rgb(219,9,5)" fg:x="198" fg:w="1"/><text x="29.2823%" y="447.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="29.7654%" y="437" width="0.1466%" height="15" fill="rgb(254,171,16)" fg:x="203" fg:w="1"/><text x="30.0154%" y="447.50"></text></g><g><title>malloc (1 samples, 0.15%)</title><rect x="29.7654%" y="421" width="0.1466%" height="15" fill="rgb(230,171,20)" fg:x="203" fg:w="1"/><text x="30.0154%" y="431.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (5 samples, 0.73%)</title><rect x="29.3255%" y="453" width="0.7331%" height="15" fill="rgb(210,71,41)" fg:x="200" fg:w="5"/><text x="29.5755%" y="463.50"></text></g><g><title>malloc (1 samples, 0.15%)</title><rect x="29.9120%" y="437" width="0.1466%" height="15" fill="rgb(206,173,20)" fg:x="204" fg:w="1"/><text x="30.1620%" y="447.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="29.9120%" y="421" width="0.1466%" height="15" fill="rgb(233,88,34)" fg:x="204" fg:w="1"/><text x="30.1620%" y="431.50"></text></g><g><title>DispatchResetCommandBuffer (7 samples, 1.03%)</title><rect x="29.1789%" y="517" width="1.0264%" height="15" fill="rgb(223,209,46)" fg:x="199" fg:w="7"/><text x="29.4289%" y="527.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (7 samples, 1.03%)</title><rect x="29.1789%" y="501" width="1.0264%" height="15" fill="rgb(250,43,18)" fg:x="199" fg:w="7"/><text x="29.4289%" y="511.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (7 samples, 1.03%)</title><rect x="29.1789%" y="485" width="1.0264%" height="15" fill="rgb(208,13,10)" fg:x="199" fg:w="7"/><text x="29.4289%" y="495.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (7 samples, 1.03%)</title><rect x="29.1789%" y="469" width="1.0264%" height="15" fill="rgb(212,200,36)" fg:x="199" fg:w="7"/><text x="29.4289%" y="479.50"></text></g><g><title>cfree (1 samples, 0.15%)</title><rect x="30.0587%" y="453" width="0.1466%" height="15" fill="rgb(225,90,30)" fg:x="205" fg:w="1"/><text x="30.3087%" y="463.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="30.0587%" y="437" width="0.1466%" height="15" fill="rgb(236,182,39)" fg:x="205" fg:w="1"/><text x="30.3087%" y="447.50"></text></g><g><title>ObjectLifetimes::CheckObjectValidity (1 samples, 0.15%)</title><rect x="30.2053%" y="517" width="0.1466%" height="15" fill="rgb(212,144,35)" fg:x="206" fg:w="1"/><text x="30.4553%" y="527.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, std::shared_ptr&lt;ObjTrackState&gt;, 6, robin_hood::hash&lt;unsigned long, void&gt; &gt;::contains (1 samples, 0.15%)</title><rect x="30.2053%" y="501" width="0.1466%" height="15" fill="rgb(228,63,44)" fg:x="206" fg:w="1"/><text x="30.4553%" y="511.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, unsigned long, std::shared_ptr&lt;ObjTrackState&gt;, robin_hood::hash&lt;unsigned long, void&gt;, std::equal_to&lt;unsigned long&gt; &gt;::count (1 samples, 0.15%)</title><rect x="30.2053%" y="485" width="0.1466%" height="15" fill="rgb(228,109,6)" fg:x="206" fg:w="1"/><text x="30.4553%" y="495.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, unsigned long, std::shared_ptr&lt;ObjTrackState&gt;, robin_hood::hash&lt;unsigned long, void&gt;, std::equal_to&lt;unsigned long&gt; &gt;::findIdx&lt;unsigned long&gt; (1 samples, 0.15%)</title><rect x="30.2053%" y="469" width="0.1466%" height="15" fill="rgb(238,117,24)" fg:x="206" fg:w="1"/><text x="30.4553%" y="479.50"></text></g><g><title>StatelessValidation::PreCallValidateResetCommandBuffer (1 samples, 0.15%)</title><rect x="30.3519%" y="517" width="0.1466%" height="15" fill="rgb(242,26,26)" fg:x="207" fg:w="1"/><text x="30.6019%" y="527.50"></text></g><g><title>ThreadSafety::FinishWriteObject (1 samples, 0.15%)</title><rect x="30.4985%" y="517" width="0.1466%" height="15" fill="rgb(221,92,48)" fg:x="208" fg:w="1"/><text x="30.7485%" y="527.50"></text></g><g><title>ThreadSafety::FinishWriteObject (1 samples, 0.15%)</title><rect x="30.4985%" y="501" width="0.1466%" height="15" fill="rgb(209,209,32)" fg:x="208" fg:w="1"/><text x="30.7485%" y="511.50"></text></g><g><title>counter&lt;VkCommandPool_T*&gt;::FinishWrite (1 samples, 0.15%)</title><rect x="30.4985%" y="485" width="0.1466%" height="15" fill="rgb(221,70,22)" fg:x="208" fg:w="1"/><text x="30.7485%" y="495.50"></text></g><g><title>counter&lt;VkCommandPool_T*&gt;::FindObject (1 samples, 0.15%)</title><rect x="30.4985%" y="469" width="0.1466%" height="15" fill="rgb(248,145,5)" fg:x="208" fg:w="1"/><text x="30.7485%" y="479.50"></text></g><g><title>ThreadSafety::PreCallRecordResetCommandBuffer (1 samples, 0.15%)</title><rect x="30.6452%" y="517" width="0.1466%" height="15" fill="rgb(226,116,26)" fg:x="209" fg:w="1"/><text x="30.8952%" y="527.50"></text></g><g><title>ThreadSafety::StartWriteObject (1 samples, 0.15%)</title><rect x="30.6452%" y="501" width="0.1466%" height="15" fill="rgb(244,5,17)" fg:x="209" fg:w="1"/><text x="30.8952%" y="511.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandBuffer_T*, VkCommandPool_T*, 6, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="30.6452%" y="485" width="0.1466%" height="15" fill="rgb(252,159,33)" fg:x="209" fg:w="1"/><text x="30.8952%" y="495.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="30.6452%" y="469" width="0.1466%" height="15" fill="rgb(206,71,0)" fg:x="209" fg:w="1"/><text x="30.8952%" y="479.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="30.6452%" y="453" width="0.1466%" height="15" fill="rgb(233,118,54)" fg:x="209" fg:w="1"/><text x="30.8952%" y="463.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="30.6452%" y="437" width="0.1466%" height="15" fill="rgb(234,83,48)" fg:x="209" fg:w="1"/><text x="30.8952%" y="447.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="30.6452%" y="421" width="0.1466%" height="15" fill="rgb(228,3,54)" fg:x="209" fg:w="1"/><text x="30.8952%" y="431.50"></text></g><g><title>ThreadSafety::PreCallRecordResetCommandBuffer (1 samples, 0.15%)</title><rect x="30.6452%" y="405" width="0.1466%" height="15" fill="rgb(226,155,13)" fg:x="209" fg:w="1"/><text x="30.8952%" y="415.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="30.6452%" y="389" width="0.1466%" height="15" fill="rgb(241,28,37)" fg:x="209" fg:w="1"/><text x="30.8952%" y="399.50"></text></g><g><title>[libc.so.6] (2 samples, 0.29%)</title><rect x="30.7918%" y="485" width="0.2933%" height="15" fill="rgb(233,93,10)" fg:x="210" fg:w="2"/><text x="31.0418%" y="495.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, IMAGE_STATE const*, std::shared_ptr&lt;image_layout_map::ImageSubresourceLayoutMap&gt;, robin_hood::hash&lt;IMAGE_STATE const*, void&gt;, std::equal_to&lt;IMAGE_STATE const*&gt; &gt;::clear (1 samples, 0.15%)</title><rect x="31.0850%" y="485" width="0.1466%" height="15" fill="rgb(225,113,19)" fg:x="212" fg:w="1"/><text x="31.3350%" y="495.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkCommandPool_T*, std::shared_ptr&lt;COMMAND_POOL_STATE&gt;, robin_hood::hash&lt;VkCommandPool_T*, void&gt;, std::equal_to&lt;VkCommandPool_T*&gt; &gt;::clear (1 samples, 0.15%)</title><rect x="31.0850%" y="469" width="0.1466%" height="15" fill="rgb(241,2,18)" fg:x="212" fg:w="1"/><text x="31.3350%" y="479.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, IMAGE_STATE const*, std::shared_ptr&lt;image_layout_map::ImageSubresourceLayoutMap&gt;, robin_hood::hash&lt;IMAGE_STATE const*, void&gt;, std::equal_to&lt;IMAGE_STATE const*&gt; &gt;::Destroyer&lt;robin_hood::detail::Table&lt;true, 80ul, IMAGE_STATE const*, std::shared_ptr&lt;image_layout_map::ImageSubresourceLayoutMap&gt;, robin_hood::hash&lt;IMAGE_STATE const*, void&gt;, std::equal_to&lt;IMAGE_STATE const*&gt; &gt;, false&gt;::nodesDoNotDeallocate (1 samples, 0.15%)</title><rect x="31.0850%" y="453" width="0.1466%" height="15" fill="rgb(228,207,21)" fg:x="212" fg:w="1"/><text x="31.3350%" y="463.50"></text></g><g><title>hell_renderer::vulkan::command_buffer::VulkanCommandPool::reset_cmd_buffer (16 samples, 2.35%)</title><rect x="29.0323%" y="565" width="2.3460%" height="15" fill="rgb(213,211,35)" fg:x="198" fg:w="16"/><text x="29.2823%" y="575.50">h..</text></g><g><title>ash::device::Device::reset_command_buffer (16 samples, 2.35%)</title><rect x="29.0323%" y="549" width="2.3460%" height="15" fill="rgb(209,83,10)" fg:x="198" fg:w="16"/><text x="29.2823%" y="559.50">a..</text></g><g><title>vulkan_layer_chassis::ResetCommandBuffer (16 samples, 2.35%)</title><rect x="29.0323%" y="533" width="2.3460%" height="15" fill="rgb(209,164,1)" fg:x="198" fg:w="16"/><text x="29.2823%" y="543.50">v..</text></g><g><title>ValidationStateTracker::PostCallRecordResetCommandBuffer (4 samples, 0.59%)</title><rect x="30.7918%" y="517" width="0.5865%" height="15" fill="rgb(213,184,43)" fg:x="210" fg:w="4"/><text x="31.0418%" y="527.50"></text></g><g><title>CMD_BUFFER_STATE::Reset (4 samples, 0.59%)</title><rect x="30.7918%" y="501" width="0.5865%" height="15" fill="rgb(231,61,34)" fg:x="210" fg:w="4"/><text x="31.0418%" y="511.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, std::shared_ptr&lt;BASE_NODE&gt;, void, robin_hood::hash&lt;std::shared_ptr&lt;BASE_NODE&gt;, void&gt;, std::equal_to&lt;std::shared_ptr&lt;BASE_NODE&gt; &gt; &gt;::clear (1 samples, 0.15%)</title><rect x="31.2317%" y="485" width="0.1466%" height="15" fill="rgb(235,75,3)" fg:x="213" fg:w="1"/><text x="31.4817%" y="495.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, std::shared_ptr&lt;DEVICE_MEMORY_STATE&gt;, void, robin_hood::hash&lt;std::shared_ptr&lt;DEVICE_MEMORY_STATE&gt;, void&gt;, std::equal_to&lt;std::shared_ptr&lt;DEVICE_MEMORY_STATE&gt; &gt; &gt;::clear (1 samples, 0.15%)</title><rect x="31.2317%" y="469" width="0.1466%" height="15" fill="rgb(220,106,47)" fg:x="213" fg:w="1"/><text x="31.4817%" y="479.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, std::shared_ptr&lt;DEVICE_MEMORY_STATE&gt;, void, robin_hood::hash&lt;std::shared_ptr&lt;DEVICE_MEMORY_STATE&gt;, void&gt;, std::equal_to&lt;std::shared_ptr&lt;DEVICE_MEMORY_STATE&gt; &gt; &gt;::Destroyer&lt;robin_hood::detail::Table&lt;true, 80ul, std::shared_ptr&lt;DEVICE_MEMORY_STATE&gt;, void, robin_hood::hash&lt;std::shared_ptr&lt;DEVICE_MEMORY_STATE&gt;, void&gt;, std::equal_to&lt;std::shared_ptr&lt;DEVICE_MEMORY_STATE&gt; &gt; &gt;, false&gt;::nodesDoNotDeallocate (1 samples, 0.15%)</title><rect x="31.2317%" y="453" width="0.1466%" height="15" fill="rgb(210,196,33)" fg:x="213" fg:w="1"/><text x="31.4817%" y="463.50"></text></g><g><title>DispatchQueuePresentKHR (3 samples, 0.44%)</title><rect x="31.5249%" y="517" width="0.4399%" height="15" fill="rgb(229,154,42)" fg:x="215" fg:w="3"/><text x="31.7749%" y="527.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (3 samples, 0.44%)</title><rect x="31.5249%" y="501" width="0.4399%" height="15" fill="rgb(228,114,26)" fg:x="215" fg:w="3"/><text x="31.7749%" y="511.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (3 samples, 0.44%)</title><rect x="31.5249%" y="485" width="0.4399%" height="15" fill="rgb(208,144,1)" fg:x="215" fg:w="3"/><text x="31.7749%" y="495.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (3 samples, 0.44%)</title><rect x="31.5249%" y="469" width="0.4399%" height="15" fill="rgb(239,112,37)" fg:x="215" fg:w="3"/><text x="31.7749%" y="479.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="31.6716%" y="453" width="0.2933%" height="15" fill="rgb(210,96,50)" fg:x="216" fg:w="2"/><text x="31.9216%" y="463.50"></text></g><g><title>std::vector&lt;ValidationObject*, std::allocator&lt;ValidationObject*&gt; &gt;::end (1 samples, 0.15%)</title><rect x="31.9648%" y="517" width="0.1466%" height="15" fill="rgb(222,178,2)" fg:x="218" fg:w="1"/><text x="32.2148%" y="527.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;ValidationObject**, std::vector&lt;ValidationObject*, std::allocator&lt;ValidationObject*&gt; &gt; &gt;::__normal_iterator (1 samples, 0.15%)</title><rect x="31.9648%" y="501" width="0.1466%" height="15" fill="rgb(226,74,18)" fg:x="218" fg:w="1"/><text x="32.2148%" y="511.50"></text></g><g><title>hell_renderer::vulkan::frame::VulkanFrameData::present_queue (6 samples, 0.88%)</title><rect x="31.3783%" y="565" width="0.8798%" height="15" fill="rgb(225,67,54)" fg:x="214" fg:w="6"/><text x="31.6283%" y="575.50"></text></g><g><title>ash::extensions::khr::swapchain::Swapchain::queue_present (6 samples, 0.88%)</title><rect x="31.3783%" y="549" width="0.8798%" height="15" fill="rgb(251,92,32)" fg:x="214" fg:w="6"/><text x="31.6283%" y="559.50"></text></g><g><title>vulkan_layer_chassis::QueuePresentKHR (6 samples, 0.88%)</title><rect x="31.3783%" y="533" width="0.8798%" height="15" fill="rgb(228,149,22)" fg:x="214" fg:w="6"/><text x="31.6283%" y="543.50"></text></g><g><title>std::vector&lt;std::vector&lt;ValidationObject*, std::allocator&lt;ValidationObject*&gt; &gt;, std::allocator&lt;std::vector&lt;ValidationObject*, std::allocator&lt;ValidationObject*&gt; &gt; &gt; &gt;::operator[] (1 samples, 0.15%)</title><rect x="32.1114%" y="517" width="0.1466%" height="15" fill="rgb(243,54,13)" fg:x="219" fg:w="1"/><text x="32.3614%" y="527.50"></text></g><g><title>std::vector&lt;std::vector&lt;ValidationObject*, std::allocator&lt;ValidationObject*&gt; &gt;, std::allocator&lt;std::vector&lt;ValidationObject*, std::allocator&lt;ValidationObject*&gt; &gt; &gt; &gt;::size (1 samples, 0.15%)</title><rect x="32.1114%" y="501" width="0.1466%" height="15" fill="rgb(243,180,28)" fg:x="219" fg:w="1"/><text x="32.3614%" y="511.50"></text></g><g><title>ValidationObject::Unwrap&lt;VkImage_T*&gt; (1 samples, 0.15%)</title><rect x="32.2581%" y="501" width="0.1466%" height="15" fill="rgb(208,167,24)" fg:x="220" fg:w="1"/><text x="32.5081%" y="511.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, unsigned long, 4, HashedUint64&gt;::find (1 samples, 0.15%)</title><rect x="32.2581%" y="485" width="0.1466%" height="15" fill="rgb(245,73,45)" fg:x="220" fg:w="1"/><text x="32.5081%" y="495.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="32.2581%" y="469" width="0.1466%" height="15" fill="rgb(237,203,48)" fg:x="220" fg:w="1"/><text x="32.5081%" y="479.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="32.2581%" y="453" width="0.1466%" height="15" fill="rgb(211,197,16)" fg:x="220" fg:w="1"/><text x="32.5081%" y="463.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="32.2581%" y="437" width="0.1466%" height="15" fill="rgb(243,99,51)" fg:x="220" fg:w="1"/><text x="32.5081%" y="447.50"></text></g><g><title>DispatchQueueSubmit (1 samples, 0.15%)</title><rect x="32.2581%" y="421" width="0.1466%" height="15" fill="rgb(215,123,29)" fg:x="220" fg:w="1"/><text x="32.5081%" y="431.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="32.2581%" y="405" width="0.1466%" height="15" fill="rgb(239,186,37)" fg:x="220" fg:w="1"/><text x="32.5081%" y="415.50"></text></g><g><title>hell_renderer::vulkan::frame::VulkanFrameData::submit_queue (2 samples, 0.29%)</title><rect x="32.2581%" y="565" width="0.2933%" height="15" fill="rgb(252,136,39)" fg:x="220" fg:w="2"/><text x="32.5081%" y="575.50"></text></g><g><title>ash::device::Device::queue_submit (2 samples, 0.29%)</title><rect x="32.2581%" y="549" width="0.2933%" height="15" fill="rgb(223,213,32)" fg:x="220" fg:w="2"/><text x="32.5081%" y="559.50"></text></g><g><title>vulkan_layer_chassis::QueueSubmit (2 samples, 0.29%)</title><rect x="32.2581%" y="533" width="0.2933%" height="15" fill="rgb(233,115,5)" fg:x="220" fg:w="2"/><text x="32.5081%" y="543.50"></text></g><g><title>DispatchQueueSubmit (2 samples, 0.29%)</title><rect x="32.2581%" y="517" width="0.2933%" height="15" fill="rgb(207,226,44)" fg:x="220" fg:w="2"/><text x="32.5081%" y="527.50"></text></g><g><title>safe_VkSubmitInfo::initialize (1 samples, 0.15%)</title><rect x="32.4047%" y="501" width="0.1466%" height="15" fill="rgb(208,126,0)" fg:x="221" fg:w="1"/><text x="32.6547%" y="511.50"></text></g><g><title>hell_renderer::vulkan::frame::VulkanFrameData::wait_for_in_flight (3 samples, 0.44%)</title><rect x="32.5513%" y="565" width="0.4399%" height="15" fill="rgb(244,66,21)" fg:x="222" fg:w="3"/><text x="32.8013%" y="575.50"></text></g><g><title>ash::device::Device::wait_for_fences (3 samples, 0.44%)</title><rect x="32.5513%" y="549" width="0.4399%" height="15" fill="rgb(222,97,12)" fg:x="222" fg:w="3"/><text x="32.8013%" y="559.50"></text></g><g><title>vulkan_layer_chassis::WaitForFences (2 samples, 0.29%)</title><rect x="32.6979%" y="533" width="0.2933%" height="15" fill="rgb(219,213,19)" fg:x="223" fg:w="2"/><text x="32.9479%" y="543.50"></text></g><g><title>StatelessValidation::PreCallValidateWaitForFences (1 samples, 0.15%)</title><rect x="32.8446%" y="517" width="0.1466%" height="15" fill="rgb(252,169,30)" fg:x="224" fg:w="1"/><text x="33.0946%" y="527.50"></text></g><g><title>ValidationObject::Unwrap&lt;VkImage_T*&gt; (1 samples, 0.15%)</title><rect x="33.1378%" y="501" width="0.1466%" height="15" fill="rgb(206,32,51)" fg:x="226" fg:w="1"/><text x="33.3878%" y="511.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, unsigned long, 4, HashedUint64&gt;::find (1 samples, 0.15%)</title><rect x="33.1378%" y="485" width="0.1466%" height="15" fill="rgb(250,172,42)" fg:x="226" fg:w="1"/><text x="33.3878%" y="495.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="33.1378%" y="469" width="0.1466%" height="15" fill="rgb(209,34,43)" fg:x="226" fg:w="1"/><text x="33.3878%" y="479.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="33.1378%" y="453" width="0.1466%" height="15" fill="rgb(223,11,35)" fg:x="226" fg:w="1"/><text x="33.3878%" y="463.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="33.1378%" y="437" width="0.1466%" height="15" fill="rgb(251,219,26)" fg:x="226" fg:w="1"/><text x="33.3878%" y="447.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="33.1378%" y="421" width="0.1466%" height="15" fill="rgb(231,119,3)" fg:x="226" fg:w="1"/><text x="33.3878%" y="431.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, unsigned long, 4, HashedUint64&gt;::find (1 samples, 0.15%)</title><rect x="33.1378%" y="405" width="0.1466%" height="15" fill="rgb(216,97,11)" fg:x="226" fg:w="1"/><text x="33.3878%" y="415.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="33.1378%" y="389" width="0.1466%" height="15" fill="rgb(223,59,9)" fg:x="226" fg:w="1"/><text x="33.3878%" y="399.50"></text></g><g><title>DispatchAcquireNextImageKHR (2 samples, 0.29%)</title><rect x="33.1378%" y="517" width="0.2933%" height="15" fill="rgb(233,93,31)" fg:x="226" fg:w="2"/><text x="33.3878%" y="527.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (1 samples, 0.15%)</title><rect x="33.2845%" y="501" width="0.1466%" height="15" fill="rgb(239,81,33)" fg:x="227" fg:w="1"/><text x="33.5345%" y="511.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="33.2845%" y="485" width="0.1466%" height="15" fill="rgb(213,120,34)" fg:x="227" fg:w="1"/><text x="33.5345%" y="495.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="33.2845%" y="469" width="0.1466%" height="15" fill="rgb(243,49,53)" fg:x="227" fg:w="1"/><text x="33.5345%" y="479.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="33.2845%" y="453" width="0.1466%" height="15" fill="rgb(247,216,33)" fg:x="227" fg:w="1"/><text x="33.5345%" y="463.50"></text></g><g><title>ObjectLifetimes::PreCallValidateAcquireNextImageKHR (1 samples, 0.15%)</title><rect x="33.4311%" y="517" width="0.1466%" height="15" fill="rgb(226,26,14)" fg:x="228" fg:w="1"/><text x="33.6811%" y="527.50"></text></g><g><title>ObjectLifetimes::ValidateObject&lt;VkDevice_T*&gt; (1 samples, 0.15%)</title><rect x="33.4311%" y="501" width="0.1466%" height="15" fill="rgb(215,49,53)" fg:x="228" fg:w="1"/><text x="33.6811%" y="511.50"></text></g><g><title>ObjectLifetimes::ValidateObject&lt;VkPhysicalDevice_T*&gt; (1 samples, 0.15%)</title><rect x="33.4311%" y="485" width="0.1466%" height="15" fill="rgb(245,162,40)" fg:x="228" fg:w="1"/><text x="33.6811%" y="495.50"></text></g><g><title>ObjectLifetimes::ValidateDeviceObject (1 samples, 0.15%)</title><rect x="33.4311%" y="469" width="0.1466%" height="15" fill="rgb(229,68,17)" fg:x="228" fg:w="1"/><text x="33.6811%" y="479.50"></text></g><g><title>ObjectLifetimes::ReadLock (1 samples, 0.15%)</title><rect x="33.5777%" y="517" width="0.1466%" height="15" fill="rgb(213,182,10)" fg:x="229" fg:w="1"/><text x="33.8277%" y="527.50"></text></g><g><title>StatelessValidation::PreCallValidateAcquireNextImageKHR (1 samples, 0.15%)</title><rect x="33.7243%" y="517" width="0.1466%" height="15" fill="rgb(245,125,30)" fg:x="230" fg:w="1"/><text x="33.9743%" y="527.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkDevice_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkDevice_T*, void&gt; &gt;::FindResult::~FindResult (1 samples, 0.15%)</title><rect x="33.8710%" y="453" width="0.1466%" height="15" fill="rgb(232,202,2)" fg:x="231" fg:w="1"/><text x="34.1210%" y="463.50"></text></g><g><title>std::pair&lt;bool, std::shared_ptr&lt;ObjectUseData&gt; &gt;::~pair (1 samples, 0.15%)</title><rect x="33.8710%" y="437" width="0.1466%" height="15" fill="rgb(237,140,51)" fg:x="231" fg:w="1"/><text x="34.1210%" y="447.50"></text></g><g><title>std::shared_ptr&lt;ObjectUseData&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="33.8710%" y="421" width="0.1466%" height="15" fill="rgb(236,157,25)" fg:x="231" fg:w="1"/><text x="34.1210%" y="431.50"></text></g><g><title>std::__shared_ptr&lt;ObjectUseData, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="33.8710%" y="405" width="0.1466%" height="15" fill="rgb(219,209,0)" fg:x="231" fg:w="1"/><text x="34.1210%" y="415.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="33.8710%" y="389" width="0.1466%" height="15" fill="rgb(240,116,54)" fg:x="231" fg:w="1"/><text x="34.1210%" y="399.50"></text></g><g><title>ThreadSafety::PostCallRecordAcquireNextImageKHR (2 samples, 0.29%)</title><rect x="33.8710%" y="517" width="0.2933%" height="15" fill="rgb(216,10,36)" fg:x="231" fg:w="2"/><text x="34.1210%" y="527.50"></text></g><g><title>ThreadSafety::FinishReadObjectParentInstance (2 samples, 0.29%)</title><rect x="33.8710%" y="501" width="0.2933%" height="15" fill="rgb(222,72,44)" fg:x="231" fg:w="2"/><text x="34.1210%" y="511.50"></text></g><g><title>counter&lt;VkDevice_T*&gt;::FinishRead (2 samples, 0.29%)</title><rect x="33.8710%" y="485" width="0.2933%" height="15" fill="rgb(232,159,9)" fg:x="231" fg:w="2"/><text x="34.1210%" y="495.50"></text></g><g><title>counter&lt;VkDevice_T*&gt;::FindObject (2 samples, 0.29%)</title><rect x="33.8710%" y="469" width="0.2933%" height="15" fill="rgb(210,39,32)" fg:x="231" fg:w="2"/><text x="34.1210%" y="479.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkDevice_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkDevice_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="34.0176%" y="453" width="0.1466%" height="15" fill="rgb(216,194,45)" fg:x="232" fg:w="1"/><text x="34.2676%" y="463.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="34.0176%" y="437" width="0.1466%" height="15" fill="rgb(218,18,35)" fg:x="232" fg:w="1"/><text x="34.2676%" y="447.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="34.0176%" y="421" width="0.1466%" height="15" fill="rgb(207,83,51)" fg:x="232" fg:w="1"/><text x="34.2676%" y="431.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="34.0176%" y="405" width="0.1466%" height="15" fill="rgb(225,63,43)" fg:x="232" fg:w="1"/><text x="34.2676%" y="415.50"></text></g><g><title>counter&lt;VkDevice_T*&gt;::FindObject (1 samples, 0.15%)</title><rect x="34.0176%" y="389" width="0.1466%" height="15" fill="rgb(207,57,36)" fg:x="232" fg:w="1"/><text x="34.2676%" y="399.50"></text></g><g><title>pthread_mutex_unlock (1 samples, 0.15%)</title><rect x="34.0176%" y="373" width="0.1466%" height="15" fill="rgb(216,99,33)" fg:x="232" fg:w="1"/><text x="34.2676%" y="383.50"></text></g><g><title>hell_renderer::vulkan::swapchain::VulkanSwapchain::aquire_next_image (9 samples, 1.32%)</title><rect x="32.9912%" y="565" width="1.3196%" height="15" fill="rgb(225,42,16)" fg:x="225" fg:w="9"/><text x="33.2412%" y="575.50"></text></g><g><title>ash::extensions::khr::swapchain::Swapchain::acquire_next_image (9 samples, 1.32%)</title><rect x="32.9912%" y="549" width="1.3196%" height="15" fill="rgb(220,201,45)" fg:x="225" fg:w="9"/><text x="33.2412%" y="559.50"></text></g><g><title>vulkan_layer_chassis::AcquireNextImageKHR (9 samples, 1.32%)</title><rect x="32.9912%" y="533" width="1.3196%" height="15" fill="rgb(225,33,4)" fg:x="225" fg:w="9"/><text x="33.2412%" y="543.50"></text></g><g><title>std::vector&lt;ValidationObject*, std::allocator&lt;ValidationObject*&gt; &gt;::begin (1 samples, 0.15%)</title><rect x="34.1642%" y="517" width="0.1466%" height="15" fill="rgb(224,33,50)" fg:x="233" fg:w="1"/><text x="34.4142%" y="527.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;ValidationObject**, std::vector&lt;ValidationObject*, std::allocator&lt;ValidationObject*&gt; &gt; &gt;::__normal_iterator (1 samples, 0.15%)</title><rect x="34.1642%" y="501" width="0.1466%" height="15" fill="rgb(246,198,51)" fg:x="233" fg:w="1"/><text x="34.4142%" y="511.50"></text></g><g><title>CoreChecks::PreCallRecordCmdBeginRenderPass (1 samples, 0.15%)</title><rect x="34.3109%" y="533" width="0.1466%" height="15" fill="rgb(205,22,4)" fg:x="234" fg:w="1"/><text x="34.5609%" y="543.50"></text></g><g><title>ValidationStateTracker::PreCallRecordCmdBeginRenderPass (1 samples, 0.15%)</title><rect x="34.3109%" y="517" width="0.1466%" height="15" fill="rgb(206,3,8)" fg:x="234" fg:w="1"/><text x="34.5609%" y="527.50"></text></g><g><title>LockedSharedPtr&lt;CMD_BUFFER_STATE, std::unique_lock&lt;ReadWriteLock&gt; &gt;::~LockedSharedPtr (1 samples, 0.15%)</title><rect x="34.3109%" y="501" width="0.1466%" height="15" fill="rgb(251,23,15)" fg:x="234" fg:w="1"/><text x="34.5609%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="34.3109%" y="485" width="0.1466%" height="15" fill="rgb(252,88,28)" fg:x="234" fg:w="1"/><text x="34.5609%" y="495.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="34.3109%" y="469" width="0.1466%" height="15" fill="rgb(212,127,14)" fg:x="234" fg:w="1"/><text x="34.5609%" y="479.50"></text></g><g><title>ValidationObject::Unwrap&lt;VkImage_T*&gt; (1 samples, 0.15%)</title><rect x="34.4575%" y="517" width="0.1466%" height="15" fill="rgb(247,145,37)" fg:x="235" fg:w="1"/><text x="34.7075%" y="527.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, unsigned long, 4, HashedUint64&gt;::find (1 samples, 0.15%)</title><rect x="34.4575%" y="501" width="0.1466%" height="15" fill="rgb(209,117,53)" fg:x="235" fg:w="1"/><text x="34.7075%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="34.4575%" y="485" width="0.1466%" height="15" fill="rgb(212,90,42)" fg:x="235" fg:w="1"/><text x="34.7075%" y="495.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="34.4575%" y="469" width="0.1466%" height="15" fill="rgb(218,164,37)" fg:x="235" fg:w="1"/><text x="34.7075%" y="479.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="34.4575%" y="453" width="0.1466%" height="15" fill="rgb(246,65,34)" fg:x="235" fg:w="1"/><text x="34.7075%" y="463.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, unsigned long, 4, HashedUint64&gt;::find (1 samples, 0.15%)</title><rect x="34.4575%" y="437" width="0.1466%" height="15" fill="rgb(231,100,33)" fg:x="235" fg:w="1"/><text x="34.7075%" y="447.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="34.4575%" y="421" width="0.1466%" height="15" fill="rgb(228,126,14)" fg:x="235" fg:w="1"/><text x="34.7075%" y="431.50"></text></g><g><title>hell_renderer::vulkan::vulkan_backend::VulkanBackend::begin_render_pass (5 samples, 0.73%)</title><rect x="34.3109%" y="565" width="0.7331%" height="15" fill="rgb(215,173,21)" fg:x="234" fg:w="5"/><text x="34.5609%" y="575.50"></text></g><g><title>vulkan_layer_chassis::CmdBeginRenderPass (5 samples, 0.73%)</title><rect x="34.3109%" y="549" width="0.7331%" height="15" fill="rgb(210,6,40)" fg:x="234" fg:w="5"/><text x="34.5609%" y="559.50"></text></g><g><title>DispatchCmdBeginRenderPass (4 samples, 0.59%)</title><rect x="34.4575%" y="533" width="0.5865%" height="15" fill="rgb(212,48,18)" fg:x="235" fg:w="4"/><text x="34.7075%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (3 samples, 0.44%)</title><rect x="34.6041%" y="517" width="0.4399%" height="15" fill="rgb(230,214,11)" fg:x="236" fg:w="3"/><text x="34.8541%" y="527.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="34.7507%" y="501" width="0.2933%" height="15" fill="rgb(254,105,39)" fg:x="237" fg:w="2"/><text x="35.0007%" y="511.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="34.8974%" y="485" width="0.1466%" height="15" fill="rgb(245,158,5)" fg:x="238" fg:w="1"/><text x="35.1474%" y="495.50"></text></g><g><title>CoreChecks::PreCallValidateCmdBindIndexBuffer (1 samples, 0.15%)</title><rect x="35.0440%" y="549" width="0.1466%" height="15" fill="rgb(249,208,11)" fg:x="239" fg:w="1"/><text x="35.2940%" y="559.50"></text></g><g><title>ValidationStateTracker::Get&lt;BUFFER_STATE, state_object::Traits&lt;BUFFER_STATE&gt; &gt; (1 samples, 0.15%)</title><rect x="35.0440%" y="533" width="0.1466%" height="15" fill="rgb(210,39,28)" fg:x="239" fg:w="1"/><text x="35.2940%" y="543.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkBuffer_T*, std::shared_ptr&lt;BUFFER_STATE&gt;, 2, robin_hood::hash&lt;VkBuffer_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="35.0440%" y="517" width="0.1466%" height="15" fill="rgb(211,56,53)" fg:x="239" fg:w="1"/><text x="35.2940%" y="527.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="35.0440%" y="501" width="0.1466%" height="15" fill="rgb(226,201,30)" fg:x="239" fg:w="1"/><text x="35.2940%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="35.0440%" y="485" width="0.1466%" height="15" fill="rgb(239,101,34)" fg:x="239" fg:w="1"/><text x="35.2940%" y="495.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="35.0440%" y="469" width="0.1466%" height="15" fill="rgb(226,209,5)" fg:x="239" fg:w="1"/><text x="35.2940%" y="479.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="35.0440%" y="453" width="0.1466%" height="15" fill="rgb(250,105,47)" fg:x="239" fg:w="1"/><text x="35.2940%" y="463.50"></text></g><g><title>ValidationStateTracker::Get&lt;BUFFER_STATE, state_object::Traits&lt;BUFFER_STATE&gt; &gt; (1 samples, 0.15%)</title><rect x="35.0440%" y="437" width="0.1466%" height="15" fill="rgb(230,72,3)" fg:x="239" fg:w="1"/><text x="35.2940%" y="447.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="35.0440%" y="421" width="0.1466%" height="15" fill="rgb(232,218,39)" fg:x="239" fg:w="1"/><text x="35.2940%" y="431.50"></text></g><g><title>StatelessValidation::PreCallValidateCmdBindIndexBuffer (1 samples, 0.15%)</title><rect x="35.1906%" y="549" width="0.1466%" height="15" fill="rgb(248,166,6)" fg:x="240" fg:w="1"/><text x="35.4406%" y="559.50"></text></g><g><title>StatelessValidation::manual_PreCallValidateCmdBindIndexBuffer (1 samples, 0.15%)</title><rect x="35.1906%" y="533" width="0.1466%" height="15" fill="rgb(247,89,20)" fg:x="240" fg:w="1"/><text x="35.4406%" y="543.50"></text></g><g><title>LvlFindInChain&lt;VkPhysicalDeviceIndexTypeUint8FeaturesEXT&gt; (1 samples, 0.15%)</title><rect x="35.1906%" y="517" width="0.1466%" height="15" fill="rgb(248,130,54)" fg:x="240" fg:w="1"/><text x="35.4406%" y="527.50"></text></g><g><title>ValidationStateTracker::PreCallRecordCmdBindIndexBuffer (1 samples, 0.15%)</title><rect x="35.3372%" y="549" width="0.1466%" height="15" fill="rgb(234,196,4)" fg:x="241" fg:w="1"/><text x="35.5872%" y="559.50"></text></g><g><title>vulkan_layer_chassis::CmdBindIndexBuffer (4 samples, 0.59%)</title><rect x="35.0440%" y="565" width="0.5865%" height="15" fill="rgb(250,143,31)" fg:x="239" fg:w="4"/><text x="35.2940%" y="575.50"></text></g><g><title>std::vector&lt;ValidationObject*, std::allocator&lt;ValidationObject*&gt; &gt;::begin (1 samples, 0.15%)</title><rect x="35.4839%" y="549" width="0.1466%" height="15" fill="rgb(211,110,34)" fg:x="242" fg:w="1"/><text x="35.7339%" y="559.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;ValidationObject**, std::vector&lt;ValidationObject*, std::allocator&lt;ValidationObject*&gt; &gt; &gt;::__normal_iterator (1 samples, 0.15%)</title><rect x="35.4839%" y="533" width="0.1466%" height="15" fill="rgb(215,124,48)" fg:x="242" fg:w="1"/><text x="35.7339%" y="543.50"></text></g><g><title>CoreChecks::PreCallValidateCmdBindPipeline (1 samples, 0.15%)</title><rect x="35.7771%" y="549" width="0.1466%" height="15" fill="rgb(216,46,13)" fg:x="244" fg:w="1"/><text x="36.0271%" y="559.50"></text></g><g><title>ThreadSafety::PostCallRecordCmdBindPipeline (1 samples, 0.15%)</title><rect x="35.9238%" y="549" width="0.1466%" height="15" fill="rgb(205,184,25)" fg:x="245" fg:w="1"/><text x="36.1738%" y="559.50"></text></g><g><title>ThreadSafety::FinishWriteObject (1 samples, 0.15%)</title><rect x="35.9238%" y="533" width="0.1466%" height="15" fill="rgb(228,1,10)" fg:x="245" fg:w="1"/><text x="36.1738%" y="543.50"></text></g><g><title>counter&lt;VkCommandBuffer_T*&gt;::FinishWrite (1 samples, 0.15%)</title><rect x="35.9238%" y="517" width="0.1466%" height="15" fill="rgb(213,116,27)" fg:x="245" fg:w="1"/><text x="36.1738%" y="527.50"></text></g><g><title>counter&lt;VkCommandBuffer_T*&gt;::FindObject (1 samples, 0.15%)</title><rect x="35.9238%" y="501" width="0.1466%" height="15" fill="rgb(241,95,50)" fg:x="245" fg:w="1"/><text x="36.1738%" y="511.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandBuffer_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt; &gt;::FindResult::~FindResult (1 samples, 0.15%)</title><rect x="35.9238%" y="485" width="0.1466%" height="15" fill="rgb(238,48,32)" fg:x="245" fg:w="1"/><text x="36.1738%" y="495.50"></text></g><g><title>std::pair&lt;bool, std::shared_ptr&lt;ObjectUseData&gt; &gt;::~pair (1 samples, 0.15%)</title><rect x="35.9238%" y="469" width="0.1466%" height="15" fill="rgb(235,113,49)" fg:x="245" fg:w="1"/><text x="36.1738%" y="479.50"></text></g><g><title>std::shared_ptr&lt;ObjectUseData&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="35.9238%" y="453" width="0.1466%" height="15" fill="rgb(205,127,43)" fg:x="245" fg:w="1"/><text x="36.1738%" y="463.50"></text></g><g><title>std::__shared_ptr&lt;ObjectUseData, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="35.9238%" y="437" width="0.1466%" height="15" fill="rgb(250,162,2)" fg:x="245" fg:w="1"/><text x="36.1738%" y="447.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="35.9238%" y="421" width="0.1466%" height="15" fill="rgb(220,13,41)" fg:x="245" fg:w="1"/><text x="36.1738%" y="431.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="35.9238%" y="405" width="0.1466%" height="15" fill="rgb(249,221,25)" fg:x="245" fg:w="1"/><text x="36.1738%" y="415.50"></text></g><g><title>ValidationStateTracker::PreCallRecordCmdBindPipeline (3 samples, 0.44%)</title><rect x="36.0704%" y="549" width="0.4399%" height="15" fill="rgb(215,208,19)" fg:x="246" fg:w="3"/><text x="36.3204%" y="559.50"></text></g><g><title>ValidationStateTracker::Get&lt;PIPELINE_STATE, state_object::Traits&lt;PIPELINE_STATE&gt; &gt; (1 samples, 0.15%)</title><rect x="36.3636%" y="533" width="0.1466%" height="15" fill="rgb(236,175,2)" fg:x="248" fg:w="1"/><text x="36.6136%" y="543.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkPipeline_T*, std::shared_ptr&lt;PIPELINE_STATE&gt;, 2, robin_hood::hash&lt;VkPipeline_T*, void&gt; &gt;::FindResult::~FindResult (1 samples, 0.15%)</title><rect x="36.3636%" y="517" width="0.1466%" height="15" fill="rgb(241,52,2)" fg:x="248" fg:w="1"/><text x="36.6136%" y="527.50"></text></g><g><title>std::pair&lt;bool, std::shared_ptr&lt;PIPELINE_STATE&gt; &gt;::~pair (1 samples, 0.15%)</title><rect x="36.3636%" y="501" width="0.1466%" height="15" fill="rgb(248,140,14)" fg:x="248" fg:w="1"/><text x="36.6136%" y="511.50"></text></g><g><title>std::shared_ptr&lt;PIPELINE_STATE&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="36.3636%" y="485" width="0.1466%" height="15" fill="rgb(253,22,42)" fg:x="248" fg:w="1"/><text x="36.6136%" y="495.50"></text></g><g><title>std::__shared_ptr&lt;PIPELINE_STATE, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="36.3636%" y="469" width="0.1466%" height="15" fill="rgb(234,61,47)" fg:x="248" fg:w="1"/><text x="36.6136%" y="479.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="36.3636%" y="453" width="0.1466%" height="15" fill="rgb(208,226,15)" fg:x="248" fg:w="1"/><text x="36.6136%" y="463.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="36.3636%" y="437" width="0.1466%" height="15" fill="rgb(217,221,4)" fg:x="248" fg:w="1"/><text x="36.6136%" y="447.50"></text></g><g><title>vulkan_layer_chassis::CmdBindPipeline (8 samples, 1.17%)</title><rect x="35.6305%" y="565" width="1.1730%" height="15" fill="rgb(212,174,34)" fg:x="243" fg:w="8"/><text x="35.8805%" y="575.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="36.5103%" y="549" width="0.2933%" height="15" fill="rgb(253,83,4)" fg:x="249" fg:w="2"/><text x="36.7603%" y="559.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="36.5103%" y="533" width="0.2933%" height="15" fill="rgb(250,195,49)" fg:x="249" fg:w="2"/><text x="36.7603%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="36.5103%" y="517" width="0.2933%" height="15" fill="rgb(241,192,25)" fg:x="249" fg:w="2"/><text x="36.7603%" y="527.50"></text></g><g><title>DispatchCmdBindVertexBuffers (3 samples, 0.44%)</title><rect x="36.8035%" y="549" width="0.4399%" height="15" fill="rgb(208,124,10)" fg:x="251" fg:w="3"/><text x="37.0535%" y="559.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (3 samples, 0.44%)</title><rect x="36.8035%" y="533" width="0.4399%" height="15" fill="rgb(222,33,0)" fg:x="251" fg:w="3"/><text x="37.0535%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="36.9501%" y="517" width="0.2933%" height="15" fill="rgb(234,209,28)" fg:x="252" fg:w="2"/><text x="37.2001%" y="527.50"></text></g><g><title>ThreadSafety::PostCallRecordCmdBindVertexBuffers (1 samples, 0.15%)</title><rect x="37.2434%" y="549" width="0.1466%" height="15" fill="rgb(224,11,23)" fg:x="254" fg:w="1"/><text x="37.4934%" y="559.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkCommandBuffer_T*, VkCommandPool_T*, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt;, std::equal_to&lt;VkCommandBuffer_T*&gt; &gt;::find (1 samples, 0.15%)</title><rect x="37.3900%" y="501" width="0.1466%" height="15" fill="rgb(232,99,1)" fg:x="255" fg:w="1"/><text x="37.6400%" y="511.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkCommandBuffer_T*, std::unique_ptr&lt;LoggingLabelState, std::default_delete&lt;LoggingLabelState&gt; &gt;, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt;, std::equal_to&lt;VkCommandBuffer_T*&gt; &gt;::findIdx&lt;VkCommandBuffer_T*&gt; (1 samples, 0.15%)</title><rect x="37.3900%" y="485" width="0.1466%" height="15" fill="rgb(237,95,45)" fg:x="255" fg:w="1"/><text x="37.6400%" y="495.50"></text></g><g><title>vulkan_layer_chassis::CmdBindVertexBuffers (6 samples, 0.88%)</title><rect x="36.8035%" y="565" width="0.8798%" height="15" fill="rgb(208,109,11)" fg:x="251" fg:w="6"/><text x="37.0535%" y="575.50"></text></g><g><title>ThreadSafety::PreCallRecordCmdBindVertexBuffers (2 samples, 0.29%)</title><rect x="37.3900%" y="549" width="0.2933%" height="15" fill="rgb(216,190,48)" fg:x="255" fg:w="2"/><text x="37.6400%" y="559.50"></text></g><g><title>ThreadSafety::StartWriteObject (2 samples, 0.29%)</title><rect x="37.3900%" y="533" width="0.2933%" height="15" fill="rgb(251,171,36)" fg:x="255" fg:w="2"/><text x="37.6400%" y="543.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandBuffer_T*, VkCommandPool_T*, 6, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt; &gt;::find (2 samples, 0.29%)</title><rect x="37.3900%" y="517" width="0.2933%" height="15" fill="rgb(230,62,22)" fg:x="255" fg:w="2"/><text x="37.6400%" y="527.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandBuffer_T*, VkCommandPool_T*, 6, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt; &gt;::ConcurrentMapHashObject (1 samples, 0.15%)</title><rect x="37.5367%" y="501" width="0.1466%" height="15" fill="rgb(225,114,35)" fg:x="256" fg:w="1"/><text x="37.7867%" y="511.50"></text></g><g><title>CoreChecks::ValidateCmdDrawType (1 samples, 0.15%)</title><rect x="37.9765%" y="533" width="0.1466%" height="15" fill="rgb(215,118,42)" fg:x="259" fg:w="1"/><text x="38.2265%" y="543.50"></text></g><g><title>CoreChecks::ValidateCmdRayQueryState (1 samples, 0.15%)</title><rect x="37.9765%" y="517" width="0.1466%" height="15" fill="rgb(243,119,21)" fg:x="259" fg:w="1"/><text x="38.2265%" y="527.50"></text></g><g><title>LockedSharedPtr&lt;CMD_BUFFER_STATE, std::unique_lock&lt;ReadWriteLock&gt; &gt;::~LockedSharedPtr (1 samples, 0.15%)</title><rect x="38.1232%" y="533" width="0.1466%" height="15" fill="rgb(252,177,53)" fg:x="260" fg:w="1"/><text x="38.3732%" y="543.50"></text></g><g><title>std::shared_ptr&lt;CMD_BUFFER_STATE&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="38.1232%" y="517" width="0.1466%" height="15" fill="rgb(237,209,29)" fg:x="260" fg:w="1"/><text x="38.3732%" y="527.50"></text></g><g><title>std::__shared_ptr&lt;CMD_BUFFER_STATE, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="38.1232%" y="501" width="0.1466%" height="15" fill="rgb(212,65,23)" fg:x="260" fg:w="1"/><text x="38.3732%" y="511.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="38.1232%" y="485" width="0.1466%" height="15" fill="rgb(230,222,46)" fg:x="260" fg:w="1"/><text x="38.3732%" y="495.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="38.1232%" y="469" width="0.1466%" height="15" fill="rgb(215,135,32)" fg:x="260" fg:w="1"/><text x="38.3732%" y="479.50"></text></g><g><title>__gnu_cxx::__exchange_and_add_dispatch (1 samples, 0.15%)</title><rect x="38.1232%" y="453" width="0.1466%" height="15" fill="rgb(246,101,22)" fg:x="260" fg:w="1"/><text x="38.3732%" y="463.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandBuffer_T*, std::shared_ptr&lt;CMD_BUFFER_STATE&gt;, 2, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt; &gt;::FindResult::~FindResult (1 samples, 0.15%)</title><rect x="38.2698%" y="501" width="0.1466%" height="15" fill="rgb(206,107,13)" fg:x="261" fg:w="1"/><text x="38.5198%" y="511.50"></text></g><g><title>std::pair&lt;bool, std::shared_ptr&lt;CMD_BUFFER_STATE&gt; &gt;::~pair (1 samples, 0.15%)</title><rect x="38.2698%" y="485" width="0.1466%" height="15" fill="rgb(250,100,44)" fg:x="261" fg:w="1"/><text x="38.5198%" y="495.50"></text></g><g><title>std::shared_ptr&lt;CMD_BUFFER_STATE&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="38.2698%" y="469" width="0.1466%" height="15" fill="rgb(231,147,38)" fg:x="261" fg:w="1"/><text x="38.5198%" y="479.50"></text></g><g><title>std::__shared_ptr&lt;CMD_BUFFER_STATE, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="38.2698%" y="453" width="0.1466%" height="15" fill="rgb(229,8,40)" fg:x="261" fg:w="1"/><text x="38.5198%" y="463.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="38.2698%" y="437" width="0.1466%" height="15" fill="rgb(221,135,30)" fg:x="261" fg:w="1"/><text x="38.5198%" y="447.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="38.2698%" y="421" width="0.1466%" height="15" fill="rgb(249,193,18)" fg:x="261" fg:w="1"/><text x="38.5198%" y="431.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkCommandBuffer_T*, std::shared_ptr&lt;CMD_BUFFER_STATE&gt;, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt;, std::equal_to&lt;VkCommandBuffer_T*&gt; &gt;::find (1 samples, 0.15%)</title><rect x="38.4164%" y="485" width="0.1466%" height="15" fill="rgb(209,133,39)" fg:x="262" fg:w="1"/><text x="38.6664%" y="495.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkImageView_T*, std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, robin_hood::hash&lt;VkImageView_T*, void&gt;, std::equal_to&lt;VkImageView_T*&gt; &gt;::findIdx&lt;VkImageView_T*&gt; (1 samples, 0.15%)</title><rect x="38.4164%" y="469" width="0.1466%" height="15" fill="rgb(232,100,14)" fg:x="262" fg:w="1"/><text x="38.6664%" y="479.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkCommandBuffer_T*, std::unique_ptr&lt;LoggingLabelState, std::default_delete&lt;LoggingLabelState&gt; &gt;, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt;, std::equal_to&lt;VkCommandBuffer_T*&gt; &gt;::keyToIdx&lt;VkCommandBuffer_T* const&amp;&gt; (1 samples, 0.15%)</title><rect x="38.4164%" y="453" width="0.1466%" height="15" fill="rgb(224,185,1)" fg:x="262" fg:w="1"/><text x="38.6664%" y="463.50"></text></g><g><title>CoreChecks::PreCallValidateCmdDrawIndexed (5 samples, 0.73%)</title><rect x="37.9765%" y="549" width="0.7331%" height="15" fill="rgb(223,139,8)" fg:x="259" fg:w="5"/><text x="38.2265%" y="559.50"></text></g><g><title>ValidationStateTracker::GetRead&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt;, LockedSharedPtr&lt;CMD_BUFFER_STATE const, std::unique_lock&lt;ReadWriteLock&gt; &gt; &gt; (3 samples, 0.44%)</title><rect x="38.2698%" y="533" width="0.4399%" height="15" fill="rgb(232,213,38)" fg:x="261" fg:w="3"/><text x="38.5198%" y="543.50"></text></g><g><title>ValidationStateTracker::Get&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt; &gt; (3 samples, 0.44%)</title><rect x="38.2698%" y="517" width="0.4399%" height="15" fill="rgb(207,94,22)" fg:x="261" fg:w="3"/><text x="38.5198%" y="527.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandBuffer_T*, std::shared_ptr&lt;CMD_BUFFER_STATE&gt;, 2, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt; &gt;::find (2 samples, 0.29%)</title><rect x="38.4164%" y="501" width="0.2933%" height="15" fill="rgb(219,183,54)" fg:x="262" fg:w="2"/><text x="38.6664%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="38.5630%" y="485" width="0.1466%" height="15" fill="rgb(216,185,54)" fg:x="263" fg:w="1"/><text x="38.8130%" y="495.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="38.5630%" y="469" width="0.1466%" height="15" fill="rgb(254,217,39)" fg:x="263" fg:w="1"/><text x="38.8130%" y="479.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="38.5630%" y="453" width="0.1466%" height="15" fill="rgb(240,178,23)" fg:x="263" fg:w="1"/><text x="38.8130%" y="463.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="38.5630%" y="437" width="0.1466%" height="15" fill="rgb(218,11,47)" fg:x="263" fg:w="1"/><text x="38.8130%" y="447.50"></text></g><g><title>ValidationStateTracker::GetRead&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt;, LockedSharedPtr&lt;CMD_BUFFER_STATE const, std::unique_lock&lt;ReadWriteLock&gt; &gt; &gt; (1 samples, 0.15%)</title><rect x="38.5630%" y="421" width="0.1466%" height="15" fill="rgb(218,51,51)" fg:x="263" fg:w="1"/><text x="38.8130%" y="431.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="38.5630%" y="405" width="0.1466%" height="15" fill="rgb(238,126,27)" fg:x="263" fg:w="1"/><text x="38.8130%" y="415.50"></text></g><g><title>DispatchCmdDrawIndexed (2 samples, 0.29%)</title><rect x="38.7097%" y="549" width="0.2933%" height="15" fill="rgb(249,202,22)" fg:x="264" fg:w="2"/><text x="38.9597%" y="559.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="38.7097%" y="533" width="0.2933%" height="15" fill="rgb(254,195,49)" fg:x="264" fg:w="2"/><text x="38.9597%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="38.7097%" y="517" width="0.2933%" height="15" fill="rgb(208,123,14)" fg:x="264" fg:w="2"/><text x="38.9597%" y="527.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="38.8563%" y="501" width="0.1466%" height="15" fill="rgb(224,200,8)" fg:x="265" fg:w="1"/><text x="39.1063%" y="511.50"></text></g><g><title>ThreadSafety::FinishWriteObject (1 samples, 0.15%)</title><rect x="39.0029%" y="549" width="0.1466%" height="15" fill="rgb(217,61,36)" fg:x="266" fg:w="1"/><text x="39.2529%" y="559.50"></text></g><g><title>ThreadSafety::FinishWriteObject (1 samples, 0.15%)</title><rect x="39.0029%" y="533" width="0.1466%" height="15" fill="rgb(206,35,45)" fg:x="266" fg:w="1"/><text x="39.2529%" y="543.50"></text></g><g><title>counter&lt;VkCommandPool_T*&gt;::FinishWrite (1 samples, 0.15%)</title><rect x="39.0029%" y="517" width="0.1466%" height="15" fill="rgb(217,65,33)" fg:x="266" fg:w="1"/><text x="39.2529%" y="527.50"></text></g><g><title>counter&lt;VkCommandPool_T*&gt;::FindObject (1 samples, 0.15%)</title><rect x="39.0029%" y="501" width="0.1466%" height="15" fill="rgb(222,158,48)" fg:x="266" fg:w="1"/><text x="39.2529%" y="511.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandPool_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkCommandPool_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="39.0029%" y="485" width="0.1466%" height="15" fill="rgb(254,2,54)" fg:x="266" fg:w="1"/><text x="39.2529%" y="495.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="39.0029%" y="469" width="0.1466%" height="15" fill="rgb(250,143,38)" fg:x="266" fg:w="1"/><text x="39.2529%" y="479.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="39.0029%" y="453" width="0.1466%" height="15" fill="rgb(248,25,0)" fg:x="266" fg:w="1"/><text x="39.2529%" y="463.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="39.0029%" y="437" width="0.1466%" height="15" fill="rgb(206,152,27)" fg:x="266" fg:w="1"/><text x="39.2529%" y="447.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="39.0029%" y="421" width="0.1466%" height="15" fill="rgb(240,77,30)" fg:x="266" fg:w="1"/><text x="39.2529%" y="431.50"></text></g><g><title>__gthread_mutex_lock (1 samples, 0.15%)</title><rect x="39.0029%" y="405" width="0.1466%" height="15" fill="rgb(231,5,3)" fg:x="266" fg:w="1"/><text x="39.2529%" y="415.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="39.0029%" y="389" width="0.1466%" height="15" fill="rgb(207,226,32)" fg:x="266" fg:w="1"/><text x="39.2529%" y="399.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkCommandBuffer_T*, VkCommandPool_T*, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt;, std::equal_to&lt;VkCommandBuffer_T*&gt; &gt;::find (1 samples, 0.15%)</title><rect x="39.1496%" y="501" width="0.1466%" height="15" fill="rgb(222,207,47)" fg:x="267" fg:w="1"/><text x="39.3996%" y="511.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkCommandBuffer_T*, std::unique_ptr&lt;LoggingLabelState, std::default_delete&lt;LoggingLabelState&gt; &gt;, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt;, std::equal_to&lt;VkCommandBuffer_T*&gt; &gt;::findIdx&lt;VkCommandBuffer_T*&gt; (1 samples, 0.15%)</title><rect x="39.1496%" y="485" width="0.1466%" height="15" fill="rgb(229,115,45)" fg:x="267" fg:w="1"/><text x="39.3996%" y="495.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="39.2962%" y="501" width="0.1466%" height="15" fill="rgb(224,191,6)" fg:x="268" fg:w="1"/><text x="39.5462%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="39.2962%" y="485" width="0.1466%" height="15" fill="rgb(230,227,24)" fg:x="268" fg:w="1"/><text x="39.5462%" y="495.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="39.2962%" y="469" width="0.1466%" height="15" fill="rgb(228,80,19)" fg:x="268" fg:w="1"/><text x="39.5462%" y="479.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="39.2962%" y="453" width="0.1466%" height="15" fill="rgb(247,229,0)" fg:x="268" fg:w="1"/><text x="39.5462%" y="463.50"></text></g><g><title>ThreadSafety::PreCallRecordCmdDrawIndexed (1 samples, 0.15%)</title><rect x="39.2962%" y="437" width="0.1466%" height="15" fill="rgb(237,194,15)" fg:x="268" fg:w="1"/><text x="39.5462%" y="447.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="39.2962%" y="421" width="0.1466%" height="15" fill="rgb(219,203,20)" fg:x="268" fg:w="1"/><text x="39.5462%" y="431.50"></text></g><g><title>ThreadSafety::PreCallRecordCmdDrawIndexed (3 samples, 0.44%)</title><rect x="39.1496%" y="549" width="0.4399%" height="15" fill="rgb(234,128,8)" fg:x="267" fg:w="3"/><text x="39.3996%" y="559.50"></text></g><g><title>ThreadSafety::StartWriteObject (3 samples, 0.44%)</title><rect x="39.1496%" y="533" width="0.4399%" height="15" fill="rgb(248,202,8)" fg:x="267" fg:w="3"/><text x="39.3996%" y="543.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandBuffer_T*, VkCommandPool_T*, 6, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt; &gt;::find (3 samples, 0.44%)</title><rect x="39.1496%" y="517" width="0.4399%" height="15" fill="rgb(206,104,37)" fg:x="267" fg:w="3"/><text x="39.3996%" y="527.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="39.4428%" y="501" width="0.1466%" height="15" fill="rgb(223,8,27)" fg:x="269" fg:w="1"/><text x="39.6928%" y="511.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="39.4428%" y="485" width="0.1466%" height="15" fill="rgb(216,217,28)" fg:x="269" fg:w="1"/><text x="39.6928%" y="495.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="39.4428%" y="469" width="0.1466%" height="15" fill="rgb(249,199,1)" fg:x="269" fg:w="1"/><text x="39.6928%" y="479.50"></text></g><g><title>ThreadSafety::PreCallRecordCmdDrawIndexed (1 samples, 0.15%)</title><rect x="39.4428%" y="453" width="0.1466%" height="15" fill="rgb(240,85,17)" fg:x="269" fg:w="1"/><text x="39.6928%" y="463.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="39.4428%" y="437" width="0.1466%" height="15" fill="rgb(206,108,45)" fg:x="269" fg:w="1"/><text x="39.6928%" y="447.50"></text></g><g><title>CMD_BUFFER_STATE::WriteLock (1 samples, 0.15%)</title><rect x="39.5894%" y="517" width="0.1466%" height="15" fill="rgb(245,210,41)" fg:x="270" fg:w="1"/><text x="39.8394%" y="527.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="39.5894%" y="501" width="0.1466%" height="15" fill="rgb(206,13,37)" fg:x="270" fg:w="1"/><text x="39.8394%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="39.5894%" y="485" width="0.1466%" height="15" fill="rgb(250,61,18)" fg:x="270" fg:w="1"/><text x="39.8394%" y="495.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="39.5894%" y="469" width="0.1466%" height="15" fill="rgb(235,172,48)" fg:x="270" fg:w="1"/><text x="39.8394%" y="479.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="39.5894%" y="453" width="0.1466%" height="15" fill="rgb(249,201,17)" fg:x="270" fg:w="1"/><text x="39.8394%" y="463.50"></text></g><g><title>ValidationStateTracker::GetWrite&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt;, LockedSharedPtr&lt;CMD_BUFFER_STATE, std::unique_lock&lt;ReadWriteLock&gt; &gt; &gt; (1 samples, 0.15%)</title><rect x="39.5894%" y="437" width="0.1466%" height="15" fill="rgb(219,208,6)" fg:x="270" fg:w="1"/><text x="39.8394%" y="447.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="39.5894%" y="421" width="0.1466%" height="15" fill="rgb(248,31,23)" fg:x="270" fg:w="1"/><text x="39.8394%" y="431.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkCommandBuffer_T*, std::shared_ptr&lt;CMD_BUFFER_STATE&gt;, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt;, std::equal_to&lt;VkCommandBuffer_T*&gt; &gt;::find (1 samples, 0.15%)</title><rect x="39.7361%" y="485" width="0.1466%" height="15" fill="rgb(245,15,42)" fg:x="271" fg:w="1"/><text x="39.9861%" y="495.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkImageView_T*, std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, robin_hood::hash&lt;VkImageView_T*, void&gt;, std::equal_to&lt;VkImageView_T*&gt; &gt;::findIdx&lt;VkImageView_T*&gt; (1 samples, 0.15%)</title><rect x="39.7361%" y="469" width="0.1466%" height="15" fill="rgb(222,217,39)" fg:x="271" fg:w="1"/><text x="39.9861%" y="479.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkCommandBuffer_T*, std::unique_ptr&lt;LoggingLabelState, std::default_delete&lt;LoggingLabelState&gt; &gt;, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt;, std::equal_to&lt;VkCommandBuffer_T*&gt; &gt;::keyToIdx&lt;VkCommandBuffer_T* const&amp;&gt; (1 samples, 0.15%)</title><rect x="39.7361%" y="453" width="0.1466%" height="15" fill="rgb(210,219,27)" fg:x="271" fg:w="1"/><text x="39.9861%" y="463.50"></text></g><g><title>vulkan_layer_chassis::CmdDrawIndexed (16 samples, 2.35%)</title><rect x="37.6833%" y="565" width="2.3460%" height="15" fill="rgb(252,166,36)" fg:x="257" fg:w="16"/><text x="37.9333%" y="575.50">v..</text></g><g><title>ValidationStateTracker::PostCallRecordCmdDrawIndexed (3 samples, 0.44%)</title><rect x="39.5894%" y="549" width="0.4399%" height="15" fill="rgb(245,132,34)" fg:x="270" fg:w="3"/><text x="39.8394%" y="559.50"></text></g><g><title>ValidationStateTracker::GetWrite&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt;, LockedSharedPtr&lt;CMD_BUFFER_STATE, std::unique_lock&lt;ReadWriteLock&gt; &gt; &gt; (3 samples, 0.44%)</title><rect x="39.5894%" y="533" width="0.4399%" height="15" fill="rgb(236,54,3)" fg:x="270" fg:w="3"/><text x="39.8394%" y="543.50"></text></g><g><title>ValidationStateTracker::Get&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt; &gt; (2 samples, 0.29%)</title><rect x="39.7361%" y="517" width="0.2933%" height="15" fill="rgb(241,173,43)" fg:x="271" fg:w="2"/><text x="39.9861%" y="527.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandBuffer_T*, std::shared_ptr&lt;CMD_BUFFER_STATE&gt;, 2, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt; &gt;::find (2 samples, 0.29%)</title><rect x="39.7361%" y="501" width="0.2933%" height="15" fill="rgb(215,190,9)" fg:x="271" fg:w="2"/><text x="39.9861%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="39.8827%" y="485" width="0.1466%" height="15" fill="rgb(242,101,16)" fg:x="272" fg:w="1"/><text x="40.1327%" y="495.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="39.8827%" y="469" width="0.1466%" height="15" fill="rgb(223,190,21)" fg:x="272" fg:w="1"/><text x="40.1327%" y="479.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="39.8827%" y="453" width="0.1466%" height="15" fill="rgb(215,228,25)" fg:x="272" fg:w="1"/><text x="40.1327%" y="463.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="39.8827%" y="437" width="0.1466%" height="15" fill="rgb(225,36,22)" fg:x="272" fg:w="1"/><text x="40.1327%" y="447.50"></text></g><g><title>ValidationStateTracker::GetWrite&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt;, LockedSharedPtr&lt;CMD_BUFFER_STATE, std::unique_lock&lt;ReadWriteLock&gt; &gt; &gt; (1 samples, 0.15%)</title><rect x="39.8827%" y="421" width="0.1466%" height="15" fill="rgb(251,106,46)" fg:x="272" fg:w="1"/><text x="40.1327%" y="431.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="39.8827%" y="405" width="0.1466%" height="15" fill="rgb(208,90,1)" fg:x="272" fg:w="1"/><text x="40.1327%" y="415.50"></text></g><g><title>CoreChecks::RecordCmdEndRenderPassLayouts (1 samples, 0.15%)</title><rect x="40.0293%" y="533" width="0.1466%" height="15" fill="rgb(243,10,4)" fg:x="273" fg:w="1"/><text x="40.2793%" y="543.50"></text></g><g><title>ValidationStateTracker::GetWrite&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt;, LockedSharedPtr&lt;CMD_BUFFER_STATE, std::unique_lock&lt;ReadWriteLock&gt; &gt; &gt; (1 samples, 0.15%)</title><rect x="40.0293%" y="517" width="0.1466%" height="15" fill="rgb(212,137,27)" fg:x="273" fg:w="1"/><text x="40.2793%" y="527.50"></text></g><g><title>ValidationStateTracker::Get&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt; &gt; (1 samples, 0.15%)</title><rect x="40.0293%" y="501" width="0.1466%" height="15" fill="rgb(231,220,49)" fg:x="273" fg:w="1"/><text x="40.2793%" y="511.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandBuffer_T*, std::shared_ptr&lt;CMD_BUFFER_STATE&gt;, 2, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="40.0293%" y="485" width="0.1466%" height="15" fill="rgb(237,96,20)" fg:x="273" fg:w="1"/><text x="40.2793%" y="495.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkCommandBuffer_T*, std::shared_ptr&lt;CMD_BUFFER_STATE&gt;, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt;, std::equal_to&lt;VkCommandBuffer_T*&gt; &gt;::find (1 samples, 0.15%)</title><rect x="40.0293%" y="469" width="0.1466%" height="15" fill="rgb(239,229,30)" fg:x="273" fg:w="1"/><text x="40.2793%" y="479.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkImageView_T*, std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, robin_hood::hash&lt;VkImageView_T*, void&gt;, std::equal_to&lt;VkImageView_T*&gt; &gt;::findIdx&lt;VkImageView_T*&gt; (1 samples, 0.15%)</title><rect x="40.0293%" y="453" width="0.1466%" height="15" fill="rgb(219,65,33)" fg:x="273" fg:w="1"/><text x="40.2793%" y="463.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkCommandBuffer_T*, std::unique_ptr&lt;LoggingLabelState, std::default_delete&lt;LoggingLabelState&gt; &gt;, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt;, std::equal_to&lt;VkCommandBuffer_T*&gt; &gt;::keyToIdx&lt;VkCommandBuffer_T* const&amp;&gt; (1 samples, 0.15%)</title><rect x="40.0293%" y="437" width="0.1466%" height="15" fill="rgb(243,134,7)" fg:x="273" fg:w="1"/><text x="40.2793%" y="447.50"></text></g><g><title>CoreChecks::PostCallRecordCmdEndRenderPass (2 samples, 0.29%)</title><rect x="40.0293%" y="549" width="0.2933%" height="15" fill="rgb(216,177,54)" fg:x="273" fg:w="2"/><text x="40.2793%" y="559.50"></text></g><g><title>ValidationStateTracker::PostCallRecordCmdEndRenderPass (1 samples, 0.15%)</title><rect x="40.1760%" y="533" width="0.1466%" height="15" fill="rgb(211,160,20)" fg:x="274" fg:w="1"/><text x="40.4260%" y="543.50"></text></g><g><title>LockedSharedPtr&lt;CMD_BUFFER_STATE, std::unique_lock&lt;ReadWriteLock&gt; &gt;::~LockedSharedPtr (1 samples, 0.15%)</title><rect x="40.1760%" y="517" width="0.1466%" height="15" fill="rgb(239,85,39)" fg:x="274" fg:w="1"/><text x="40.4260%" y="527.50"></text></g><g><title>std::shared_ptr&lt;CMD_BUFFER_STATE&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="40.1760%" y="501" width="0.1466%" height="15" fill="rgb(232,125,22)" fg:x="274" fg:w="1"/><text x="40.4260%" y="511.50"></text></g><g><title>std::__shared_ptr&lt;CMD_BUFFER_STATE, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="40.1760%" y="485" width="0.1466%" height="15" fill="rgb(244,57,34)" fg:x="274" fg:w="1"/><text x="40.4260%" y="495.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="40.1760%" y="469" width="0.1466%" height="15" fill="rgb(214,203,32)" fg:x="274" fg:w="1"/><text x="40.4260%" y="479.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="40.1760%" y="453" width="0.1466%" height="15" fill="rgb(207,58,43)" fg:x="274" fg:w="1"/><text x="40.4260%" y="463.50"></text></g><g><title>__gnu_cxx::__exchange_and_add_dispatch (1 samples, 0.15%)</title><rect x="40.1760%" y="437" width="0.1466%" height="15" fill="rgb(215,193,15)" fg:x="274" fg:w="1"/><text x="40.4260%" y="447.50"></text></g><g><title>__gnu_cxx::__exchange_and_add (1 samples, 0.15%)</title><rect x="40.1760%" y="421" width="0.1466%" height="15" fill="rgb(232,15,44)" fg:x="274" fg:w="1"/><text x="40.4260%" y="431.50"></text></g><g><title>CoreChecks::ValidateCmdEndRenderPass (1 samples, 0.15%)</title><rect x="40.3226%" y="549" width="0.1466%" height="15" fill="rgb(212,3,48)" fg:x="275" fg:w="1"/><text x="40.5726%" y="559.50"></text></g><g><title>ValidationStateTracker::GetRead&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt;, LockedSharedPtr&lt;CMD_BUFFER_STATE const, std::unique_lock&lt;ReadWriteLock&gt; &gt; &gt; (1 samples, 0.15%)</title><rect x="40.3226%" y="533" width="0.1466%" height="15" fill="rgb(218,128,7)" fg:x="275" fg:w="1"/><text x="40.5726%" y="543.50"></text></g><g><title>ValidationStateTracker::Get&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt; &gt; (1 samples, 0.15%)</title><rect x="40.3226%" y="517" width="0.1466%" height="15" fill="rgb(226,216,39)" fg:x="275" fg:w="1"/><text x="40.5726%" y="527.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandBuffer_T*, std::shared_ptr&lt;CMD_BUFFER_STATE&gt;, 2, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="40.3226%" y="501" width="0.1466%" height="15" fill="rgb(243,47,51)" fg:x="275" fg:w="1"/><text x="40.5726%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="40.3226%" y="485" width="0.1466%" height="15" fill="rgb(241,183,40)" fg:x="275" fg:w="1"/><text x="40.5726%" y="495.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="40.3226%" y="469" width="0.1466%" height="15" fill="rgb(231,217,32)" fg:x="275" fg:w="1"/><text x="40.5726%" y="479.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="40.3226%" y="453" width="0.1466%" height="15" fill="rgb(229,61,38)" fg:x="275" fg:w="1"/><text x="40.5726%" y="463.50"></text></g><g><title>ValidationStateTracker::GetRead&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt;, LockedSharedPtr&lt;CMD_BUFFER_STATE const, std::unique_lock&lt;ReadWriteLock&gt; &gt; &gt; (1 samples, 0.15%)</title><rect x="40.3226%" y="437" width="0.1466%" height="15" fill="rgb(225,210,5)" fg:x="275" fg:w="1"/><text x="40.5726%" y="447.50"></text></g><g><title>pthread_mutex_unlock (1 samples, 0.15%)</title><rect x="40.3226%" y="421" width="0.1466%" height="15" fill="rgb(231,79,45)" fg:x="275" fg:w="1"/><text x="40.5726%" y="431.50"></text></g><g><title>ThreadSafety::FinishWriteObject (1 samples, 0.15%)</title><rect x="40.4692%" y="549" width="0.1466%" height="15" fill="rgb(224,100,7)" fg:x="276" fg:w="1"/><text x="40.7192%" y="559.50"></text></g><g><title>counter&lt;VkCommandBuffer_T*&gt;::FinishWrite (1 samples, 0.15%)</title><rect x="40.4692%" y="533" width="0.1466%" height="15" fill="rgb(241,198,18)" fg:x="276" fg:w="1"/><text x="40.7192%" y="543.50"></text></g><g><title>counter&lt;VkCommandBuffer_T*&gt;::FindObject (1 samples, 0.15%)</title><rect x="40.4692%" y="517" width="0.1466%" height="15" fill="rgb(252,97,53)" fg:x="276" fg:w="1"/><text x="40.7192%" y="527.50"></text></g><g><title>vulkan_layer_chassis::CmdEndRenderPass (5 samples, 0.73%)</title><rect x="40.0293%" y="565" width="0.7331%" height="15" fill="rgb(220,88,7)" fg:x="273" fg:w="5"/><text x="40.2793%" y="575.50"></text></g><g><title>ThreadSafety::PreCallRecordCmdEndRenderPass (1 samples, 0.15%)</title><rect x="40.6158%" y="549" width="0.1466%" height="15" fill="rgb(213,176,14)" fg:x="277" fg:w="1"/><text x="40.8658%" y="559.50"></text></g><g><title>ThreadSafety::StartWriteObject (1 samples, 0.15%)</title><rect x="40.6158%" y="533" width="0.1466%" height="15" fill="rgb(246,73,7)" fg:x="277" fg:w="1"/><text x="40.8658%" y="543.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandBuffer_T*, VkCommandPool_T*, 6, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="40.6158%" y="517" width="0.1466%" height="15" fill="rgb(245,64,36)" fg:x="277" fg:w="1"/><text x="40.8658%" y="527.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="40.6158%" y="501" width="0.1466%" height="15" fill="rgb(245,80,10)" fg:x="277" fg:w="1"/><text x="40.8658%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="40.6158%" y="485" width="0.1466%" height="15" fill="rgb(232,107,50)" fg:x="277" fg:w="1"/><text x="40.8658%" y="495.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="40.6158%" y="469" width="0.1466%" height="15" fill="rgb(253,3,0)" fg:x="277" fg:w="1"/><text x="40.8658%" y="479.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="40.6158%" y="453" width="0.1466%" height="15" fill="rgb(212,99,53)" fg:x="277" fg:w="1"/><text x="40.8658%" y="463.50"></text></g><g><title>ThreadSafety::PreCallRecordCmdEndRenderPass (1 samples, 0.15%)</title><rect x="40.6158%" y="437" width="0.1466%" height="15" fill="rgb(249,111,54)" fg:x="277" fg:w="1"/><text x="40.8658%" y="447.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="40.6158%" y="421" width="0.1466%" height="15" fill="rgb(249,55,30)" fg:x="277" fg:w="1"/><text x="40.8658%" y="431.50"></text></g><g><title>std::static_pointer_cast&lt;PIPELINE_LAYOUT_STATE, PIPELINE_LAYOUT_STATE&gt; (1 samples, 0.15%)</title><rect x="41.4956%" y="517" width="0.1466%" height="15" fill="rgb(237,47,42)" fg:x="283" fg:w="1"/><text x="41.7456%" y="527.50"></text></g><g><title>ValidationStateTracker::Get&lt;PIPELINE_LAYOUT_STATE, state_object::Traits&lt;PIPELINE_LAYOUT_STATE&gt; &gt; (2 samples, 0.29%)</title><rect x="41.4956%" y="533" width="0.2933%" height="15" fill="rgb(211,20,18)" fg:x="283" fg:w="2"/><text x="41.7456%" y="543.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkPipelineLayout_T*, std::shared_ptr&lt;PIPELINE_LAYOUT_STATE&gt;, 2, robin_hood::hash&lt;VkPipelineLayout_T*, void&gt; &gt;::FindResult::~FindResult (1 samples, 0.15%)</title><rect x="41.6422%" y="517" width="0.1466%" height="15" fill="rgb(231,203,46)" fg:x="284" fg:w="1"/><text x="41.8922%" y="527.50"></text></g><g><title>std::pair&lt;bool, std::shared_ptr&lt;PIPELINE_LAYOUT_STATE&gt; &gt;::~pair (1 samples, 0.15%)</title><rect x="41.6422%" y="501" width="0.1466%" height="15" fill="rgb(237,142,3)" fg:x="284" fg:w="1"/><text x="41.8922%" y="511.50"></text></g><g><title>std::shared_ptr&lt;PIPELINE_LAYOUT_STATE&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="41.6422%" y="485" width="0.1466%" height="15" fill="rgb(241,107,1)" fg:x="284" fg:w="1"/><text x="41.8922%" y="495.50"></text></g><g><title>std::__shared_ptr&lt;PIPELINE_LAYOUT_STATE, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="41.6422%" y="469" width="0.1466%" height="15" fill="rgb(229,83,13)" fg:x="284" fg:w="1"/><text x="41.8922%" y="479.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="41.6422%" y="453" width="0.1466%" height="15" fill="rgb(241,91,40)" fg:x="284" fg:w="1"/><text x="41.8922%" y="463.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="41.6422%" y="437" width="0.1466%" height="15" fill="rgb(225,3,45)" fg:x="284" fg:w="1"/><text x="41.8922%" y="447.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandBuffer_T*, std::shared_ptr&lt;CMD_BUFFER_STATE&gt;, 2, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt; &gt;::FindResult::~FindResult (1 samples, 0.15%)</title><rect x="41.7889%" y="501" width="0.1466%" height="15" fill="rgb(244,223,14)" fg:x="285" fg:w="1"/><text x="42.0389%" y="511.50"></text></g><g><title>std::pair&lt;bool, std::shared_ptr&lt;CMD_BUFFER_STATE&gt; &gt;::~pair (1 samples, 0.15%)</title><rect x="41.7889%" y="485" width="0.1466%" height="15" fill="rgb(224,124,37)" fg:x="285" fg:w="1"/><text x="42.0389%" y="495.50"></text></g><g><title>std::shared_ptr&lt;CMD_BUFFER_STATE&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="41.7889%" y="469" width="0.1466%" height="15" fill="rgb(251,171,30)" fg:x="285" fg:w="1"/><text x="42.0389%" y="479.50"></text></g><g><title>std::__shared_ptr&lt;CMD_BUFFER_STATE, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="41.7889%" y="453" width="0.1466%" height="15" fill="rgb(236,46,54)" fg:x="285" fg:w="1"/><text x="42.0389%" y="463.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="41.7889%" y="437" width="0.1466%" height="15" fill="rgb(245,213,5)" fg:x="285" fg:w="1"/><text x="42.0389%" y="447.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="41.7889%" y="421" width="0.1466%" height="15" fill="rgb(230,144,27)" fg:x="285" fg:w="1"/><text x="42.0389%" y="431.50"></text></g><g><title>CoreChecks::PreCallValidateCmdPushConstants (6 samples, 0.88%)</title><rect x="41.2023%" y="549" width="0.8798%" height="15" fill="rgb(220,86,6)" fg:x="281" fg:w="6"/><text x="41.4523%" y="559.50"></text></g><g><title>ValidationStateTracker::GetRead&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt;, LockedSharedPtr&lt;CMD_BUFFER_STATE const, std::unique_lock&lt;ReadWriteLock&gt; &gt; &gt; (2 samples, 0.29%)</title><rect x="41.7889%" y="533" width="0.2933%" height="15" fill="rgb(240,20,13)" fg:x="285" fg:w="2"/><text x="42.0389%" y="543.50"></text></g><g><title>ValidationStateTracker::Get&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt; &gt; (2 samples, 0.29%)</title><rect x="41.7889%" y="517" width="0.2933%" height="15" fill="rgb(217,89,34)" fg:x="285" fg:w="2"/><text x="42.0389%" y="527.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandBuffer_T*, std::shared_ptr&lt;CMD_BUFFER_STATE&gt;, 2, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="41.9355%" y="501" width="0.1466%" height="15" fill="rgb(229,13,5)" fg:x="286" fg:w="1"/><text x="42.1855%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="41.9355%" y="485" width="0.1466%" height="15" fill="rgb(244,67,35)" fg:x="286" fg:w="1"/><text x="42.1855%" y="495.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="41.9355%" y="469" width="0.1466%" height="15" fill="rgb(221,40,2)" fg:x="286" fg:w="1"/><text x="42.1855%" y="479.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="41.9355%" y="453" width="0.1466%" height="15" fill="rgb(237,157,21)" fg:x="286" fg:w="1"/><text x="42.1855%" y="463.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="41.9355%" y="437" width="0.1466%" height="15" fill="rgb(222,94,11)" fg:x="286" fg:w="1"/><text x="42.1855%" y="447.50"></text></g><g><title>ValidationStateTracker::GetRead&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt;, LockedSharedPtr&lt;CMD_BUFFER_STATE const, std::unique_lock&lt;ReadWriteLock&gt; &gt; &gt; (1 samples, 0.15%)</title><rect x="41.9355%" y="421" width="0.1466%" height="15" fill="rgb(249,113,6)" fg:x="286" fg:w="1"/><text x="42.1855%" y="431.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="41.9355%" y="405" width="0.1466%" height="15" fill="rgb(238,137,36)" fg:x="286" fg:w="1"/><text x="42.1855%" y="415.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (3 samples, 0.44%)</title><rect x="42.0821%" y="485" width="0.4399%" height="15" fill="rgb(210,102,26)" fg:x="287" fg:w="3"/><text x="42.3321%" y="495.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (3 samples, 0.44%)</title><rect x="42.0821%" y="469" width="0.4399%" height="15" fill="rgb(218,30,30)" fg:x="287" fg:w="3"/><text x="42.3321%" y="479.50"></text></g><g><title>ReadWriteLock::lock (3 samples, 0.44%)</title><rect x="42.0821%" y="453" width="0.4399%" height="15" fill="rgb(214,67,26)" fg:x="287" fg:w="3"/><text x="42.3321%" y="463.50"></text></g><g><title>std::mutex::lock (3 samples, 0.44%)</title><rect x="42.0821%" y="437" width="0.4399%" height="15" fill="rgb(251,9,53)" fg:x="287" fg:w="3"/><text x="42.3321%" y="447.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, std::shared_ptr&lt;ObjTrackState&gt;, 6, robin_hood::hash&lt;unsigned long, void&gt; &gt;::contains (3 samples, 0.44%)</title><rect x="42.0821%" y="421" width="0.4399%" height="15" fill="rgb(228,204,25)" fg:x="287" fg:w="3"/><text x="42.3321%" y="431.50"></text></g><g><title>pthread_mutex_lock (3 samples, 0.44%)</title><rect x="42.0821%" y="405" width="0.4399%" height="15" fill="rgb(207,153,8)" fg:x="287" fg:w="3"/><text x="42.3321%" y="415.50"></text></g><g><title>[libc.so.6] (2 samples, 0.29%)</title><rect x="42.5220%" y="421" width="0.2933%" height="15" fill="rgb(242,9,16)" fg:x="290" fg:w="2"/><text x="42.7720%" y="431.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (3 samples, 0.44%)</title><rect x="42.5220%" y="485" width="0.4399%" height="15" fill="rgb(217,211,10)" fg:x="290" fg:w="3"/><text x="42.7720%" y="495.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (3 samples, 0.44%)</title><rect x="42.5220%" y="469" width="0.4399%" height="15" fill="rgb(219,228,52)" fg:x="290" fg:w="3"/><text x="42.7720%" y="479.50"></text></g><g><title>std::mutex::unlock (3 samples, 0.44%)</title><rect x="42.5220%" y="453" width="0.4399%" height="15" fill="rgb(231,92,29)" fg:x="290" fg:w="3"/><text x="42.7720%" y="463.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, std::shared_ptr&lt;ObjTrackState&gt;, 6, robin_hood::hash&lt;unsigned long, void&gt; &gt;::contains (3 samples, 0.44%)</title><rect x="42.5220%" y="437" width="0.4399%" height="15" fill="rgb(232,8,23)" fg:x="290" fg:w="3"/><text x="42.7720%" y="447.50"></text></g><g><title>pthread_mutex_unlock (1 samples, 0.15%)</title><rect x="42.8152%" y="421" width="0.1466%" height="15" fill="rgb(216,211,34)" fg:x="292" fg:w="1"/><text x="43.0652%" y="431.50"></text></g><g><title>ObjectLifetimes::PreCallValidateCmdPushConstants (7 samples, 1.03%)</title><rect x="42.0821%" y="549" width="1.0264%" height="15" fill="rgb(236,151,0)" fg:x="287" fg:w="7"/><text x="42.3321%" y="559.50"></text></g><g><title>ObjectLifetimes::ValidateObject&lt;VkPhysicalDevice_T*&gt; (7 samples, 1.03%)</title><rect x="42.0821%" y="533" width="1.0264%" height="15" fill="rgb(209,168,3)" fg:x="287" fg:w="7"/><text x="42.3321%" y="543.50"></text></g><g><title>ObjectLifetimes::CheckObjectValidity (7 samples, 1.03%)</title><rect x="42.0821%" y="517" width="1.0264%" height="15" fill="rgb(208,129,28)" fg:x="287" fg:w="7"/><text x="42.3321%" y="527.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, std::shared_ptr&lt;ObjTrackState&gt;, 6, robin_hood::hash&lt;unsigned long, void&gt; &gt;::contains (7 samples, 1.03%)</title><rect x="42.0821%" y="501" width="1.0264%" height="15" fill="rgb(229,78,22)" fg:x="287" fg:w="7"/><text x="42.3321%" y="511.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, std::shared_ptr&lt;ObjTrackState&gt;, 6, robin_hood::hash&lt;unsigned long, void&gt; &gt;::ConcurrentMapHashObject (1 samples, 0.15%)</title><rect x="42.9619%" y="485" width="0.1466%" height="15" fill="rgb(228,187,13)" fg:x="293" fg:w="1"/><text x="43.2119%" y="495.50"></text></g><g><title>ObjectLifetimes::ReadLock (1 samples, 0.15%)</title><rect x="43.1085%" y="549" width="0.1466%" height="15" fill="rgb(240,119,24)" fg:x="294" fg:w="1"/><text x="43.3585%" y="559.50"></text></g><g><title>ThreadSafety::FinishReadObject (1 samples, 0.15%)</title><rect x="43.2551%" y="533" width="0.1466%" height="15" fill="rgb(209,194,42)" fg:x="295" fg:w="1"/><text x="43.5051%" y="543.50"></text></g><g><title>counter&lt;VkPipelineLayout_T*&gt;::FinishRead (1 samples, 0.15%)</title><rect x="43.2551%" y="517" width="0.1466%" height="15" fill="rgb(247,200,46)" fg:x="295" fg:w="1"/><text x="43.5051%" y="527.50"></text></g><g><title>std::shared_ptr&lt;ObjectUseData&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="43.2551%" y="501" width="0.1466%" height="15" fill="rgb(218,76,16)" fg:x="295" fg:w="1"/><text x="43.5051%" y="511.50"></text></g><g><title>std::__shared_ptr&lt;ObjectUseData, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="43.2551%" y="485" width="0.1466%" height="15" fill="rgb(225,21,48)" fg:x="295" fg:w="1"/><text x="43.5051%" y="495.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="43.2551%" y="469" width="0.1466%" height="15" fill="rgb(239,223,50)" fg:x="295" fg:w="1"/><text x="43.5051%" y="479.50"></text></g><g><title>ThreadSafety::FinishWriteObject (1 samples, 0.15%)</title><rect x="43.4018%" y="517" width="0.1466%" height="15" fill="rgb(244,45,21)" fg:x="296" fg:w="1"/><text x="43.6518%" y="527.50"></text></g><g><title>counter&lt;VkCommandPool_T*&gt;::FinishWrite (1 samples, 0.15%)</title><rect x="43.4018%" y="501" width="0.1466%" height="15" fill="rgb(232,33,43)" fg:x="296" fg:w="1"/><text x="43.6518%" y="511.50"></text></g><g><title>std::shared_ptr&lt;ObjectUseData&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="43.4018%" y="485" width="0.1466%" height="15" fill="rgb(209,8,3)" fg:x="296" fg:w="1"/><text x="43.6518%" y="495.50"></text></g><g><title>std::__shared_ptr&lt;ObjectUseData, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="43.4018%" y="469" width="0.1466%" height="15" fill="rgb(214,25,53)" fg:x="296" fg:w="1"/><text x="43.6518%" y="479.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="43.4018%" y="453" width="0.1466%" height="15" fill="rgb(254,186,54)" fg:x="296" fg:w="1"/><text x="43.6518%" y="463.50"></text></g><g><title>ThreadSafety::PostCallRecordCmdPushConstants (4 samples, 0.59%)</title><rect x="43.2551%" y="549" width="0.5865%" height="15" fill="rgb(208,174,49)" fg:x="295" fg:w="4"/><text x="43.5051%" y="559.50"></text></g><g><title>ThreadSafety::FinishWriteObject (3 samples, 0.44%)</title><rect x="43.4018%" y="533" width="0.4399%" height="15" fill="rgb(233,191,51)" fg:x="296" fg:w="3"/><text x="43.6518%" y="543.50"></text></g><g><title>counter&lt;VkCommandBuffer_T*&gt;::FinishWrite (2 samples, 0.29%)</title><rect x="43.5484%" y="517" width="0.2933%" height="15" fill="rgb(222,134,10)" fg:x="297" fg:w="2"/><text x="43.7984%" y="527.50"></text></g><g><title>std::shared_ptr&lt;ObjectUseData&gt;::~shared_ptr (2 samples, 0.29%)</title><rect x="43.5484%" y="501" width="0.2933%" height="15" fill="rgb(230,226,20)" fg:x="297" fg:w="2"/><text x="43.7984%" y="511.50"></text></g><g><title>std::__shared_ptr&lt;ObjectUseData, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (2 samples, 0.29%)</title><rect x="43.5484%" y="485" width="0.2933%" height="15" fill="rgb(251,111,25)" fg:x="297" fg:w="2"/><text x="43.7984%" y="495.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (2 samples, 0.29%)</title><rect x="43.5484%" y="469" width="0.2933%" height="15" fill="rgb(224,40,46)" fg:x="297" fg:w="2"/><text x="43.7984%" y="479.50"></text></g><g><title>ValidationStateTracker::Get&lt;PIPELINE_LAYOUT_STATE, state_object::Traits&lt;PIPELINE_LAYOUT_STATE&gt; &gt; (2 samples, 0.29%)</title><rect x="44.1349%" y="533" width="0.2933%" height="15" fill="rgb(236,108,47)" fg:x="301" fg:w="2"/><text x="44.3849%" y="543.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkPipelineLayout_T*, std::shared_ptr&lt;PIPELINE_LAYOUT_STATE&gt;, 2, robin_hood::hash&lt;VkPipelineLayout_T*, void&gt; &gt;::find (2 samples, 0.29%)</title><rect x="44.1349%" y="517" width="0.2933%" height="15" fill="rgb(234,93,0)" fg:x="301" fg:w="2"/><text x="44.3849%" y="527.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="44.2815%" y="501" width="0.1466%" height="15" fill="rgb(224,213,32)" fg:x="302" fg:w="1"/><text x="44.5315%" y="511.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="44.2815%" y="485" width="0.1466%" height="15" fill="rgb(251,11,48)" fg:x="302" fg:w="1"/><text x="44.5315%" y="495.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="44.2815%" y="469" width="0.1466%" height="15" fill="rgb(236,173,5)" fg:x="302" fg:w="1"/><text x="44.5315%" y="479.50"></text></g><g><title>ValidationStateTracker::PostCallRecordCmdPushConstants (1 samples, 0.15%)</title><rect x="44.2815%" y="453" width="0.1466%" height="15" fill="rgb(230,95,12)" fg:x="302" fg:w="1"/><text x="44.5315%" y="463.50"></text></g><g><title>CMD_BUFFER_STATE::WriteLock (1 samples, 0.15%)</title><rect x="44.4282%" y="517" width="0.1466%" height="15" fill="rgb(232,209,1)" fg:x="303" fg:w="1"/><text x="44.6782%" y="527.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="44.4282%" y="501" width="0.1466%" height="15" fill="rgb(232,6,1)" fg:x="303" fg:w="1"/><text x="44.6782%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="44.4282%" y="485" width="0.1466%" height="15" fill="rgb(210,224,50)" fg:x="303" fg:w="1"/><text x="44.6782%" y="495.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="44.4282%" y="469" width="0.1466%" height="15" fill="rgb(228,127,35)" fg:x="303" fg:w="1"/><text x="44.6782%" y="479.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="44.4282%" y="453" width="0.1466%" height="15" fill="rgb(245,102,45)" fg:x="303" fg:w="1"/><text x="44.6782%" y="463.50"></text></g><g><title>ValidationStateTracker::GetWrite&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt;, LockedSharedPtr&lt;CMD_BUFFER_STATE, std::unique_lock&lt;ReadWriteLock&gt; &gt; &gt; (1 samples, 0.15%)</title><rect x="44.4282%" y="437" width="0.1466%" height="15" fill="rgb(214,1,49)" fg:x="303" fg:w="1"/><text x="44.6782%" y="447.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="44.4282%" y="421" width="0.1466%" height="15" fill="rgb(226,163,40)" fg:x="303" fg:w="1"/><text x="44.6782%" y="431.50"></text></g><g><title>std::static_pointer_cast&lt;CMD_BUFFER_STATE, CMD_BUFFER_STATE&gt; (1 samples, 0.15%)</title><rect x="44.5748%" y="501" width="0.1466%" height="15" fill="rgb(239,212,28)" fg:x="304" fg:w="1"/><text x="44.8248%" y="511.50"></text></g><g><title>std::shared_ptr&lt;CMD_BUFFER_STATE&gt;::shared_ptr&lt;CMD_BUFFER_STATE&gt; (1 samples, 0.15%)</title><rect x="44.5748%" y="485" width="0.1466%" height="15" fill="rgb(220,20,13)" fg:x="304" fg:w="1"/><text x="44.8248%" y="495.50"></text></g><g><title>std::__shared_ptr&lt;CMD_BUFFER_STATE, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;CMD_BUFFER_STATE&gt; (1 samples, 0.15%)</title><rect x="44.5748%" y="469" width="0.1466%" height="15" fill="rgb(210,164,35)" fg:x="304" fg:w="1"/><text x="44.8248%" y="479.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count (1 samples, 0.15%)</title><rect x="44.5748%" y="453" width="0.1466%" height="15" fill="rgb(248,109,41)" fg:x="304" fg:w="1"/><text x="44.8248%" y="463.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy (1 samples, 0.15%)</title><rect x="44.5748%" y="437" width="0.1466%" height="15" fill="rgb(238,23,50)" fg:x="304" fg:w="1"/><text x="44.8248%" y="447.50"></text></g><g><title>__gnu_cxx::__atomic_add_dispatch (1 samples, 0.15%)</title><rect x="44.5748%" y="421" width="0.1466%" height="15" fill="rgb(211,48,49)" fg:x="304" fg:w="1"/><text x="44.8248%" y="431.50"></text></g><g><title>__gnu_cxx::__atomic_add (1 samples, 0.15%)</title><rect x="44.5748%" y="405" width="0.1466%" height="15" fill="rgb(223,36,21)" fg:x="304" fg:w="1"/><text x="44.8248%" y="415.50"></text></g><g><title>ValidationStateTracker::GetWrite&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt;, LockedSharedPtr&lt;CMD_BUFFER_STATE, std::unique_lock&lt;ReadWriteLock&gt; &gt; &gt; (3 samples, 0.44%)</title><rect x="44.4282%" y="533" width="0.4399%" height="15" fill="rgb(207,123,46)" fg:x="303" fg:w="3"/><text x="44.6782%" y="543.50"></text></g><g><title>ValidationStateTracker::Get&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt; &gt; (2 samples, 0.29%)</title><rect x="44.5748%" y="517" width="0.2933%" height="15" fill="rgb(240,218,32)" fg:x="304" fg:w="2"/><text x="44.8248%" y="527.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandBuffer_T*, std::shared_ptr&lt;CMD_BUFFER_STATE&gt;, 2, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="44.7214%" y="501" width="0.1466%" height="15" fill="rgb(252,5,43)" fg:x="305" fg:w="1"/><text x="44.9714%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="44.7214%" y="485" width="0.1466%" height="15" fill="rgb(252,84,19)" fg:x="305" fg:w="1"/><text x="44.9714%" y="495.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="44.7214%" y="469" width="0.1466%" height="15" fill="rgb(243,152,39)" fg:x="305" fg:w="1"/><text x="44.9714%" y="479.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="44.7214%" y="453" width="0.1466%" height="15" fill="rgb(234,160,15)" fg:x="305" fg:w="1"/><text x="44.9714%" y="463.50"></text></g><g><title>ValidationStateTracker::GetWrite&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt;, LockedSharedPtr&lt;CMD_BUFFER_STATE, std::unique_lock&lt;ReadWriteLock&gt; &gt; &gt; (1 samples, 0.15%)</title><rect x="44.7214%" y="437" width="0.1466%" height="15" fill="rgb(237,34,20)" fg:x="305" fg:w="1"/><text x="44.9714%" y="447.50"></text></g><g><title>ValidationStateTracker::PostCallRecordCmdPushConstants (8 samples, 1.17%)</title><rect x="43.8416%" y="549" width="1.1730%" height="15" fill="rgb(229,97,13)" fg:x="299" fg:w="8"/><text x="44.0916%" y="559.50"></text></g><g><title>ValidationStateTracker::PostCallRecordCmdPushConstants (1 samples, 0.15%)</title><rect x="44.8680%" y="533" width="0.1466%" height="15" fill="rgb(234,71,50)" fg:x="306" fg:w="1"/><text x="45.1180%" y="543.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="44.8680%" y="517" width="0.1466%" height="15" fill="rgb(253,155,4)" fg:x="306" fg:w="1"/><text x="45.1180%" y="527.50"></text></g><g><title>vulkan_layer_chassis::CmdPushConstants (32 samples, 4.69%)</title><rect x="40.7625%" y="565" width="4.6921%" height="15" fill="rgb(222,185,37)" fg:x="278" fg:w="32"/><text x="41.0125%" y="575.50">vulka..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (3 samples, 0.44%)</title><rect x="45.0147%" y="549" width="0.4399%" height="15" fill="rgb(251,177,13)" fg:x="307" fg:w="3"/><text x="45.2647%" y="559.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="45.1613%" y="533" width="0.2933%" height="15" fill="rgb(250,179,40)" fg:x="308" fg:w="2"/><text x="45.4113%" y="543.50"></text></g><g><title>ObjectLifetimes::ReadLock (1 samples, 0.15%)</title><rect x="45.4545%" y="549" width="0.1466%" height="15" fill="rgb(242,44,2)" fg:x="310" fg:w="1"/><text x="45.7045%" y="559.50"></text></g><g><title>vulkan_layer_chassis::CmdSetScissor (2 samples, 0.29%)</title><rect x="45.4545%" y="565" width="0.2933%" height="15" fill="rgb(216,177,13)" fg:x="310" fg:w="2"/><text x="45.7045%" y="575.50"></text></g><g><title>ValidationStateTracker::PreCallRecordCmdSetScissor (1 samples, 0.15%)</title><rect x="45.6012%" y="549" width="0.1466%" height="15" fill="rgb(216,106,43)" fg:x="311" fg:w="1"/><text x="45.8512%" y="559.50"></text></g><g><title>ValidationStateTracker::GetWrite&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt;, LockedSharedPtr&lt;CMD_BUFFER_STATE, std::unique_lock&lt;ReadWriteLock&gt; &gt; &gt; (1 samples, 0.15%)</title><rect x="45.6012%" y="533" width="0.1466%" height="15" fill="rgb(216,183,2)" fg:x="311" fg:w="1"/><text x="45.8512%" y="543.50"></text></g><g><title>ValidationStateTracker::Get&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt; &gt; (1 samples, 0.15%)</title><rect x="45.6012%" y="517" width="0.1466%" height="15" fill="rgb(249,75,3)" fg:x="311" fg:w="1"/><text x="45.8512%" y="527.50"></text></g><g><title>std::static_pointer_cast&lt;CMD_BUFFER_STATE, CMD_BUFFER_STATE&gt; (1 samples, 0.15%)</title><rect x="45.6012%" y="501" width="0.1466%" height="15" fill="rgb(219,67,39)" fg:x="311" fg:w="1"/><text x="45.8512%" y="511.50"></text></g><g><title>std::shared_ptr&lt;CMD_BUFFER_STATE&gt;::shared_ptr&lt;CMD_BUFFER_STATE&gt; (1 samples, 0.15%)</title><rect x="45.6012%" y="485" width="0.1466%" height="15" fill="rgb(253,228,2)" fg:x="311" fg:w="1"/><text x="45.8512%" y="495.50"></text></g><g><title>std::__shared_ptr&lt;CMD_BUFFER_STATE, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;CMD_BUFFER_STATE&gt; (1 samples, 0.15%)</title><rect x="45.6012%" y="469" width="0.1466%" height="15" fill="rgb(235,138,27)" fg:x="311" fg:w="1"/><text x="45.8512%" y="479.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count (1 samples, 0.15%)</title><rect x="45.6012%" y="453" width="0.1466%" height="15" fill="rgb(236,97,51)" fg:x="311" fg:w="1"/><text x="45.8512%" y="463.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy (1 samples, 0.15%)</title><rect x="45.6012%" y="437" width="0.1466%" height="15" fill="rgb(240,80,30)" fg:x="311" fg:w="1"/><text x="45.8512%" y="447.50"></text></g><g><title>__gnu_cxx::__atomic_add_dispatch (1 samples, 0.15%)</title><rect x="45.6012%" y="421" width="0.1466%" height="15" fill="rgb(230,178,19)" fg:x="311" fg:w="1"/><text x="45.8512%" y="431.50"></text></g><g><title>__gnu_cxx::__atomic_add (1 samples, 0.15%)</title><rect x="45.6012%" y="405" width="0.1466%" height="15" fill="rgb(210,190,27)" fg:x="311" fg:w="1"/><text x="45.8512%" y="415.50"></text></g><g><title>DispatchCmdSetViewport (1 samples, 0.15%)</title><rect x="45.7478%" y="549" width="0.1466%" height="15" fill="rgb(222,107,31)" fg:x="312" fg:w="1"/><text x="45.9978%" y="559.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="45.7478%" y="533" width="0.1466%" height="15" fill="rgb(216,127,34)" fg:x="312" fg:w="1"/><text x="45.9978%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="45.7478%" y="517" width="0.1466%" height="15" fill="rgb(234,116,52)" fg:x="312" fg:w="1"/><text x="45.9978%" y="527.50"></text></g><g><title>hell_renderer::vulkan::vulkan_backend::VulkanBackend::draw_frame (145 samples, 21.26%)</title><rect x="24.7801%" y="581" width="21.2610%" height="15" fill="rgb(222,124,15)" fg:x="169" fg:w="145"/><text x="25.0301%" y="591.50">hell_renderer::vulkan::vulkan_back..</text></g><g><title>vulkan_layer_chassis::CmdSetViewport (2 samples, 0.29%)</title><rect x="45.7478%" y="565" width="0.2933%" height="15" fill="rgb(231,179,28)" fg:x="312" fg:w="2"/><text x="45.9978%" y="575.50"></text></g><g><title>ThreadSafety::FinishWriteObject (1 samples, 0.15%)</title><rect x="45.8944%" y="549" width="0.1466%" height="15" fill="rgb(226,93,45)" fg:x="313" fg:w="1"/><text x="46.1444%" y="559.50"></text></g><g><title>counter&lt;VkCommandBuffer_T*&gt;::FinishWrite (1 samples, 0.15%)</title><rect x="45.8944%" y="533" width="0.1466%" height="15" fill="rgb(215,8,51)" fg:x="313" fg:w="1"/><text x="46.1444%" y="543.50"></text></g><g><title>counter&lt;VkCommandBuffer_T*&gt;::FindObject (1 samples, 0.15%)</title><rect x="45.8944%" y="517" width="0.1466%" height="15" fill="rgb(223,106,5)" fg:x="313" fg:w="1"/><text x="46.1444%" y="527.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandBuffer_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="45.8944%" y="501" width="0.1466%" height="15" fill="rgb(250,191,5)" fg:x="313" fg:w="1"/><text x="46.1444%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="45.8944%" y="485" width="0.1466%" height="15" fill="rgb(242,132,44)" fg:x="313" fg:w="1"/><text x="46.1444%" y="495.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="45.8944%" y="469" width="0.1466%" height="15" fill="rgb(251,152,29)" fg:x="313" fg:w="1"/><text x="46.1444%" y="479.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="45.8944%" y="453" width="0.1466%" height="15" fill="rgb(218,179,5)" fg:x="313" fg:w="1"/><text x="46.1444%" y="463.50"></text></g><g><title>__gthread_mutex_unlock (1 samples, 0.15%)</title><rect x="45.8944%" y="437" width="0.1466%" height="15" fill="rgb(227,67,19)" fg:x="313" fg:w="1"/><text x="46.1444%" y="447.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="45.8944%" y="421" width="0.1466%" height="15" fill="rgb(233,119,31)" fg:x="313" fg:w="1"/><text x="46.1444%" y="431.50"></text></g><g><title>CoreChecks::PreCallValidateMapMemory (1 samples, 0.15%)</title><rect x="46.3343%" y="517" width="0.1466%" height="15" fill="rgb(241,120,22)" fg:x="316" fg:w="1"/><text x="46.5843%" y="527.50"></text></g><g><title>std::shared_ptr&lt;DEVICE_MEMORY_STATE const&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="46.3343%" y="501" width="0.1466%" height="15" fill="rgb(224,102,30)" fg:x="316" fg:w="1"/><text x="46.5843%" y="511.50"></text></g><g><title>std::__shared_ptr&lt;DEVICE_MEMORY_STATE const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="46.3343%" y="485" width="0.1466%" height="15" fill="rgb(210,164,37)" fg:x="316" fg:w="1"/><text x="46.5843%" y="495.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="46.3343%" y="469" width="0.1466%" height="15" fill="rgb(226,191,16)" fg:x="316" fg:w="1"/><text x="46.5843%" y="479.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="46.3343%" y="453" width="0.1466%" height="15" fill="rgb(214,40,45)" fg:x="316" fg:w="1"/><text x="46.5843%" y="463.50"></text></g><g><title>ObjectLifetimes::PreCallValidateMapMemory (1 samples, 0.15%)</title><rect x="46.4809%" y="517" width="0.1466%" height="15" fill="rgb(244,29,26)" fg:x="317" fg:w="1"/><text x="46.7309%" y="527.50"></text></g><g><title>ObjectLifetimes::ValidateObject&lt;VkDevice_T*&gt; (1 samples, 0.15%)</title><rect x="46.4809%" y="501" width="0.1466%" height="15" fill="rgb(216,16,5)" fg:x="317" fg:w="1"/><text x="46.7309%" y="511.50"></text></g><g><title>ObjectLifetimes::ValidateObject&lt;VkPhysicalDevice_T*&gt; (1 samples, 0.15%)</title><rect x="46.4809%" y="485" width="0.1466%" height="15" fill="rgb(249,76,35)" fg:x="317" fg:w="1"/><text x="46.7309%" y="495.50"></text></g><g><title>ObjectLifetimes::ValidateDeviceObject (1 samples, 0.15%)</title><rect x="46.4809%" y="469" width="0.1466%" height="15" fill="rgb(207,11,44)" fg:x="317" fg:w="1"/><text x="46.7309%" y="479.50"></text></g><g><title>ObjectLifetimes::GetObjectLifetimeData (1 samples, 0.15%)</title><rect x="46.4809%" y="453" width="0.1466%" height="15" fill="rgb(228,190,49)" fg:x="317" fg:w="1"/><text x="46.7309%" y="463.50"></text></g><g><title>ThreadSafety::PreCallRecordMapMemory (1 samples, 0.15%)</title><rect x="46.6276%" y="517" width="0.1466%" height="15" fill="rgb(214,173,12)" fg:x="318" fg:w="1"/><text x="46.8776%" y="527.50"></text></g><g><title>ValidationStateTracker::PostCallRecordMapMemory (1 samples, 0.15%)</title><rect x="46.7742%" y="517" width="0.1466%" height="15" fill="rgb(218,26,35)" fg:x="319" fg:w="1"/><text x="47.0242%" y="527.50"></text></g><g><title>ValidationStateTracker::RecordMappedMemory (1 samples, 0.15%)</title><rect x="46.7742%" y="501" width="0.1466%" height="15" fill="rgb(220,200,19)" fg:x="319" fg:w="1"/><text x="47.0242%" y="511.50"></text></g><g><title>std::__shared_ptr&lt;DEVICE_MEMORY_STATE, (__gnu_cxx::_Lock_policy)2&gt;::operator bool (1 samples, 0.15%)</title><rect x="46.7742%" y="485" width="0.1466%" height="15" fill="rgb(239,95,49)" fg:x="319" fg:w="1"/><text x="47.0242%" y="495.50"></text></g><g><title>ash::device::Device::map_memory (7 samples, 1.03%)</title><rect x="46.0411%" y="549" width="1.0264%" height="15" fill="rgb(235,85,53)" fg:x="314" fg:w="7"/><text x="46.2911%" y="559.50"></text></g><g><title>vulkan_layer_chassis::MapMemory (7 samples, 1.03%)</title><rect x="46.0411%" y="533" width="1.0264%" height="15" fill="rgb(233,133,31)" fg:x="314" fg:w="7"/><text x="46.2911%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="46.9208%" y="517" width="0.1466%" height="15" fill="rgb(218,25,20)" fg:x="320" fg:w="1"/><text x="47.1708%" y="527.50"></text></g><g><title>hell_renderer::vulkan::vulkan_backend::VulkanBackend::update_global_state (8 samples, 1.17%)</title><rect x="46.0411%" y="581" width="1.1730%" height="15" fill="rgb(252,210,38)" fg:x="314" fg:w="8"/><text x="46.2911%" y="591.50"></text></g><g><title>hell_renderer::vulkan::buffer::VulkanBuffer::upload_data_buffer (8 samples, 1.17%)</title><rect x="46.0411%" y="565" width="1.1730%" height="15" fill="rgb(242,134,21)" fg:x="314" fg:w="8"/><text x="46.2911%" y="575.50"></text></g><g><title>vulkan_layer_chassis::UnmapMemory (1 samples, 0.15%)</title><rect x="47.0674%" y="549" width="0.1466%" height="15" fill="rgb(213,28,48)" fg:x="321" fg:w="1"/><text x="47.3174%" y="559.50"></text></g><g><title>ObjectLifetimes::ReadLock (1 samples, 0.15%)</title><rect x="47.0674%" y="533" width="0.1466%" height="15" fill="rgb(250,196,2)" fg:x="321" fg:w="1"/><text x="47.3174%" y="543.50"></text></g><g><title>__rdl_realloc (1 samples, 0.15%)</title><rect x="47.3607%" y="517" width="0.1466%" height="15" fill="rgb(227,5,17)" fg:x="323" fg:w="1"/><text x="47.6107%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.15%)</title><rect x="47.3607%" y="501" width="0.1466%" height="15" fill="rgb(221,226,24)" fg:x="323" fg:w="1"/><text x="47.6107%" y="511.50"></text></g><g><title>__rust_realloc (1 samples, 0.15%)</title><rect x="47.5073%" y="517" width="0.1466%" height="15" fill="rgb(211,5,48)" fg:x="324" fg:w="1"/><text x="47.7573%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 1.47%)</title><rect x="47.2141%" y="565" width="1.4663%" height="15" fill="rgb(219,150,6)" fg:x="322" fg:w="10"/><text x="47.4641%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 1.32%)</title><rect x="47.3607%" y="549" width="1.3196%" height="15" fill="rgb(251,46,16)" fg:x="323" fg:w="9"/><text x="47.6107%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 1.32%)</title><rect x="47.3607%" y="533" width="1.3196%" height="15" fill="rgb(220,204,40)" fg:x="323" fg:w="9"/><text x="47.6107%" y="543.50"></text></g><g><title>realloc (7 samples, 1.03%)</title><rect x="47.6540%" y="517" width="1.0264%" height="15" fill="rgb(211,85,2)" fg:x="325" fg:w="7"/><text x="47.9040%" y="527.50"></text></g><g><title>[libc.so.6] (6 samples, 0.88%)</title><rect x="47.8006%" y="501" width="0.8798%" height="15" fill="rgb(229,17,7)" fg:x="326" fg:w="6"/><text x="48.0506%" y="511.50"></text></g><g><title>[libc.so.6] (6 samples, 0.88%)</title><rect x="47.8006%" y="485" width="0.8798%" height="15" fill="rgb(239,72,28)" fg:x="326" fg:w="6"/><text x="48.0506%" y="495.50"></text></g><g><title>hell_renderer::vulkan::vulkan_backend::VulkanBackend::update_object_buffer (11 samples, 1.61%)</title><rect x="47.2141%" y="581" width="1.6129%" height="15" fill="rgb(230,47,54)" fg:x="322" fg:w="11"/><text x="47.4641%" y="591.50"></text></g><g><title>hell_renderer::vulkan::buffer::VulkanBuffer::upload_data_storage_buffer (1 samples, 0.15%)</title><rect x="48.6804%" y="565" width="0.1466%" height="15" fill="rgb(214,50,8)" fg:x="332" fg:w="1"/><text x="48.9304%" y="575.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="48.6804%" y="549" width="0.1466%" height="15" fill="rgb(216,198,43)" fg:x="332" fg:w="1"/><text x="48.9304%" y="559.50"></text></g><g><title>ObjectLifetimes::PreCallValidateMapMemory (1 samples, 0.15%)</title><rect x="48.8270%" y="533" width="0.1466%" height="15" fill="rgb(234,20,35)" fg:x="333" fg:w="1"/><text x="49.0770%" y="543.50"></text></g><g><title>ObjectLifetimes::ValidateObject&lt;VkDevice_T*&gt; (1 samples, 0.15%)</title><rect x="48.8270%" y="517" width="0.1466%" height="15" fill="rgb(254,45,19)" fg:x="333" fg:w="1"/><text x="49.0770%" y="527.50"></text></g><g><title>ObjectLifetimes::ValidateObject&lt;VkPhysicalDevice_T*&gt; (1 samples, 0.15%)</title><rect x="48.8270%" y="501" width="0.1466%" height="15" fill="rgb(219,14,44)" fg:x="333" fg:w="1"/><text x="49.0770%" y="511.50"></text></g><g><title>ObjectLifetimes::ValidateDeviceObject (1 samples, 0.15%)</title><rect x="48.8270%" y="485" width="0.1466%" height="15" fill="rgb(217,220,26)" fg:x="333" fg:w="1"/><text x="49.0770%" y="495.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, std::shared_ptr&lt;ObjTrackState&gt;, 6, robin_hood::hash&lt;unsigned long, void&gt; &gt;::contains (1 samples, 0.15%)</title><rect x="48.8270%" y="469" width="0.1466%" height="15" fill="rgb(213,158,28)" fg:x="333" fg:w="1"/><text x="49.0770%" y="479.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="48.8270%" y="453" width="0.1466%" height="15" fill="rgb(252,51,52)" fg:x="333" fg:w="1"/><text x="49.0770%" y="463.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="48.8270%" y="437" width="0.1466%" height="15" fill="rgb(246,89,16)" fg:x="333" fg:w="1"/><text x="49.0770%" y="447.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="48.8270%" y="421" width="0.1466%" height="15" fill="rgb(216,158,49)" fg:x="333" fg:w="1"/><text x="49.0770%" y="431.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, std::shared_ptr&lt;ObjTrackState&gt;, 6, robin_hood::hash&lt;unsigned long, void&gt; &gt;::contains (1 samples, 0.15%)</title><rect x="48.8270%" y="405" width="0.1466%" height="15" fill="rgb(236,107,19)" fg:x="333" fg:w="1"/><text x="49.0770%" y="415.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="48.8270%" y="389" width="0.1466%" height="15" fill="rgb(228,185,30)" fg:x="333" fg:w="1"/><text x="49.0770%" y="399.50"></text></g><g><title>counter&lt;VkDevice_T*&gt;::FindObject (1 samples, 0.15%)</title><rect x="48.9736%" y="485" width="0.1466%" height="15" fill="rgb(246,134,8)" fg:x="334" fg:w="1"/><text x="49.2236%" y="495.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkDevice_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkDevice_T*, void&gt; &gt;::FindResult::~FindResult (1 samples, 0.15%)</title><rect x="48.9736%" y="469" width="0.1466%" height="15" fill="rgb(214,143,50)" fg:x="334" fg:w="1"/><text x="49.2236%" y="479.50"></text></g><g><title>std::pair&lt;bool, std::shared_ptr&lt;ObjectUseData&gt; &gt;::~pair (1 samples, 0.15%)</title><rect x="48.9736%" y="453" width="0.1466%" height="15" fill="rgb(228,75,8)" fg:x="334" fg:w="1"/><text x="49.2236%" y="463.50"></text></g><g><title>std::shared_ptr&lt;ObjectUseData&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="48.9736%" y="437" width="0.1466%" height="15" fill="rgb(207,175,4)" fg:x="334" fg:w="1"/><text x="49.2236%" y="447.50"></text></g><g><title>std::__shared_ptr&lt;ObjectUseData, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="48.9736%" y="421" width="0.1466%" height="15" fill="rgb(205,108,24)" fg:x="334" fg:w="1"/><text x="49.2236%" y="431.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="48.9736%" y="405" width="0.1466%" height="15" fill="rgb(244,120,49)" fg:x="334" fg:w="1"/><text x="49.2236%" y="415.50"></text></g><g><title>ThreadSafety::PostCallRecordMapMemory (2 samples, 0.29%)</title><rect x="48.9736%" y="533" width="0.2933%" height="15" fill="rgb(223,47,38)" fg:x="334" fg:w="2"/><text x="49.2236%" y="543.50"></text></g><g><title>ThreadSafety::FinishReadObjectParentInstance (2 samples, 0.29%)</title><rect x="48.9736%" y="517" width="0.2933%" height="15" fill="rgb(229,179,11)" fg:x="334" fg:w="2"/><text x="49.2236%" y="527.50"></text></g><g><title>counter&lt;VkDevice_T*&gt;::FinishRead (2 samples, 0.29%)</title><rect x="48.9736%" y="501" width="0.2933%" height="15" fill="rgb(231,122,1)" fg:x="334" fg:w="2"/><text x="49.2236%" y="511.50"></text></g><g><title>std::shared_ptr&lt;ObjectUseData&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="49.1202%" y="485" width="0.1466%" height="15" fill="rgb(245,119,9)" fg:x="335" fg:w="1"/><text x="49.3702%" y="495.50"></text></g><g><title>std::__shared_ptr&lt;ObjectUseData, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="49.1202%" y="469" width="0.1466%" height="15" fill="rgb(241,163,25)" fg:x="335" fg:w="1"/><text x="49.3702%" y="479.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="49.1202%" y="453" width="0.1466%" height="15" fill="rgb(217,214,3)" fg:x="335" fg:w="1"/><text x="49.3702%" y="463.50"></text></g><g><title>ash::device::Device::map_memory (4 samples, 0.59%)</title><rect x="48.8270%" y="565" width="0.5865%" height="15" fill="rgb(240,86,28)" fg:x="333" fg:w="4"/><text x="49.0770%" y="575.50"></text></g><g><title>vulkan_layer_chassis::MapMemory (4 samples, 0.59%)</title><rect x="48.8270%" y="549" width="0.5865%" height="15" fill="rgb(215,47,9)" fg:x="333" fg:w="4"/><text x="49.0770%" y="559.50"></text></g><g><title>ValidationStateTracker::PostCallRecordMapMemory (1 samples, 0.15%)</title><rect x="49.2669%" y="533" width="0.1466%" height="15" fill="rgb(252,25,45)" fg:x="336" fg:w="1"/><text x="49.5169%" y="543.50"></text></g><g><title>ValidationStateTracker::RecordMappedMemory (1 samples, 0.15%)</title><rect x="49.2669%" y="517" width="0.1466%" height="15" fill="rgb(251,164,9)" fg:x="336" fg:w="1"/><text x="49.5169%" y="527.50"></text></g><g><title>std::shared_ptr&lt;DEVICE_MEMORY_STATE&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="49.2669%" y="501" width="0.1466%" height="15" fill="rgb(233,194,0)" fg:x="336" fg:w="1"/><text x="49.5169%" y="511.50"></text></g><g><title>std::__shared_ptr&lt;DEVICE_MEMORY_STATE, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="49.2669%" y="485" width="0.1466%" height="15" fill="rgb(249,111,24)" fg:x="336" fg:w="1"/><text x="49.5169%" y="495.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="49.2669%" y="469" width="0.1466%" height="15" fill="rgb(250,223,3)" fg:x="336" fg:w="1"/><text x="49.5169%" y="479.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="49.2669%" y="453" width="0.1466%" height="15" fill="rgb(236,178,37)" fg:x="336" fg:w="1"/><text x="49.5169%" y="463.50"></text></g><g><title>CoreChecks::PreCallValidateUnmapMemory (1 samples, 0.15%)</title><rect x="49.4135%" y="549" width="0.1466%" height="15" fill="rgb(241,158,50)" fg:x="337" fg:w="1"/><text x="49.6635%" y="559.50"></text></g><g><title>ValidationStateTracker::Get&lt;DEVICE_MEMORY_STATE, state_object::Traits&lt;DEVICE_MEMORY_STATE&gt; &gt; (1 samples, 0.15%)</title><rect x="49.4135%" y="533" width="0.1466%" height="15" fill="rgb(213,121,41)" fg:x="337" fg:w="1"/><text x="49.6635%" y="543.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkDeviceMemory_T*, std::shared_ptr&lt;DEVICE_MEMORY_STATE&gt;, 2, robin_hood::hash&lt;VkDeviceMemory_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="49.4135%" y="517" width="0.1466%" height="15" fill="rgb(240,92,3)" fg:x="337" fg:w="1"/><text x="49.6635%" y="527.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="49.4135%" y="501" width="0.1466%" height="15" fill="rgb(205,123,3)" fg:x="337" fg:w="1"/><text x="49.6635%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="49.4135%" y="485" width="0.1466%" height="15" fill="rgb(205,97,47)" fg:x="337" fg:w="1"/><text x="49.6635%" y="495.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="49.4135%" y="469" width="0.1466%" height="15" fill="rgb(247,152,14)" fg:x="337" fg:w="1"/><text x="49.6635%" y="479.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="49.4135%" y="453" width="0.1466%" height="15" fill="rgb(248,195,53)" fg:x="337" fg:w="1"/><text x="49.6635%" y="463.50"></text></g><g><title>ValidationStateTracker::Get&lt;DEVICE_MEMORY_STATE, state_object::Traits&lt;DEVICE_MEMORY_STATE&gt; &gt; (1 samples, 0.15%)</title><rect x="49.4135%" y="437" width="0.1466%" height="15" fill="rgb(226,201,16)" fg:x="337" fg:w="1"/><text x="49.6635%" y="447.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="49.4135%" y="421" width="0.1466%" height="15" fill="rgb(205,98,0)" fg:x="337" fg:w="1"/><text x="49.6635%" y="431.50"></text></g><g><title>hell_winit::window::Window::main_loop::{{closure}} (174 samples, 25.51%)</title><rect x="24.1935%" y="645" width="25.5132%" height="15" fill="rgb(214,191,48)" fg:x="165" fg:w="174"/><text x="24.4435%" y="655.50">hell_winit::window::Window::main_loop::{{..</text></g><g><title>hell_winit::window::Window::handle_redraw_request (172 samples, 25.22%)</title><rect x="24.4868%" y="629" width="25.2199%" height="15" fill="rgb(237,112,39)" fg:x="167" fg:w="172"/><text x="24.7368%" y="639.50">hell_winit::window::Window::handle_redra..</text></g><g><title>hell_app::app::HellApp::draw_frame (172 samples, 25.22%)</title><rect x="24.4868%" y="613" width="25.2199%" height="15" fill="rgb(247,203,27)" fg:x="167" fg:w="172"/><text x="24.7368%" y="623.50">hell_app::app::HellApp::draw_frame</text></g><g><title>hell_renderer::hell_renderer::HellRenderer::draw_frame (170 samples, 24.93%)</title><rect x="24.7801%" y="597" width="24.9267%" height="15" fill="rgb(235,124,28)" fg:x="169" fg:w="170"/><text x="25.0301%" y="607.50">hell_renderer::hell_renderer::HellRender..</text></g><g><title>hell_renderer::vulkan::vulkan_backend::VulkanBackend::update_scene_buffer (6 samples, 0.88%)</title><rect x="48.8270%" y="581" width="0.8798%" height="15" fill="rgb(208,207,46)" fg:x="333" fg:w="6"/><text x="49.0770%" y="591.50"></text></g><g><title>vulkan_layer_chassis::UnmapMemory (2 samples, 0.29%)</title><rect x="49.4135%" y="565" width="0.2933%" height="15" fill="rgb(234,176,4)" fg:x="337" fg:w="2"/><text x="49.6635%" y="575.50"></text></g><g><title>DispatchUnmapMemory (1 samples, 0.15%)</title><rect x="49.5601%" y="549" width="0.1466%" height="15" fill="rgb(230,133,28)" fg:x="338" fg:w="1"/><text x="49.8101%" y="559.50"></text></g><g><title>ValidationObject::Unwrap&lt;VkImage_T*&gt; (1 samples, 0.15%)</title><rect x="49.5601%" y="533" width="0.1466%" height="15" fill="rgb(211,137,40)" fg:x="338" fg:w="1"/><text x="49.8101%" y="543.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, unsigned long, 4, HashedUint64&gt;::find (1 samples, 0.15%)</title><rect x="49.5601%" y="517" width="0.1466%" height="15" fill="rgb(254,35,13)" fg:x="338" fg:w="1"/><text x="49.8101%" y="527.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="49.5601%" y="501" width="0.1466%" height="15" fill="rgb(225,49,51)" fg:x="338" fg:w="1"/><text x="49.8101%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="49.5601%" y="485" width="0.1466%" height="15" fill="rgb(251,10,15)" fg:x="338" fg:w="1"/><text x="49.8101%" y="495.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="49.5601%" y="469" width="0.1466%" height="15" fill="rgb(228,207,15)" fg:x="338" fg:w="1"/><text x="49.8101%" y="479.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="49.5601%" y="453" width="0.1466%" height="15" fill="rgb(241,99,19)" fg:x="338" fg:w="1"/><text x="49.8101%" y="463.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, unsigned long, 4, HashedUint64&gt;::find (1 samples, 0.15%)</title><rect x="49.5601%" y="437" width="0.1466%" height="15" fill="rgb(207,104,49)" fg:x="338" fg:w="1"/><text x="49.8101%" y="447.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="49.5601%" y="421" width="0.1466%" height="15" fill="rgb(234,99,18)" fg:x="338" fg:w="1"/><text x="49.8101%" y="431.50"></text></g><g><title>hell_winit::window::Window::main_loop (203 samples, 29.77%)</title><rect x="20.0880%" y="725" width="29.7654%" height="15" fill="rgb(213,191,49)" fg:x="137" fg:w="203"/><text x="20.3380%" y="735.50">hell_winit::window::Window::main_loop</text></g><g><title>winit::event_loop::EventLoop&lt;T&gt;::run (203 samples, 29.77%)</title><rect x="20.0880%" y="709" width="29.7654%" height="15" fill="rgb(210,226,19)" fg:x="137" fg:w="203"/><text x="20.3380%" y="719.50">winit::event_loop::EventLoop&lt;T&gt;::run</text></g><g><title>winit::platform_impl::platform::EventLoop&lt;T&gt;::run (203 samples, 29.77%)</title><rect x="20.0880%" y="693" width="29.7654%" height="15" fill="rgb(229,97,18)" fg:x="137" fg:w="203"/><text x="20.3380%" y="703.50">winit::platform_impl::platform::EventLoop&lt;T&gt;::run</text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run (203 samples, 29.77%)</title><rect x="20.0880%" y="677" width="29.7654%" height="15" fill="rgb(211,167,15)" fg:x="137" fg:w="203"/><text x="20.3380%" y="687.50">winit::platform_impl::platform::x11::EventLoop&lt;T..</text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run_return::single_iteration (181 samples, 26.54%)</title><rect x="23.3138%" y="661" width="26.5396%" height="15" fill="rgb(210,169,34)" fg:x="159" fg:w="181"/><text x="23.5638%" y="671.50">winit::platform_impl::platform::x11::Event..</text></g><g><title>std::sync::mpsc::Receiver&lt;T&gt;::try_recv (1 samples, 0.15%)</title><rect x="49.7067%" y="645" width="0.1466%" height="15" fill="rgb(241,121,31)" fg:x="339" fg:w="1"/><text x="49.9567%" y="655.50"></text></g><g><title>std::sync::mpsc::shared::Packet&lt;T&gt;::try_recv (1 samples, 0.15%)</title><rect x="49.7067%" y="629" width="0.1466%" height="15" fill="rgb(232,40,11)" fg:x="339" fg:w="1"/><text x="49.9567%" y="639.50"></text></g><g><title>hell_winit::window::Window::new (1 samples, 0.15%)</title><rect x="49.8534%" y="725" width="0.1466%" height="15" fill="rgb(205,86,26)" fg:x="340" fg:w="1"/><text x="50.1034%" y="735.50"></text></g><g><title>winit::platform_impl::platform::EventLoop&lt;T&gt;::new (1 samples, 0.15%)</title><rect x="49.8534%" y="709" width="0.1466%" height="15" fill="rgb(231,126,28)" fg:x="340" fg:w="1"/><text x="50.1034%" y="719.50"></text></g><g><title>winit::platform_impl::platform::EventLoop&lt;T&gt;::new_x11_any_thread (1 samples, 0.15%)</title><rect x="49.8534%" y="693" width="0.1466%" height="15" fill="rgb(219,221,18)" fg:x="340" fg:w="1"/><text x="50.1034%" y="703.50"></text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::new (1 samples, 0.15%)</title><rect x="49.8534%" y="677" width="0.1466%" height="15" fill="rgb(211,40,0)" fg:x="340" fg:w="1"/><text x="50.1034%" y="687.50"></text></g><g><title>XSupportsLocale (1 samples, 0.15%)</title><rect x="49.8534%" y="661" width="0.1466%" height="15" fill="rgb(239,85,43)" fg:x="340" fg:w="1"/><text x="50.1034%" y="671.50"></text></g><g><title>_XOpenLC (1 samples, 0.15%)</title><rect x="49.8534%" y="645" width="0.1466%" height="15" fill="rgb(231,55,21)" fg:x="340" fg:w="1"/><text x="50.1034%" y="655.50"></text></g><g><title>_XlcUtf8Loader (1 samples, 0.15%)</title><rect x="49.8534%" y="629" width="0.1466%" height="15" fill="rgb(225,184,43)" fg:x="340" fg:w="1"/><text x="50.1034%" y="639.50"></text></g><g><title>_XlcCreateLC (1 samples, 0.15%)</title><rect x="49.8534%" y="613" width="0.1466%" height="15" fill="rgb(251,158,41)" fg:x="340" fg:w="1"/><text x="50.1034%" y="623.50"></text></g><g><title>[libX11.so.6.4.0] (1 samples, 0.15%)</title><rect x="49.8534%" y="597" width="0.1466%" height="15" fill="rgb(234,159,37)" fg:x="340" fg:w="1"/><text x="50.1034%" y="607.50"></text></g><g><title>[libX11.so.6.4.0] (1 samples, 0.15%)</title><rect x="49.8534%" y="581" width="0.1466%" height="15" fill="rgb(216,204,22)" fg:x="340" fg:w="1"/><text x="50.1034%" y="591.50"></text></g><g><title>_XlcCreateLocaleDataBase (1 samples, 0.15%)</title><rect x="49.8534%" y="565" width="0.1466%" height="15" fill="rgb(214,17,3)" fg:x="340" fg:w="1"/><text x="50.1034%" y="575.50"></text></g><g><title>[libX11.so.6.4.0] (1 samples, 0.15%)</title><rect x="49.8534%" y="549" width="0.1466%" height="15" fill="rgb(212,111,17)" fg:x="340" fg:w="1"/><text x="50.1034%" y="559.50"></text></g><g><title>image::io::free_functions::open_impl (2 samples, 0.29%)</title><rect x="50.0000%" y="725" width="0.2933%" height="15" fill="rgb(221,157,24)" fg:x="341" fg:w="2"/><text x="50.2500%" y="735.50"></text></g><g><title>image::dynimage::DynamicImage::from_decoder (2 samples, 0.29%)</title><rect x="50.0000%" y="709" width="0.2933%" height="15" fill="rgb(252,16,13)" fg:x="341" fg:w="2"/><text x="50.2500%" y="719.50"></text></g><g><title>image::image::decoder_to_vec (2 samples, 0.29%)</title><rect x="50.0000%" y="693" width="0.2933%" height="15" fill="rgb(221,62,2)" fg:x="341" fg:w="2"/><text x="50.2500%" y="703.50"></text></g><g><title>&lt;image::codecs::png::PngDecoder&lt;R&gt; as image::image::ImageDecoder&gt;::read_image (2 samples, 0.29%)</title><rect x="50.0000%" y="677" width="0.2933%" height="15" fill="rgb(247,87,22)" fg:x="341" fg:w="2"/><text x="50.2500%" y="687.50"></text></g><g><title>png::decoder::Reader&lt;R&gt;::next_frame (2 samples, 0.29%)</title><rect x="50.0000%" y="661" width="0.2933%" height="15" fill="rgb(215,73,9)" fg:x="341" fg:w="2"/><text x="50.2500%" y="671.50"></text></g><g><title>png::decoder::Reader&lt;R&gt;::next_interlaced_row (2 samples, 0.29%)</title><rect x="50.0000%" y="645" width="0.2933%" height="15" fill="rgb(207,175,33)" fg:x="341" fg:w="2"/><text x="50.2500%" y="655.50"></text></g><g><title>png::decoder::Reader&lt;R&gt;::next_raw_interlaced_row (2 samples, 0.29%)</title><rect x="50.0000%" y="629" width="0.2933%" height="15" fill="rgb(243,129,54)" fg:x="341" fg:w="2"/><text x="50.2500%" y="639.50"></text></g><g><title>png::filter::unfilter (2 samples, 0.29%)</title><rect x="50.0000%" y="613" width="0.2933%" height="15" fill="rgb(227,119,45)" fg:x="341" fg:w="2"/><text x="50.2500%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.15%)</title><rect x="50.2933%" y="661" width="0.1466%" height="15" fill="rgb(205,109,36)" fg:x="343" fg:w="1"/><text x="50.5433%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.15%)</title><rect x="50.2933%" y="645" width="0.1466%" height="15" fill="rgb(205,6,39)" fg:x="343" fg:w="1"/><text x="50.5433%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.15%)</title><rect x="50.2933%" y="629" width="0.1466%" height="15" fill="rgb(221,32,16)" fg:x="343" fg:w="1"/><text x="50.5433%" y="639.50"></text></g><g><title>hell_renderer::vulkan::image::texture_image::TextureImage::from (1 samples, 0.15%)</title><rect x="50.2933%" y="613" width="0.1466%" height="15" fill="rgb(228,144,50)" fg:x="343" fg:w="1"/><text x="50.5433%" y="623.50"></text></g><g><title>hell_renderer::vulkan::image::raw_image::RawImage::transition_image_layout (1 samples, 0.15%)</title><rect x="50.2933%" y="597" width="0.1466%" height="15" fill="rgb(229,201,53)" fg:x="343" fg:w="1"/><text x="50.5433%" y="607.50"></text></g><g><title>hell_renderer::vulkan::command_buffer::VulkanCommandPool::end_single_time_commands (1 samples, 0.15%)</title><rect x="50.2933%" y="581" width="0.1466%" height="15" fill="rgb(249,153,27)" fg:x="343" fg:w="1"/><text x="50.5433%" y="591.50"></text></g><g><title>ash::device::Device::queue_wait_idle (1 samples, 0.15%)</title><rect x="50.2933%" y="565" width="0.1466%" height="15" fill="rgb(227,106,25)" fg:x="343" fg:w="1"/><text x="50.5433%" y="575.50"></text></g><g><title>vulkan_layer_chassis::QueueWaitIdle (1 samples, 0.15%)</title><rect x="50.2933%" y="549" width="0.1466%" height="15" fill="rgb(230,65,29)" fg:x="343" fg:w="1"/><text x="50.5433%" y="559.50"></text></g><g><title>ValidationStateTracker::PostCallRecordQueueWaitIdle (1 samples, 0.15%)</title><rect x="50.2933%" y="533" width="0.1466%" height="15" fill="rgb(221,57,46)" fg:x="343" fg:w="1"/><text x="50.5433%" y="543.50"></text></g><g><title>QUEUE_STATE::NotifyAndWait (1 samples, 0.15%)</title><rect x="50.2933%" y="517" width="0.1466%" height="15" fill="rgb(229,161,17)" fg:x="343" fg:w="1"/><text x="50.5433%" y="527.50"></text></g><g><title>QUEUE_STATE::Notify (1 samples, 0.15%)</title><rect x="50.2933%" y="501" width="0.1466%" height="15" fill="rgb(222,213,11)" fg:x="343" fg:w="1"/><text x="50.5433%" y="511.50"></text></g><g><title>std::condition_variable::notify_one (1 samples, 0.15%)</title><rect x="50.2933%" y="485" width="0.1466%" height="15" fill="rgb(235,35,13)" fg:x="343" fg:w="1"/><text x="50.5433%" y="495.50"></text></g><g><title>std::__condvar::notify_one (1 samples, 0.15%)</title><rect x="50.2933%" y="469" width="0.1466%" height="15" fill="rgb(233,158,34)" fg:x="343" fg:w="1"/><text x="50.5433%" y="479.50"></text></g><g><title>std::condition_variable::notify_one (1 samples, 0.15%)</title><rect x="50.2933%" y="453" width="0.1466%" height="15" fill="rgb(215,151,48)" fg:x="343" fg:w="1"/><text x="50.5433%" y="463.50"></text></g><g><title>pthread_cond_signal (1 samples, 0.15%)</title><rect x="50.2933%" y="437" width="0.1466%" height="15" fill="rgb(229,84,14)" fg:x="343" fg:w="1"/><text x="50.5433%" y="447.50"></text></g><g><title>hell_app::app::HellApp::init_game (2 samples, 0.29%)</title><rect x="50.2933%" y="709" width="0.2933%" height="15" fill="rgb(229,68,14)" fg:x="343" fg:w="2"/><text x="50.5433%" y="719.50"></text></g><g><title>hell_renderer::hell_renderer::HellRenderer::prepare_renderer (2 samples, 0.29%)</title><rect x="50.2933%" y="693" width="0.2933%" height="15" fill="rgb(243,106,26)" fg:x="343" fg:w="2"/><text x="50.5433%" y="703.50"></text></g><g><title>hell_renderer::vulkan::vulkan_backend::VulkanBackend::create_shaders (2 samples, 0.29%)</title><rect x="50.2933%" y="677" width="0.2933%" height="15" fill="rgb(206,45,38)" fg:x="343" fg:w="2"/><text x="50.5433%" y="687.50"></text></g><g><title>hell_renderer::vulkan::shader::sprite_shader::VulkanSpriteShader::new (1 samples, 0.15%)</title><rect x="50.4399%" y="661" width="0.1466%" height="15" fill="rgb(226,6,15)" fg:x="344" fg:w="1"/><text x="50.6899%" y="671.50"></text></g><g><title>hell_renderer::vulkan::pipeline::shader::VulkanShader::from_file (1 samples, 0.15%)</title><rect x="50.4399%" y="645" width="0.1466%" height="15" fill="rgb(232,22,54)" fg:x="344" fg:w="1"/><text x="50.6899%" y="655.50"></text></g><g><title>hell_renderer::vulkan::pipeline::shader::VulkanShaderModule::new (1 samples, 0.15%)</title><rect x="50.4399%" y="629" width="0.1466%" height="15" fill="rgb(229,222,32)" fg:x="344" fg:w="1"/><text x="50.6899%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.15%)</title><rect x="50.4399%" y="613" width="0.1466%" height="15" fill="rgb(228,62,29)" fg:x="344" fg:w="1"/><text x="50.6899%" y="623.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.15%)</title><rect x="50.4399%" y="597" width="0.1466%" height="15" fill="rgb(251,103,34)" fg:x="344" fg:w="1"/><text x="50.6899%" y="607.50"></text></g><g><title>nocoru::main (3 samples, 0.44%)</title><rect x="50.2933%" y="725" width="0.4399%" height="15" fill="rgb(233,12,30)" fg:x="343" fg:w="3"/><text x="50.5433%" y="735.50"></text></g><g><title>hell_winit::window::Window::main_loop (1 samples, 0.15%)</title><rect x="50.5865%" y="709" width="0.1466%" height="15" fill="rgb(238,52,0)" fg:x="345" fg:w="1"/><text x="50.8365%" y="719.50"></text></g><g><title>winit::event_loop::EventLoop&lt;T&gt;::run (1 samples, 0.15%)</title><rect x="50.5865%" y="693" width="0.1466%" height="15" fill="rgb(223,98,5)" fg:x="345" fg:w="1"/><text x="50.8365%" y="703.50"></text></g><g><title>winit::platform_impl::platform::EventLoop&lt;T&gt;::run (1 samples, 0.15%)</title><rect x="50.5865%" y="677" width="0.1466%" height="15" fill="rgb(228,75,37)" fg:x="345" fg:w="1"/><text x="50.8365%" y="687.50"></text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run (1 samples, 0.15%)</title><rect x="50.5865%" y="661" width="0.1466%" height="15" fill="rgb(205,115,49)" fg:x="345" fg:w="1"/><text x="50.8365%" y="671.50"></text></g><g><title>mio::poll::Poll::poll (1 samples, 0.15%)</title><rect x="50.5865%" y="645" width="0.1466%" height="15" fill="rgb(250,154,43)" fg:x="345" fg:w="1"/><text x="50.8365%" y="655.50"></text></g><g><title>png::decoder::stream::StreamingDecoder::update (1 samples, 0.15%)</title><rect x="50.7331%" y="725" width="0.1466%" height="15" fill="rgb(226,43,29)" fg:x="346" fg:w="1"/><text x="50.9831%" y="735.50"></text></g><g><title>png::decoder::zlib::ZlibStream::decompress (1 samples, 0.15%)</title><rect x="50.7331%" y="709" width="0.1466%" height="15" fill="rgb(249,228,39)" fg:x="346" fg:w="1"/><text x="50.9831%" y="719.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (1 samples, 0.15%)</title><rect x="50.7331%" y="693" width="0.1466%" height="15" fill="rgb(216,79,43)" fg:x="346" fg:w="1"/><text x="50.9831%" y="703.50"></text></g><g><title>adler::Adler32::write_slice (1 samples, 0.15%)</title><rect x="50.7331%" y="677" width="0.1466%" height="15" fill="rgb(228,95,12)" fg:x="346" fg:w="1"/><text x="50.9831%" y="687.50"></text></g><g><title>vulkan_layer_chassis::CreateGraphicsPipelines (1 samples, 0.15%)</title><rect x="50.8798%" y="725" width="0.1466%" height="15" fill="rgb(249,221,15)" fg:x="347" fg:w="1"/><text x="51.1298%" y="735.50"></text></g><g><title>DispatchCreateGraphicsPipelines (1 samples, 0.15%)</title><rect x="50.8798%" y="709" width="0.1466%" height="15" fill="rgb(233,34,13)" fg:x="347" fg:w="1"/><text x="51.1298%" y="719.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="50.8798%" y="693" width="0.1466%" height="15" fill="rgb(214,103,39)" fg:x="347" fg:w="1"/><text x="51.1298%" y="703.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="50.8798%" y="677" width="0.1466%" height="15" fill="rgb(251,126,39)" fg:x="347" fg:w="1"/><text x="51.1298%" y="687.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="50.8798%" y="661" width="0.1466%" height="15" fill="rgb(214,216,36)" fg:x="347" fg:w="1"/><text x="51.1298%" y="671.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="50.8798%" y="645" width="0.1466%" height="15" fill="rgb(220,221,8)" fg:x="347" fg:w="1"/><text x="51.1298%" y="655.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="50.8798%" y="629" width="0.1466%" height="15" fill="rgb(240,216,3)" fg:x="347" fg:w="1"/><text x="51.1298%" y="639.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="50.8798%" y="613" width="0.1466%" height="15" fill="rgb(232,218,17)" fg:x="347" fg:w="1"/><text x="51.1298%" y="623.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="50.8798%" y="597" width="0.1466%" height="15" fill="rgb(229,163,45)" fg:x="347" fg:w="1"/><text x="51.1298%" y="607.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="50.8798%" y="581" width="0.1466%" height="15" fill="rgb(231,110,42)" fg:x="347" fg:w="1"/><text x="51.1298%" y="591.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="50.8798%" y="565" width="0.1466%" height="15" fill="rgb(208,170,48)" fg:x="347" fg:w="1"/><text x="51.1298%" y="575.50"></text></g><g><title>_nv002nvvm (1 samples, 0.15%)</title><rect x="50.8798%" y="549" width="0.1466%" height="15" fill="rgb(239,116,25)" fg:x="347" fg:w="1"/><text x="51.1298%" y="559.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="50.8798%" y="533" width="0.1466%" height="15" fill="rgb(219,200,50)" fg:x="347" fg:w="1"/><text x="51.1298%" y="543.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="50.8798%" y="517" width="0.1466%" height="15" fill="rgb(245,200,0)" fg:x="347" fg:w="1"/><text x="51.1298%" y="527.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="50.8798%" y="501" width="0.1466%" height="15" fill="rgb(245,119,33)" fg:x="347" fg:w="1"/><text x="51.1298%" y="511.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="50.8798%" y="485" width="0.1466%" height="15" fill="rgb(231,125,12)" fg:x="347" fg:w="1"/><text x="51.1298%" y="495.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="50.8798%" y="469" width="0.1466%" height="15" fill="rgb(216,96,41)" fg:x="347" fg:w="1"/><text x="51.1298%" y="479.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="50.8798%" y="453" width="0.1466%" height="15" fill="rgb(248,43,45)" fg:x="347" fg:w="1"/><text x="51.1298%" y="463.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="50.8798%" y="437" width="0.1466%" height="15" fill="rgb(217,222,7)" fg:x="347" fg:w="1"/><text x="51.1298%" y="447.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="50.8798%" y="421" width="0.1466%" height="15" fill="rgb(233,28,6)" fg:x="347" fg:w="1"/><text x="51.1298%" y="431.50"></text></g><g><title>[libnvidia-glvkspirv.so.525.60.11] (1 samples, 0.15%)</title><rect x="50.8798%" y="405" width="0.1466%" height="15" fill="rgb(231,218,15)" fg:x="347" fg:w="1"/><text x="51.1298%" y="415.50"></text></g><g><title>CoreChecks::ValidateCmd (1 samples, 0.15%)</title><rect x="51.0264%" y="533" width="0.1466%" height="15" fill="rgb(226,171,48)" fg:x="348" fg:w="1"/><text x="51.2764%" y="543.50"></text></g><g><title>ValidationStateTracker::Get&lt;cvdescriptorset::DescriptorSet, state_object::Traits&lt;cvdescriptorset::DescriptorSet&gt; &gt; (1 samples, 0.15%)</title><rect x="51.1730%" y="533" width="0.1466%" height="15" fill="rgb(235,201,9)" fg:x="349" fg:w="1"/><text x="51.4230%" y="543.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkDescriptorSet_T*, std::shared_ptr&lt;cvdescriptorset::DescriptorSet&gt;, 2, robin_hood::hash&lt;VkDescriptorSet_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="51.1730%" y="517" width="0.1466%" height="15" fill="rgb(217,80,15)" fg:x="349" fg:w="1"/><text x="51.4230%" y="527.50"></text></g><g><title>std::shared_ptr&lt;cvdescriptorset::DescriptorSet&gt;::shared_ptr (1 samples, 0.15%)</title><rect x="51.1730%" y="501" width="0.1466%" height="15" fill="rgb(219,152,8)" fg:x="349" fg:w="1"/><text x="51.4230%" y="511.50"></text></g><g><title>std::__shared_ptr&lt;cvdescriptorset::DescriptorSet, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr (1 samples, 0.15%)</title><rect x="51.1730%" y="485" width="0.1466%" height="15" fill="rgb(243,107,38)" fg:x="349" fg:w="1"/><text x="51.4230%" y="495.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count (1 samples, 0.15%)</title><rect x="51.1730%" y="469" width="0.1466%" height="15" fill="rgb(231,17,5)" fg:x="349" fg:w="1"/><text x="51.4230%" y="479.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_add_ref_copy (1 samples, 0.15%)</title><rect x="51.1730%" y="453" width="0.1466%" height="15" fill="rgb(209,25,54)" fg:x="349" fg:w="1"/><text x="51.4230%" y="463.50"></text></g><g><title>__gnu_cxx::__atomic_add_dispatch (1 samples, 0.15%)</title><rect x="51.1730%" y="437" width="0.1466%" height="15" fill="rgb(219,0,2)" fg:x="349" fg:w="1"/><text x="51.4230%" y="447.50"></text></g><g><title>__gnu_cxx::__atomic_add (1 samples, 0.15%)</title><rect x="51.1730%" y="421" width="0.1466%" height="15" fill="rgb(246,9,5)" fg:x="349" fg:w="1"/><text x="51.4230%" y="431.50"></text></g><g><title>CoreChecks::PreCallValidateCmdBindDescriptorSets (4 samples, 0.59%)</title><rect x="51.0264%" y="549" width="0.5865%" height="15" fill="rgb(226,159,4)" fg:x="348" fg:w="4"/><text x="51.2764%" y="559.50"></text></g><g><title>ValidationStateTracker::GetRead&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt;, LockedSharedPtr&lt;CMD_BUFFER_STATE const, std::unique_lock&lt;ReadWriteLock&gt; &gt; &gt; (2 samples, 0.29%)</title><rect x="51.3196%" y="533" width="0.2933%" height="15" fill="rgb(219,175,34)" fg:x="350" fg:w="2"/><text x="51.5696%" y="543.50"></text></g><g><title>ValidationStateTracker::Get&lt;CMD_BUFFER_STATE, state_object::Traits&lt;CMD_BUFFER_STATE&gt; &gt; (2 samples, 0.29%)</title><rect x="51.3196%" y="517" width="0.2933%" height="15" fill="rgb(236,10,46)" fg:x="350" fg:w="2"/><text x="51.5696%" y="527.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandBuffer_T*, std::shared_ptr&lt;CMD_BUFFER_STATE&gt;, 2, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt; &gt;::find (2 samples, 0.29%)</title><rect x="51.3196%" y="501" width="0.2933%" height="15" fill="rgb(240,211,16)" fg:x="350" fg:w="2"/><text x="51.5696%" y="511.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkCommandBuffer_T*, std::shared_ptr&lt;CMD_BUFFER_STATE&gt;, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt;, std::equal_to&lt;VkCommandBuffer_T*&gt; &gt;::find (1 samples, 0.15%)</title><rect x="51.4663%" y="485" width="0.1466%" height="15" fill="rgb(205,3,43)" fg:x="351" fg:w="1"/><text x="51.7163%" y="495.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkImageView_T*, std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, robin_hood::hash&lt;VkImageView_T*, void&gt;, std::equal_to&lt;VkImageView_T*&gt; &gt;::findIdx&lt;VkImageView_T*&gt; (1 samples, 0.15%)</title><rect x="51.4663%" y="469" width="0.1466%" height="15" fill="rgb(245,7,22)" fg:x="351" fg:w="1"/><text x="51.7163%" y="479.50"></text></g><g><title>ValidationObject::Unwrap&lt;VkImage_T*&gt; (1 samples, 0.15%)</title><rect x="51.6129%" y="533" width="0.1466%" height="15" fill="rgb(239,132,32)" fg:x="352" fg:w="1"/><text x="51.8629%" y="543.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, unsigned long, 4, HashedUint64&gt;::find (1 samples, 0.15%)</title><rect x="51.6129%" y="517" width="0.1466%" height="15" fill="rgb(228,202,34)" fg:x="352" fg:w="1"/><text x="51.8629%" y="527.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="51.6129%" y="501" width="0.1466%" height="15" fill="rgb(254,200,22)" fg:x="352" fg:w="1"/><text x="51.8629%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="51.6129%" y="485" width="0.1466%" height="15" fill="rgb(219,10,39)" fg:x="352" fg:w="1"/><text x="51.8629%" y="495.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="51.6129%" y="469" width="0.1466%" height="15" fill="rgb(226,210,39)" fg:x="352" fg:w="1"/><text x="51.8629%" y="479.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="51.6129%" y="453" width="0.1466%" height="15" fill="rgb(208,219,16)" fg:x="352" fg:w="1"/><text x="51.8629%" y="463.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, unsigned long, 4, HashedUint64&gt;::find (1 samples, 0.15%)</title><rect x="51.6129%" y="437" width="0.1466%" height="15" fill="rgb(216,158,51)" fg:x="352" fg:w="1"/><text x="51.8629%" y="447.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="51.6129%" y="421" width="0.1466%" height="15" fill="rgb(233,14,44)" fg:x="352" fg:w="1"/><text x="51.8629%" y="431.50"></text></g><g><title>DispatchCmdBindDescriptorSets (7 samples, 1.03%)</title><rect x="51.6129%" y="549" width="1.0264%" height="15" fill="rgb(237,97,39)" fg:x="352" fg:w="7"/><text x="51.8629%" y="559.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (6 samples, 0.88%)</title><rect x="51.7595%" y="533" width="0.8798%" height="15" fill="rgb(218,198,43)" fg:x="353" fg:w="6"/><text x="52.0095%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (4 samples, 0.59%)</title><rect x="52.0528%" y="517" width="0.5865%" height="15" fill="rgb(231,104,20)" fg:x="355" fg:w="4"/><text x="52.3028%" y="527.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="52.4927%" y="501" width="0.1466%" height="15" fill="rgb(254,36,13)" fg:x="358" fg:w="1"/><text x="52.7427%" y="511.50"></text></g><g><title>malloc (1 samples, 0.15%)</title><rect x="52.4927%" y="485" width="0.1466%" height="15" fill="rgb(248,14,50)" fg:x="358" fg:w="1"/><text x="52.7427%" y="495.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="52.4927%" y="469" width="0.1466%" height="15" fill="rgb(217,107,29)" fg:x="358" fg:w="1"/><text x="52.7427%" y="479.50"></text></g><g><title>StatelessValidation::PreCallValidateCmdBindDescriptorSets (1 samples, 0.15%)</title><rect x="52.6393%" y="549" width="0.1466%" height="15" fill="rgb(251,169,33)" fg:x="359" fg:w="1"/><text x="52.8893%" y="559.50"></text></g><g><title>StatelessValidation::validate_ranged_enum&lt;VkPipelineBindPoint&gt; (1 samples, 0.15%)</title><rect x="52.6393%" y="533" width="0.1466%" height="15" fill="rgb(217,108,32)" fg:x="359" fg:w="1"/><text x="52.8893%" y="543.50"></text></g><g><title>std::vector&lt;VkPipelineBindPoint, std::allocator&lt;VkPipelineBindPoint&gt; &gt;::end (1 samples, 0.15%)</title><rect x="52.6393%" y="517" width="0.1466%" height="15" fill="rgb(219,66,42)" fg:x="359" fg:w="1"/><text x="52.8893%" y="527.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;VkPipelineBindPoint const*, std::vector&lt;VkPipelineBindPoint, std::allocator&lt;VkPipelineBindPoint&gt; &gt; &gt;::__normal_iterator (1 samples, 0.15%)</title><rect x="52.6393%" y="501" width="0.1466%" height="15" fill="rgb(206,180,7)" fg:x="359" fg:w="1"/><text x="52.8893%" y="511.50"></text></g><g><title>ThreadSafety::PreCallRecordCmdBindDescriptorSets (2 samples, 0.29%)</title><rect x="52.7859%" y="533" width="0.2933%" height="15" fill="rgb(208,226,31)" fg:x="360" fg:w="2"/><text x="53.0359%" y="543.50"></text></g><g><title>ThreadSafety::StartReadObject (2 samples, 0.29%)</title><rect x="52.7859%" y="517" width="0.2933%" height="15" fill="rgb(218,26,49)" fg:x="360" fg:w="2"/><text x="53.0359%" y="527.50"></text></g><g><title>counter&lt;VkDescriptorSet_T*&gt;::StartRead (2 samples, 0.29%)</title><rect x="52.7859%" y="501" width="0.2933%" height="15" fill="rgb(233,197,48)" fg:x="360" fg:w="2"/><text x="53.0359%" y="511.50"></text></g><g><title>counter&lt;VkDescriptorSet_T*&gt;::FindObject (2 samples, 0.29%)</title><rect x="52.7859%" y="485" width="0.2933%" height="15" fill="rgb(252,181,51)" fg:x="360" fg:w="2"/><text x="53.0359%" y="495.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkDescriptorSet_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkDescriptorSet_T*, void&gt; &gt;::FindResult::~FindResult (2 samples, 0.29%)</title><rect x="52.7859%" y="469" width="0.2933%" height="15" fill="rgb(253,90,19)" fg:x="360" fg:w="2"/><text x="53.0359%" y="479.50"></text></g><g><title>std::pair&lt;bool, std::shared_ptr&lt;ObjectUseData&gt; &gt;::~pair (2 samples, 0.29%)</title><rect x="52.7859%" y="453" width="0.2933%" height="15" fill="rgb(215,171,30)" fg:x="360" fg:w="2"/><text x="53.0359%" y="463.50"></text></g><g><title>std::shared_ptr&lt;ObjectUseData&gt;::~shared_ptr (2 samples, 0.29%)</title><rect x="52.7859%" y="437" width="0.2933%" height="15" fill="rgb(214,222,9)" fg:x="360" fg:w="2"/><text x="53.0359%" y="447.50"></text></g><g><title>std::__shared_ptr&lt;ObjectUseData, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (2 samples, 0.29%)</title><rect x="52.7859%" y="421" width="0.2933%" height="15" fill="rgb(223,3,22)" fg:x="360" fg:w="2"/><text x="53.0359%" y="431.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (2 samples, 0.29%)</title><rect x="52.7859%" y="405" width="0.2933%" height="15" fill="rgb(225,196,46)" fg:x="360" fg:w="2"/><text x="53.0359%" y="415.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="52.9326%" y="389" width="0.1466%" height="15" fill="rgb(209,110,37)" fg:x="361" fg:w="1"/><text x="53.1826%" y="399.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkPipelineLayout_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkPipelineLayout_T*, void&gt; &gt;::FindResult::~FindResult (1 samples, 0.15%)</title><rect x="53.0792%" y="485" width="0.1466%" height="15" fill="rgb(249,89,12)" fg:x="362" fg:w="1"/><text x="53.3292%" y="495.50"></text></g><g><title>std::pair&lt;bool, std::shared_ptr&lt;ObjectUseData&gt; &gt;::~pair (1 samples, 0.15%)</title><rect x="53.0792%" y="469" width="0.1466%" height="15" fill="rgb(226,27,33)" fg:x="362" fg:w="1"/><text x="53.3292%" y="479.50"></text></g><g><title>std::shared_ptr&lt;ObjectUseData&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="53.0792%" y="453" width="0.1466%" height="15" fill="rgb(213,82,22)" fg:x="362" fg:w="1"/><text x="53.3292%" y="463.50"></text></g><g><title>std::__shared_ptr&lt;ObjectUseData, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="53.0792%" y="437" width="0.1466%" height="15" fill="rgb(248,140,0)" fg:x="362" fg:w="1"/><text x="53.3292%" y="447.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="53.0792%" y="421" width="0.1466%" height="15" fill="rgb(228,106,3)" fg:x="362" fg:w="1"/><text x="53.3292%" y="431.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="53.0792%" y="405" width="0.1466%" height="15" fill="rgb(209,23,37)" fg:x="362" fg:w="1"/><text x="53.3292%" y="415.50"></text></g><g><title>ash::device::Device::cmd_bind_descriptor_sets (16 samples, 2.35%)</title><rect x="51.0264%" y="581" width="2.3460%" height="15" fill="rgb(241,93,50)" fg:x="348" fg:w="16"/><text x="51.2764%" y="591.50">a..</text></g><g><title>vulkan_layer_chassis::CmdBindDescriptorSets (16 samples, 2.35%)</title><rect x="51.0264%" y="565" width="2.3460%" height="15" fill="rgb(253,46,43)" fg:x="348" fg:w="16"/><text x="51.2764%" y="575.50">v..</text></g><g><title>ThreadSafety::PreCallRecordCmdBindDescriptorSets (4 samples, 0.59%)</title><rect x="52.7859%" y="549" width="0.5865%" height="15" fill="rgb(226,206,43)" fg:x="360" fg:w="4"/><text x="53.0359%" y="559.50"></text></g><g><title>ThreadSafety::StartReadObject (2 samples, 0.29%)</title><rect x="53.0792%" y="533" width="0.2933%" height="15" fill="rgb(217,54,7)" fg:x="362" fg:w="2"/><text x="53.3292%" y="543.50"></text></g><g><title>counter&lt;VkPipelineLayout_T*&gt;::StartRead (2 samples, 0.29%)</title><rect x="53.0792%" y="517" width="0.2933%" height="15" fill="rgb(223,5,52)" fg:x="362" fg:w="2"/><text x="53.3292%" y="527.50"></text></g><g><title>counter&lt;VkPipelineLayout_T*&gt;::FindObject (2 samples, 0.29%)</title><rect x="53.0792%" y="501" width="0.2933%" height="15" fill="rgb(206,52,46)" fg:x="362" fg:w="2"/><text x="53.3292%" y="511.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkPipelineLayout_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkPipelineLayout_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="53.2258%" y="485" width="0.1466%" height="15" fill="rgb(253,136,11)" fg:x="363" fg:w="1"/><text x="53.4758%" y="495.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="53.2258%" y="469" width="0.1466%" height="15" fill="rgb(208,106,33)" fg:x="363" fg:w="1"/><text x="53.4758%" y="479.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="53.2258%" y="453" width="0.1466%" height="15" fill="rgb(206,54,4)" fg:x="363" fg:w="1"/><text x="53.4758%" y="463.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="53.2258%" y="437" width="0.1466%" height="15" fill="rgb(213,3,15)" fg:x="363" fg:w="1"/><text x="53.4758%" y="447.50"></text></g><g><title>counter&lt;VkPipelineLayout_T*&gt;::FindObject (1 samples, 0.15%)</title><rect x="53.2258%" y="421" width="0.1466%" height="15" fill="rgb(252,211,39)" fg:x="363" fg:w="1"/><text x="53.4758%" y="431.50"></text></g><g><title>DispatchResetCommandBuffer (3 samples, 0.44%)</title><rect x="53.3724%" y="533" width="0.4399%" height="15" fill="rgb(223,6,36)" fg:x="364" fg:w="3"/><text x="53.6224%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (3 samples, 0.44%)</title><rect x="53.3724%" y="517" width="0.4399%" height="15" fill="rgb(252,169,45)" fg:x="364" fg:w="3"/><text x="53.6224%" y="527.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (3 samples, 0.44%)</title><rect x="53.3724%" y="501" width="0.4399%" height="15" fill="rgb(212,48,26)" fg:x="364" fg:w="3"/><text x="53.6224%" y="511.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (3 samples, 0.44%)</title><rect x="53.3724%" y="485" width="0.4399%" height="15" fill="rgb(251,102,48)" fg:x="364" fg:w="3"/><text x="53.6224%" y="495.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (3 samples, 0.44%)</title><rect x="53.3724%" y="469" width="0.4399%" height="15" fill="rgb(243,208,16)" fg:x="364" fg:w="3"/><text x="53.6224%" y="479.50"></text></g><g><title>malloc (3 samples, 0.44%)</title><rect x="53.3724%" y="453" width="0.4399%" height="15" fill="rgb(219,96,24)" fg:x="364" fg:w="3"/><text x="53.6224%" y="463.50"></text></g><g><title>[libc.so.6] (3 samples, 0.44%)</title><rect x="53.3724%" y="437" width="0.4399%" height="15" fill="rgb(219,33,29)" fg:x="364" fg:w="3"/><text x="53.6224%" y="447.50"></text></g><g><title>[libc.so.6] (3 samples, 0.44%)</title><rect x="53.3724%" y="421" width="0.4399%" height="15" fill="rgb(223,176,5)" fg:x="364" fg:w="3"/><text x="53.6224%" y="431.50"></text></g><g><title>BASE_NODE::RemoveParent (1 samples, 0.15%)</title><rect x="53.8123%" y="501" width="0.1466%" height="15" fill="rgb(228,140,14)" fg:x="367" fg:w="1"/><text x="54.0623%" y="511.50"></text></g><g><title>hell_renderer::vulkan::command_buffer::VulkanCommandPool::reset_cmd_buffer (5 samples, 0.73%)</title><rect x="53.3724%" y="581" width="0.7331%" height="15" fill="rgb(217,179,31)" fg:x="364" fg:w="5"/><text x="53.6224%" y="591.50"></text></g><g><title>ash::device::Device::reset_command_buffer (5 samples, 0.73%)</title><rect x="53.3724%" y="565" width="0.7331%" height="15" fill="rgb(230,9,30)" fg:x="364" fg:w="5"/><text x="53.6224%" y="575.50"></text></g><g><title>vulkan_layer_chassis::ResetCommandBuffer (5 samples, 0.73%)</title><rect x="53.3724%" y="549" width="0.7331%" height="15" fill="rgb(230,136,20)" fg:x="364" fg:w="5"/><text x="53.6224%" y="559.50"></text></g><g><title>ValidationStateTracker::PostCallRecordResetCommandBuffer (2 samples, 0.29%)</title><rect x="53.8123%" y="533" width="0.2933%" height="15" fill="rgb(215,210,22)" fg:x="367" fg:w="2"/><text x="54.0623%" y="543.50"></text></g><g><title>CMD_BUFFER_STATE::Reset (2 samples, 0.29%)</title><rect x="53.8123%" y="517" width="0.2933%" height="15" fill="rgb(218,43,5)" fg:x="367" fg:w="2"/><text x="54.0623%" y="527.50"></text></g><g><title>std::set&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, std::less&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt; &gt;::clear (1 samples, 0.15%)</title><rect x="53.9589%" y="501" width="0.1466%" height="15" fill="rgb(216,11,5)" fg:x="368" fg:w="1"/><text x="54.2089%" y="511.50"></text></g><g><title>std::_Rb_tree&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, std::_Identity&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt;, std::less&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt; &gt;::clear (1 samples, 0.15%)</title><rect x="53.9589%" y="485" width="0.1466%" height="15" fill="rgb(209,82,29)" fg:x="368" fg:w="1"/><text x="54.2089%" y="495.50"></text></g><g><title>std::_Rb_tree&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, std::_Identity&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt;, std::less&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt; &gt;::_M_erase (1 samples, 0.15%)</title><rect x="53.9589%" y="469" width="0.1466%" height="15" fill="rgb(244,115,12)" fg:x="368" fg:w="1"/><text x="54.2089%" y="479.50"></text></g><g><title>std::_Rb_tree&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, std::_Identity&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt;, std::less&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt; &gt;::_M_drop_node (1 samples, 0.15%)</title><rect x="53.9589%" y="453" width="0.1466%" height="15" fill="rgb(222,82,18)" fg:x="368" fg:w="1"/><text x="54.2089%" y="463.50"></text></g><g><title>std::_Rb_tree&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, std::_Identity&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt;, std::less&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt; &gt;::_M_put_node (1 samples, 0.15%)</title><rect x="53.9589%" y="437" width="0.1466%" height="15" fill="rgb(249,227,8)" fg:x="368" fg:w="1"/><text x="54.2089%" y="447.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt; &gt; &gt;::deallocate (1 samples, 0.15%)</title><rect x="53.9589%" y="421" width="0.1466%" height="15" fill="rgb(253,141,45)" fg:x="368" fg:w="1"/><text x="54.2089%" y="431.50"></text></g><g><title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt; &gt;::deallocate (1 samples, 0.15%)</title><rect x="53.9589%" y="405" width="0.1466%" height="15" fill="rgb(234,184,4)" fg:x="368" fg:w="1"/><text x="54.2089%" y="415.50"></text></g><g><title>CoreChecks::PreCallValidateQueuePresentKHR (1 samples, 0.15%)</title><rect x="54.1056%" y="533" width="0.1466%" height="15" fill="rgb(218,194,23)" fg:x="369" fg:w="1"/><text x="54.3556%" y="543.50"></text></g><g><title>CoreChecks::FindLayouts (1 samples, 0.15%)</title><rect x="54.1056%" y="517" width="0.1466%" height="15" fill="rgb(235,66,41)" fg:x="369" fg:w="1"/><text x="54.3556%" y="527.50"></text></g><g><title>std::vector&lt;VkImageLayout, std::allocator&lt;VkImageLayout&gt; &gt;::push_back (1 samples, 0.15%)</title><rect x="54.1056%" y="501" width="0.1466%" height="15" fill="rgb(245,217,1)" fg:x="369" fg:w="1"/><text x="54.3556%" y="511.50"></text></g><g><title>std::vector&lt;VkImageLayout, std::allocator&lt;VkImageLayout&gt; &gt;::_M_realloc_insert&lt;VkImageLayout const&amp;&gt; (1 samples, 0.15%)</title><rect x="54.1056%" y="485" width="0.1466%" height="15" fill="rgb(229,91,1)" fg:x="369" fg:w="1"/><text x="54.3556%" y="495.50"></text></g><g><title>std::_Vector_base&lt;VkImageLayout, std::allocator&lt;VkImageLayout&gt; &gt;::_M_allocate (1 samples, 0.15%)</title><rect x="54.1056%" y="469" width="0.1466%" height="15" fill="rgb(207,101,30)" fg:x="369" fg:w="1"/><text x="54.3556%" y="479.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;VkImageLayout&gt; &gt;::allocate (1 samples, 0.15%)</title><rect x="54.1056%" y="453" width="0.1466%" height="15" fill="rgb(223,82,49)" fg:x="369" fg:w="1"/><text x="54.3556%" y="463.50"></text></g><g><title>std::__new_allocator&lt;unsigned int&gt;::allocate (1 samples, 0.15%)</title><rect x="54.1056%" y="437" width="0.1466%" height="15" fill="rgb(218,167,17)" fg:x="369" fg:w="1"/><text x="54.3556%" y="447.50"></text></g><g><title>operator new (1 samples, 0.15%)</title><rect x="54.1056%" y="421" width="0.1466%" height="15" fill="rgb(208,103,14)" fg:x="369" fg:w="1"/><text x="54.3556%" y="431.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (1 samples, 0.15%)</title><rect x="54.2522%" y="421" width="0.1466%" height="15" fill="rgb(238,20,8)" fg:x="370" fg:w="1"/><text x="54.5022%" y="431.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="54.8387%" y="373" width="0.2933%" height="15" fill="rgb(218,80,54)" fg:x="374" fg:w="2"/><text x="55.0887%" y="383.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (3 samples, 0.44%)</title><rect x="54.8387%" y="389" width="0.4399%" height="15" fill="rgb(240,144,17)" fg:x="374" fg:w="3"/><text x="55.0887%" y="399.50"></text></g><g><title>clock_gettime (1 samples, 0.15%)</title><rect x="55.1320%" y="373" width="0.1466%" height="15" fill="rgb(245,27,50)" fg:x="376" fg:w="1"/><text x="55.3820%" y="383.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.15%)</title><rect x="55.1320%" y="357" width="0.1466%" height="15" fill="rgb(251,51,7)" fg:x="376" fg:w="1"/><text x="55.3820%" y="367.50"></text></g><g><title>[[vdso]] (1 samples, 0.15%)</title><rect x="55.1320%" y="341" width="0.1466%" height="15" fill="rgb(245,217,29)" fg:x="376" fg:w="1"/><text x="55.3820%" y="351.50"></text></g><g><title>DispatchQueuePresentKHR (8 samples, 1.17%)</title><rect x="54.2522%" y="533" width="1.1730%" height="15" fill="rgb(221,176,29)" fg:x="370" fg:w="8"/><text x="54.5022%" y="543.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (8 samples, 1.17%)</title><rect x="54.2522%" y="517" width="1.1730%" height="15" fill="rgb(212,180,24)" fg:x="370" fg:w="8"/><text x="54.5022%" y="527.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (8 samples, 1.17%)</title><rect x="54.2522%" y="501" width="1.1730%" height="15" fill="rgb(254,24,2)" fg:x="370" fg:w="8"/><text x="54.5022%" y="511.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (8 samples, 1.17%)</title><rect x="54.2522%" y="485" width="1.1730%" height="15" fill="rgb(230,100,2)" fg:x="370" fg:w="8"/><text x="54.5022%" y="495.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (8 samples, 1.17%)</title><rect x="54.2522%" y="469" width="1.1730%" height="15" fill="rgb(219,142,25)" fg:x="370" fg:w="8"/><text x="54.5022%" y="479.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (8 samples, 1.17%)</title><rect x="54.2522%" y="453" width="1.1730%" height="15" fill="rgb(240,73,43)" fg:x="370" fg:w="8"/><text x="54.5022%" y="463.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (8 samples, 1.17%)</title><rect x="54.2522%" y="437" width="1.1730%" height="15" fill="rgb(214,114,15)" fg:x="370" fg:w="8"/><text x="54.5022%" y="447.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (7 samples, 1.03%)</title><rect x="54.3988%" y="421" width="1.0264%" height="15" fill="rgb(207,130,4)" fg:x="371" fg:w="7"/><text x="54.6488%" y="431.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (6 samples, 0.88%)</title><rect x="54.5455%" y="405" width="0.8798%" height="15" fill="rgb(221,25,40)" fg:x="372" fg:w="6"/><text x="54.7955%" y="415.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="55.2786%" y="389" width="0.1466%" height="15" fill="rgb(241,184,7)" fg:x="377" fg:w="1"/><text x="55.5286%" y="399.50"></text></g><g><title>StatelessValidation::PreCallValidateQueuePresentKHR (2 samples, 0.29%)</title><rect x="55.4252%" y="533" width="0.2933%" height="15" fill="rgb(235,159,4)" fg:x="378" fg:w="2"/><text x="55.6752%" y="543.50"></text></g><g><title>StatelessValidation::validate_struct_type&lt;VkAttachmentReference2&gt; (1 samples, 0.15%)</title><rect x="55.5718%" y="517" width="0.1466%" height="15" fill="rgb(214,87,48)" fg:x="379" fg:w="1"/><text x="55.8218%" y="527.50"></text></g><g><title>SEMAPHORE_STATE::SemOpEntry::SemOpEntry (1 samples, 0.15%)</title><rect x="55.7185%" y="485" width="0.1466%" height="15" fill="rgb(246,198,24)" fg:x="380" fg:w="1"/><text x="55.9685%" y="495.50"></text></g><g><title>std::promise&lt;void&gt;::promise (1 samples, 0.15%)</title><rect x="55.7185%" y="469" width="0.1466%" height="15" fill="rgb(209,66,40)" fg:x="380" fg:w="1"/><text x="55.9685%" y="479.50"></text></g><g><title>std::make_shared&lt;std::__future_base::_State_baseV2&gt; (1 samples, 0.15%)</title><rect x="55.7185%" y="453" width="0.1466%" height="15" fill="rgb(233,147,39)" fg:x="380" fg:w="1"/><text x="55.9685%" y="463.50"></text></g><g><title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::shared_ptr&lt;std::allocator&lt;void&gt;&gt; (1 samples, 0.15%)</title><rect x="55.7185%" y="437" width="0.1466%" height="15" fill="rgb(231,145,52)" fg:x="380" fg:w="1"/><text x="55.9685%" y="447.50"></text></g><g><title>std::__shared_ptr&lt;std::__future_base::_State_baseV2, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;&gt; (1 samples, 0.15%)</title><rect x="55.7185%" y="421" width="0.1466%" height="15" fill="rgb(206,20,26)" fg:x="380" fg:w="1"/><text x="55.9685%" y="431.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;std::__future_base::_State_baseV2, std::allocator&lt;void&gt;&gt; (1 samples, 0.15%)</title><rect x="55.7185%" y="405" width="0.1466%" height="15" fill="rgb(238,220,4)" fg:x="380" fg:w="1"/><text x="55.9685%" y="415.50"></text></g><g><title>std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; (1 samples, 0.15%)</title><rect x="55.7185%" y="389" width="0.1466%" height="15" fill="rgb(252,195,42)" fg:x="380" fg:w="1"/><text x="55.9685%" y="399.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::allocate (1 samples, 0.15%)</title><rect x="55.7185%" y="373" width="0.1466%" height="15" fill="rgb(209,10,6)" fg:x="380" fg:w="1"/><text x="55.9685%" y="383.50"></text></g><g><title>std::__new_allocator&lt;LoggingLabel&gt;::allocate (1 samples, 0.15%)</title><rect x="55.7185%" y="357" width="0.1466%" height="15" fill="rgb(229,3,52)" fg:x="380" fg:w="1"/><text x="55.9685%" y="367.50"></text></g><g><title>operator new (1 samples, 0.15%)</title><rect x="55.7185%" y="341" width="0.1466%" height="15" fill="rgb(253,49,37)" fg:x="380" fg:w="1"/><text x="55.9685%" y="351.50"></text></g><g><title>malloc (1 samples, 0.15%)</title><rect x="55.7185%" y="325" width="0.1466%" height="15" fill="rgb(240,103,49)" fg:x="380" fg:w="1"/><text x="55.9685%" y="335.50"></text></g><g><title>hell_renderer::vulkan::frame::VulkanFrameData::present_queue (13 samples, 1.91%)</title><rect x="54.1056%" y="581" width="1.9062%" height="15" fill="rgb(250,182,30)" fg:x="369" fg:w="13"/><text x="54.3556%" y="591.50">h..</text></g><g><title>ash::extensions::khr::swapchain::Swapchain::queue_present (13 samples, 1.91%)</title><rect x="54.1056%" y="565" width="1.9062%" height="15" fill="rgb(248,8,30)" fg:x="369" fg:w="13"/><text x="54.3556%" y="575.50">a..</text></g><g><title>vulkan_layer_chassis::QueuePresentKHR (13 samples, 1.91%)</title><rect x="54.1056%" y="549" width="1.9062%" height="15" fill="rgb(237,120,30)" fg:x="369" fg:w="13"/><text x="54.3556%" y="559.50">v..</text></g><g><title>ValidationStateTracker::PostCallRecordQueuePresentKHR (2 samples, 0.29%)</title><rect x="55.7185%" y="533" width="0.2933%" height="15" fill="rgb(221,146,34)" fg:x="380" fg:w="2"/><text x="55.9685%" y="543.50"></text></g><g><title>QUEUE_STATE::Submit (2 samples, 0.29%)</title><rect x="55.7185%" y="517" width="0.2933%" height="15" fill="rgb(242,55,13)" fg:x="380" fg:w="2"/><text x="55.9685%" y="527.50"></text></g><g><title>SEMAPHORE_STATE::EnqueueWait (2 samples, 0.29%)</title><rect x="55.7185%" y="501" width="0.2933%" height="15" fill="rgb(242,112,31)" fg:x="380" fg:w="2"/><text x="55.9685%" y="511.50"></text></g><g><title>std::multimap&lt;unsigned long, SEMAPHORE_STATE::SemOpEntry, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt; &gt;::emplace&lt;unsigned long&amp;, SEMAPHORE_STATE::SemOpEntry&gt; (1 samples, 0.15%)</title><rect x="55.8651%" y="485" width="0.1466%" height="15" fill="rgb(249,192,27)" fg:x="381" fg:w="1"/><text x="56.1151%" y="495.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt; &gt;::_M_emplace_equal&lt;unsigned long&amp;, SEMAPHORE_STATE::SemOpEntry&gt; (1 samples, 0.15%)</title><rect x="55.8651%" y="469" width="0.1466%" height="15" fill="rgb(208,204,44)" fg:x="381" fg:w="1"/><text x="56.1151%" y="479.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt; &gt;::_Auto_node::_M_insert (1 samples, 0.15%)</title><rect x="55.8651%" y="453" width="0.1466%" height="15" fill="rgb(208,93,54)" fg:x="381" fg:w="1"/><text x="56.1151%" y="463.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt; &gt;::_M_insert_node (1 samples, 0.15%)</title><rect x="55.8651%" y="437" width="0.1466%" height="15" fill="rgb(242,1,31)" fg:x="381" fg:w="1"/><text x="56.1151%" y="447.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (1 samples, 0.15%)</title><rect x="55.8651%" y="421" width="0.1466%" height="15" fill="rgb(241,83,25)" fg:x="381" fg:w="1"/><text x="56.1151%" y="431.50"></text></g><g><title>ObjectLifetimes::PreCallValidateResetFences (1 samples, 0.15%)</title><rect x="56.0117%" y="533" width="0.1466%" height="15" fill="rgb(205,169,50)" fg:x="382" fg:w="1"/><text x="56.2617%" y="543.50"></text></g><g><title>ObjectLifetimes::ValidateObject&lt;VkDevice_T*&gt; (1 samples, 0.15%)</title><rect x="56.0117%" y="517" width="0.1466%" height="15" fill="rgb(239,186,37)" fg:x="382" fg:w="1"/><text x="56.2617%" y="527.50"></text></g><g><title>ObjectLifetimes::ValidateObject&lt;VkPhysicalDevice_T*&gt; (1 samples, 0.15%)</title><rect x="56.0117%" y="501" width="0.1466%" height="15" fill="rgb(205,221,10)" fg:x="382" fg:w="1"/><text x="56.2617%" y="511.50"></text></g><g><title>ObjectLifetimes::ValidateDeviceObject (1 samples, 0.15%)</title><rect x="56.0117%" y="485" width="0.1466%" height="15" fill="rgb(218,196,15)" fg:x="382" fg:w="1"/><text x="56.2617%" y="495.50"></text></g><g><title>ObjectLifetimes::GetObjectLifetimeData (1 samples, 0.15%)</title><rect x="56.0117%" y="469" width="0.1466%" height="15" fill="rgb(218,196,35)" fg:x="382" fg:w="1"/><text x="56.2617%" y="479.50"></text></g><g><title>ThreadSafety::PreCallRecordResetFences (1 samples, 0.15%)</title><rect x="56.1584%" y="533" width="0.1466%" height="15" fill="rgb(233,63,24)" fg:x="383" fg:w="1"/><text x="56.4084%" y="543.50"></text></g><g><title>ThreadSafety::StartReadObjectParentInstance (1 samples, 0.15%)</title><rect x="56.1584%" y="517" width="0.1466%" height="15" fill="rgb(225,8,4)" fg:x="383" fg:w="1"/><text x="56.4084%" y="527.50"></text></g><g><title>counter&lt;VkDevice_T*&gt;::StartRead (1 samples, 0.15%)</title><rect x="56.1584%" y="501" width="0.1466%" height="15" fill="rgb(234,105,35)" fg:x="383" fg:w="1"/><text x="56.4084%" y="511.50"></text></g><g><title>counter&lt;VkDevice_T*&gt;::FindObject (1 samples, 0.15%)</title><rect x="56.1584%" y="485" width="0.1466%" height="15" fill="rgb(236,21,32)" fg:x="383" fg:w="1"/><text x="56.4084%" y="495.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkDevice_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkDevice_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="56.1584%" y="469" width="0.1466%" height="15" fill="rgb(228,109,6)" fg:x="383" fg:w="1"/><text x="56.4084%" y="479.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="56.1584%" y="453" width="0.1466%" height="15" fill="rgb(229,215,31)" fg:x="383" fg:w="1"/><text x="56.4084%" y="463.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="56.1584%" y="437" width="0.1466%" height="15" fill="rgb(221,52,54)" fg:x="383" fg:w="1"/><text x="56.4084%" y="447.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="56.1584%" y="421" width="0.1466%" height="15" fill="rgb(252,129,43)" fg:x="383" fg:w="1"/><text x="56.4084%" y="431.50"></text></g><g><title>counter&lt;VkDevice_T*&gt;::FindObject (1 samples, 0.15%)</title><rect x="56.1584%" y="405" width="0.1466%" height="15" fill="rgb(248,183,27)" fg:x="383" fg:w="1"/><text x="56.4084%" y="415.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="56.1584%" y="389" width="0.1466%" height="15" fill="rgb(250,0,22)" fg:x="383" fg:w="1"/><text x="56.4084%" y="399.50"></text></g><g><title>std::__shared_ptr&lt;DEVICE_MEMORY_STATE, (__gnu_cxx::_Lock_policy)2&gt;::operator= (1 samples, 0.15%)</title><rect x="56.3050%" y="501" width="0.1466%" height="15" fill="rgb(213,166,10)" fg:x="384" fg:w="1"/><text x="56.5550%" y="511.50"></text></g><g><title>std::__shared_ptr&lt;DEVICE_MEMORY_STATE, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="56.3050%" y="485" width="0.1466%" height="15" fill="rgb(207,163,36)" fg:x="384" fg:w="1"/><text x="56.5550%" y="495.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="56.3050%" y="469" width="0.1466%" height="15" fill="rgb(208,122,22)" fg:x="384" fg:w="1"/><text x="56.5550%" y="479.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="56.3050%" y="453" width="0.1466%" height="15" fill="rgb(207,104,49)" fg:x="384" fg:w="1"/><text x="56.5550%" y="463.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="56.3050%" y="437" width="0.1466%" height="15" fill="rgb(248,211,50)" fg:x="384" fg:w="1"/><text x="56.5550%" y="447.50"></text></g><g><title>FENCE_STATE::Reset (2 samples, 0.29%)</title><rect x="56.3050%" y="517" width="0.2933%" height="15" fill="rgb(217,13,45)" fg:x="384" fg:w="2"/><text x="56.5550%" y="527.50"></text></g><g><title>std::promise&lt;void&gt;::operator= (1 samples, 0.15%)</title><rect x="56.4516%" y="501" width="0.1466%" height="15" fill="rgb(211,216,49)" fg:x="385" fg:w="1"/><text x="56.7016%" y="511.50"></text></g><g><title>std::promise&lt;void&gt;::~promise (1 samples, 0.15%)</title><rect x="56.4516%" y="485" width="0.1466%" height="15" fill="rgb(221,58,53)" fg:x="385" fg:w="1"/><text x="56.7016%" y="495.50"></text></g><g><title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="56.4516%" y="469" width="0.1466%" height="15" fill="rgb(220,112,41)" fg:x="385" fg:w="1"/><text x="56.7016%" y="479.50"></text></g><g><title>std::__shared_ptr&lt;std::__future_base::_State_baseV2, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="56.4516%" y="453" width="0.1466%" height="15" fill="rgb(236,38,28)" fg:x="385" fg:w="1"/><text x="56.7016%" y="463.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="56.4516%" y="437" width="0.1466%" height="15" fill="rgb(227,195,22)" fg:x="385" fg:w="1"/><text x="56.7016%" y="447.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="56.4516%" y="421" width="0.1466%" height="15" fill="rgb(214,55,33)" fg:x="385" fg:w="1"/><text x="56.7016%" y="431.50"></text></g><g><title>__gnu_cxx::__exchange_and_add_dispatch (1 samples, 0.15%)</title><rect x="56.4516%" y="405" width="0.1466%" height="15" fill="rgb(248,80,13)" fg:x="385" fg:w="1"/><text x="56.7016%" y="415.50"></text></g><g><title>__gnu_cxx::__exchange_and_add (1 samples, 0.15%)</title><rect x="56.4516%" y="389" width="0.1466%" height="15" fill="rgb(238,52,6)" fg:x="385" fg:w="1"/><text x="56.7016%" y="399.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkFence_T*, std::shared_ptr&lt;FENCE_STATE&gt;, robin_hood::hash&lt;VkFence_T*, void&gt;, std::equal_to&lt;VkFence_T*&gt; &gt;::find (1 samples, 0.15%)</title><rect x="56.5982%" y="485" width="0.1466%" height="15" fill="rgb(224,198,47)" fg:x="386" fg:w="1"/><text x="56.8482%" y="495.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkImageView_T*, std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, robin_hood::hash&lt;VkImageView_T*, void&gt;, std::equal_to&lt;VkImageView_T*&gt; &gt;::findIdx&lt;VkImageView_T*&gt; (1 samples, 0.15%)</title><rect x="56.5982%" y="469" width="0.1466%" height="15" fill="rgb(233,171,20)" fg:x="386" fg:w="1"/><text x="56.8482%" y="479.50"></text></g><g><title>hell_renderer::vulkan::frame::VulkanFrameData::reset_in_flight_fence (6 samples, 0.88%)</title><rect x="56.0117%" y="581" width="0.8798%" height="15" fill="rgb(241,30,25)" fg:x="382" fg:w="6"/><text x="56.2617%" y="591.50"></text></g><g><title>ash::device::Device::reset_fences (6 samples, 0.88%)</title><rect x="56.0117%" y="565" width="0.8798%" height="15" fill="rgb(207,171,38)" fg:x="382" fg:w="6"/><text x="56.2617%" y="575.50"></text></g><g><title>vulkan_layer_chassis::ResetFences (6 samples, 0.88%)</title><rect x="56.0117%" y="549" width="0.8798%" height="15" fill="rgb(234,70,1)" fg:x="382" fg:w="6"/><text x="56.2617%" y="559.50"></text></g><g><title>ValidationStateTracker::PostCallRecordResetFences (4 samples, 0.59%)</title><rect x="56.3050%" y="533" width="0.5865%" height="15" fill="rgb(232,178,18)" fg:x="384" fg:w="4"/><text x="56.5550%" y="543.50"></text></g><g><title>ValidationStateTracker::Get&lt;FENCE_STATE, state_object::Traits&lt;FENCE_STATE&gt; &gt; (2 samples, 0.29%)</title><rect x="56.5982%" y="517" width="0.2933%" height="15" fill="rgb(241,78,40)" fg:x="386" fg:w="2"/><text x="56.8482%" y="527.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkFence_T*, std::shared_ptr&lt;FENCE_STATE&gt;, 2, robin_hood::hash&lt;VkFence_T*, void&gt; &gt;::find (2 samples, 0.29%)</title><rect x="56.5982%" y="501" width="0.2933%" height="15" fill="rgb(222,35,25)" fg:x="386" fg:w="2"/><text x="56.8482%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="56.7449%" y="485" width="0.1466%" height="15" fill="rgb(207,92,16)" fg:x="387" fg:w="1"/><text x="56.9949%" y="495.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="56.7449%" y="469" width="0.1466%" height="15" fill="rgb(216,59,51)" fg:x="387" fg:w="1"/><text x="56.9949%" y="479.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="56.7449%" y="453" width="0.1466%" height="15" fill="rgb(213,80,28)" fg:x="387" fg:w="1"/><text x="56.9949%" y="463.50"></text></g><g><title>ValidationStateTracker::PostCallRecordResetFences (1 samples, 0.15%)</title><rect x="56.7449%" y="437" width="0.1466%" height="15" fill="rgb(220,93,7)" fg:x="387" fg:w="1"/><text x="56.9949%" y="447.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="56.7449%" y="421" width="0.1466%" height="15" fill="rgb(225,24,44)" fg:x="387" fg:w="1"/><text x="56.9949%" y="431.50"></text></g><g><title>CoreChecks::PostCallRecordQueueSubmit (2 samples, 0.29%)</title><rect x="56.8915%" y="533" width="0.2933%" height="15" fill="rgb(243,74,40)" fg:x="388" fg:w="2"/><text x="57.1415%" y="543.50"></text></g><g><title>CoreChecks::UpdateCmdBufImageLayouts (2 samples, 0.29%)</title><rect x="56.8915%" y="517" width="0.2933%" height="15" fill="rgb(228,39,7)" fg:x="388" fg:w="2"/><text x="57.1415%" y="527.50"></text></g><g><title>sparse_container::splice&lt;GlobalImageLayoutRangeMap, subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt;, GlobalLayoutUpdater&gt; (2 samples, 0.29%)</title><rect x="56.8915%" y="501" width="0.2933%" height="15" fill="rgb(227,79,8)" fg:x="388" fg:w="2"/><text x="57.1415%" y="511.50"></text></g><g><title>sparse_container::splice&lt;GlobalImageLayoutRangeMap, subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt;, GlobalLayoutUpdater, subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt;::IteratorImpl&lt;subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt; const, std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; const, sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::const_iterator, sparse_container::range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, std::map&lt;sparse_container::range&lt;unsigned long&gt;, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, std::less&lt;sparse_container::range&lt;unsigned long&gt; &gt;, std::allocator&lt;std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; &gt; &gt; &gt;::const_iterator&gt; &gt; (2 samples, 0.29%)</title><rect x="56.8915%" y="485" width="0.2933%" height="15" fill="rgb(236,58,11)" fg:x="388" fg:w="2"/><text x="57.1415%" y="495.50"></text></g><g><title>sparse_container::parallel_iterator&lt;GlobalImageLayoutRangeMap, subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt; const, sparse_container::range&lt;unsigned long&gt; &gt;::parallel_iterator (1 samples, 0.15%)</title><rect x="57.0381%" y="469" width="0.1466%" height="15" fill="rgb(249,63,35)" fg:x="389" fg:w="1"/><text x="57.2881%" y="479.50"></text></g><g><title>sparse_container::parallel_iterator&lt;GlobalImageLayoutRangeMap, subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt; const, sparse_container::range&lt;unsigned long&gt; &gt;::compute_delta (1 samples, 0.15%)</title><rect x="57.0381%" y="453" width="0.1466%" height="15" fill="rgb(252,114,16)" fg:x="389" fg:w="1"/><text x="57.2881%" y="463.50"></text></g><g><title>CommandBufferSubmitState::~CommandBufferSubmitState (1 samples, 0.15%)</title><rect x="57.1848%" y="517" width="0.1466%" height="15" fill="rgb(254,151,24)" fg:x="390" fg:w="1"/><text x="57.4348%" y="527.50"></text></g><g><title>robin_hood::detail::Table&lt;false, 80ul, IMAGE_STATE const*, layer_data::optional&lt;GlobalImageLayoutRangeMap&gt;, robin_hood::hash&lt;IMAGE_STATE const*, void&gt;, std::equal_to&lt;IMAGE_STATE const*&gt; &gt;::~Table (1 samples, 0.15%)</title><rect x="57.1848%" y="501" width="0.1466%" height="15" fill="rgb(253,54,39)" fg:x="390" fg:w="1"/><text x="57.4348%" y="511.50"></text></g><g><title>robin_hood::detail::NodeAllocator&lt;robin_hood::pair&lt;IMAGE_STATE const* const, layer_data::optional&lt;GlobalImageLayoutRangeMap&gt; &gt;, 4ul, 16384ul, false&gt;::~NodeAllocator (1 samples, 0.15%)</title><rect x="57.1848%" y="485" width="0.1466%" height="15" fill="rgb(243,25,45)" fg:x="390" fg:w="1"/><text x="57.4348%" y="495.50"></text></g><g><title>robin_hood::detail::BulkPoolAllocator&lt;robin_hood::pair&lt;IMAGE_STATE const* const, layer_data::optional&lt;GlobalImageLayoutRangeMap&gt; &gt;, 4ul, 16384ul&gt;::~BulkPoolAllocator (1 samples, 0.15%)</title><rect x="57.1848%" y="469" width="0.1466%" height="15" fill="rgb(234,134,9)" fg:x="390" fg:w="1"/><text x="57.4348%" y="479.50"></text></g><g><title>robin_hood::detail::BulkPoolAllocator&lt;robin_hood::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, InstanceExtensions::InstanceInfo&gt;, 4ul, 16384ul&gt;::reset (1 samples, 0.15%)</title><rect x="57.1848%" y="453" width="0.1466%" height="15" fill="rgb(227,166,31)" fg:x="390" fg:w="1"/><text x="57.4348%" y="463.50"></text></g><g><title>cfree (1 samples, 0.15%)</title><rect x="57.1848%" y="437" width="0.1466%" height="15" fill="rgb(245,143,41)" fg:x="390" fg:w="1"/><text x="57.4348%" y="447.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="57.1848%" y="421" width="0.1466%" height="15" fill="rgb(238,181,32)" fg:x="390" fg:w="1"/><text x="57.4348%" y="431.50"></text></g><g><title>std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, unsigned int&gt; &gt;::operator++ (1 samples, 0.15%)</title><rect x="57.3314%" y="469" width="0.1466%" height="15" fill="rgb(224,113,18)" fg:x="391" fg:w="1"/><text x="57.5814%" y="479.50"></text></g><g><title>std::_Rb_tree_increment (1 samples, 0.15%)</title><rect x="57.3314%" y="453" width="0.1466%" height="15" fill="rgb(240,229,28)" fg:x="391" fg:w="1"/><text x="57.5814%" y="463.50"></text></g><g><title>CoreChecks::ValidateSemaphoresForSubmit (2 samples, 0.29%)</title><rect x="57.3314%" y="517" width="0.2933%" height="15" fill="rgb(250,185,3)" fg:x="391" fg:w="2"/><text x="57.5814%" y="527.50"></text></g><g><title>CoreChecks::ValidatePipelineStage (2 samples, 0.29%)</title><rect x="57.3314%" y="501" width="0.2933%" height="15" fill="rgb(212,59,25)" fg:x="391" fg:w="2"/><text x="57.5814%" y="511.50"></text></g><g><title>CoreChecks::ValidateStageMasksAgainstQueueCapabilities (2 samples, 0.29%)</title><rect x="57.3314%" y="485" width="0.2933%" height="15" fill="rgb(221,87,20)" fg:x="391" fg:w="2"/><text x="57.5814%" y="495.50"></text></g><g><title>sync_utils::ExpandPipelineStages (1 samples, 0.15%)</title><rect x="57.4780%" y="469" width="0.1466%" height="15" fill="rgb(213,74,28)" fg:x="392" fg:w="1"/><text x="57.7280%" y="479.50"></text></g><g><title>std::_Rb_tree_const_iterator&lt;std::pair&lt;VkQueueFlagBits const, unsigned long&gt; &gt;::operator++ (1 samples, 0.15%)</title><rect x="57.4780%" y="453" width="0.1466%" height="15" fill="rgb(224,132,34)" fg:x="392" fg:w="1"/><text x="57.7280%" y="463.50"></text></g><g><title>std::_Rb_tree_increment (1 samples, 0.15%)</title><rect x="57.4780%" y="437" width="0.1466%" height="15" fill="rgb(222,101,24)" fg:x="392" fg:w="1"/><text x="57.7280%" y="447.50"></text></g><g><title>ValidationStateTracker::Get&lt;QUEUE_STATE, state_object::Traits&lt;QUEUE_STATE&gt; &gt; (1 samples, 0.15%)</title><rect x="57.6246%" y="517" width="0.1466%" height="15" fill="rgb(254,142,4)" fg:x="393" fg:w="1"/><text x="57.8746%" y="527.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkQueue_T*, std::shared_ptr&lt;QUEUE_STATE&gt;, 2, robin_hood::hash&lt;VkQueue_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="57.6246%" y="501" width="0.1466%" height="15" fill="rgb(230,229,49)" fg:x="393" fg:w="1"/><text x="57.8746%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="57.6246%" y="485" width="0.1466%" height="15" fill="rgb(238,70,47)" fg:x="393" fg:w="1"/><text x="57.8746%" y="495.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="57.6246%" y="469" width="0.1466%" height="15" fill="rgb(231,160,17)" fg:x="393" fg:w="1"/><text x="57.8746%" y="479.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="57.6246%" y="453" width="0.1466%" height="15" fill="rgb(218,68,53)" fg:x="393" fg:w="1"/><text x="57.8746%" y="463.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="57.6246%" y="437" width="0.1466%" height="15" fill="rgb(236,111,10)" fg:x="393" fg:w="1"/><text x="57.8746%" y="447.50"></text></g><g><title>ValidationStateTracker::Get&lt;QUEUE_STATE, state_object::Traits&lt;QUEUE_STATE&gt; &gt; (1 samples, 0.15%)</title><rect x="57.6246%" y="421" width="0.1466%" height="15" fill="rgb(224,34,41)" fg:x="393" fg:w="1"/><text x="57.8746%" y="431.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="57.6246%" y="405" width="0.1466%" height="15" fill="rgb(241,118,19)" fg:x="393" fg:w="1"/><text x="57.8746%" y="415.50"></text></g><g><title>CoreChecks::PreCallValidateQueueSubmit (5 samples, 0.73%)</title><rect x="57.1848%" y="533" width="0.7331%" height="15" fill="rgb(238,129,25)" fg:x="390" fg:w="5"/><text x="57.4348%" y="543.50"></text></g><g><title>std::shared_ptr&lt;FENCE_STATE const&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="57.7713%" y="517" width="0.1466%" height="15" fill="rgb(238,22,31)" fg:x="394" fg:w="1"/><text x="58.0213%" y="527.50"></text></g><g><title>std::__shared_ptr&lt;FENCE_STATE const, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="57.7713%" y="501" width="0.1466%" height="15" fill="rgb(222,174,48)" fg:x="394" fg:w="1"/><text x="58.0213%" y="511.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="57.7713%" y="485" width="0.1466%" height="15" fill="rgb(206,152,40)" fg:x="394" fg:w="1"/><text x="58.0213%" y="495.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="57.7713%" y="469" width="0.1466%" height="15" fill="rgb(218,99,54)" fg:x="394" fg:w="1"/><text x="58.0213%" y="479.50"></text></g><g><title>ValidationObject::Unwrap&lt;VkImage_T*&gt; (1 samples, 0.15%)</title><rect x="57.9179%" y="517" width="0.1466%" height="15" fill="rgb(220,174,26)" fg:x="395" fg:w="1"/><text x="58.1679%" y="527.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, unsigned long, 4, HashedUint64&gt;::find (1 samples, 0.15%)</title><rect x="57.9179%" y="501" width="0.1466%" height="15" fill="rgb(245,116,9)" fg:x="395" fg:w="1"/><text x="58.1679%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="57.9179%" y="485" width="0.1466%" height="15" fill="rgb(209,72,35)" fg:x="395" fg:w="1"/><text x="58.1679%" y="495.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="57.9179%" y="469" width="0.1466%" height="15" fill="rgb(226,126,21)" fg:x="395" fg:w="1"/><text x="58.1679%" y="479.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="57.9179%" y="453" width="0.1466%" height="15" fill="rgb(227,192,1)" fg:x="395" fg:w="1"/><text x="58.1679%" y="463.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="57.9179%" y="437" width="0.1466%" height="15" fill="rgb(237,180,29)" fg:x="395" fg:w="1"/><text x="58.1679%" y="447.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, unsigned long, 4, HashedUint64&gt;::find (1 samples, 0.15%)</title><rect x="57.9179%" y="421" width="0.1466%" height="15" fill="rgb(230,197,35)" fg:x="395" fg:w="1"/><text x="58.1679%" y="431.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="57.9179%" y="405" width="0.1466%" height="15" fill="rgb(246,193,31)" fg:x="395" fg:w="1"/><text x="58.1679%" y="415.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (1 samples, 0.15%)</title><rect x="58.0645%" y="485" width="0.1466%" height="15" fill="rgb(241,36,4)" fg:x="396" fg:w="1"/><text x="58.3145%" y="495.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="58.0645%" y="469" width="0.1466%" height="15" fill="rgb(241,130,17)" fg:x="396" fg:w="1"/><text x="58.3145%" y="479.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="58.0645%" y="453" width="0.1466%" height="15" fill="rgb(206,137,32)" fg:x="396" fg:w="1"/><text x="58.3145%" y="463.50"></text></g><g><title>DispatchQueueSubmit (8 samples, 1.17%)</title><rect x="57.9179%" y="533" width="1.1730%" height="15" fill="rgb(237,228,51)" fg:x="395" fg:w="8"/><text x="58.1679%" y="543.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (7 samples, 1.03%)</title><rect x="58.0645%" y="517" width="1.0264%" height="15" fill="rgb(243,6,42)" fg:x="396" fg:w="7"/><text x="58.3145%" y="527.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (7 samples, 1.03%)</title><rect x="58.0645%" y="501" width="1.0264%" height="15" fill="rgb(251,74,28)" fg:x="396" fg:w="7"/><text x="58.3145%" y="511.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (6 samples, 0.88%)</title><rect x="58.2111%" y="485" width="0.8798%" height="15" fill="rgb(218,20,49)" fg:x="397" fg:w="6"/><text x="58.4611%" y="495.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (4 samples, 0.59%)</title><rect x="58.5044%" y="469" width="0.5865%" height="15" fill="rgb(238,28,14)" fg:x="399" fg:w="4"/><text x="58.7544%" y="479.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (3 samples, 0.44%)</title><rect x="58.6510%" y="453" width="0.4399%" height="15" fill="rgb(229,40,46)" fg:x="400" fg:w="3"/><text x="58.9010%" y="463.50"></text></g><g><title>clock_gettime (1 samples, 0.15%)</title><rect x="58.9443%" y="437" width="0.1466%" height="15" fill="rgb(244,195,20)" fg:x="402" fg:w="1"/><text x="59.1943%" y="447.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.15%)</title><rect x="58.9443%" y="421" width="0.1466%" height="15" fill="rgb(253,56,35)" fg:x="402" fg:w="1"/><text x="59.1943%" y="431.50"></text></g><g><title>[[vdso]] (1 samples, 0.15%)</title><rect x="58.9443%" y="405" width="0.1466%" height="15" fill="rgb(210,149,44)" fg:x="402" fg:w="1"/><text x="59.1943%" y="415.50"></text></g><g><title>ObjectLifetimes::PreCallValidateQueueSubmit (1 samples, 0.15%)</title><rect x="59.0909%" y="533" width="0.1466%" height="15" fill="rgb(240,135,12)" fg:x="403" fg:w="1"/><text x="59.3409%" y="543.50"></text></g><g><title>ObjectLifetimes::ValidateObject&lt;VkPhysicalDevice_T*&gt; (1 samples, 0.15%)</title><rect x="59.0909%" y="517" width="0.1466%" height="15" fill="rgb(251,24,50)" fg:x="403" fg:w="1"/><text x="59.3409%" y="527.50"></text></g><g><title>ObjectLifetimes::CheckObjectValidity (1 samples, 0.15%)</title><rect x="59.0909%" y="501" width="0.1466%" height="15" fill="rgb(243,200,47)" fg:x="403" fg:w="1"/><text x="59.3409%" y="511.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, std::shared_ptr&lt;ObjTrackState&gt;, 6, robin_hood::hash&lt;unsigned long, void&gt; &gt;::contains (1 samples, 0.15%)</title><rect x="59.0909%" y="485" width="0.1466%" height="15" fill="rgb(224,166,26)" fg:x="403" fg:w="1"/><text x="59.3409%" y="495.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="59.0909%" y="469" width="0.1466%" height="15" fill="rgb(233,0,47)" fg:x="403" fg:w="1"/><text x="59.3409%" y="479.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="59.0909%" y="453" width="0.1466%" height="15" fill="rgb(253,80,5)" fg:x="403" fg:w="1"/><text x="59.3409%" y="463.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="59.0909%" y="437" width="0.1466%" height="15" fill="rgb(214,133,25)" fg:x="403" fg:w="1"/><text x="59.3409%" y="447.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="59.0909%" y="421" width="0.1466%" height="15" fill="rgb(209,27,14)" fg:x="403" fg:w="1"/><text x="59.3409%" y="431.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, std::shared_ptr&lt;ObjTrackState&gt;, 6, robin_hood::hash&lt;unsigned long, void&gt; &gt;::contains (1 samples, 0.15%)</title><rect x="59.0909%" y="405" width="0.1466%" height="15" fill="rgb(219,102,51)" fg:x="403" fg:w="1"/><text x="59.3409%" y="415.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="59.0909%" y="389" width="0.1466%" height="15" fill="rgb(237,18,16)" fg:x="403" fg:w="1"/><text x="59.3409%" y="399.50"></text></g><g><title>CMD_BUFFER_STATE::Submit (1 samples, 0.15%)</title><rect x="59.2375%" y="501" width="0.1466%" height="15" fill="rgb(241,85,17)" fg:x="404" fg:w="1"/><text x="59.4875%" y="511.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkEvent_T*, unsigned long, robin_hood::hash&lt;VkEvent_T*, void&gt;, std::equal_to&lt;VkEvent_T*&gt; &gt;::~Table (1 samples, 0.15%)</title><rect x="59.2375%" y="485" width="0.1466%" height="15" fill="rgb(236,90,42)" fg:x="404" fg:w="1"/><text x="59.4875%" y="495.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkEvent_T*, unsigned long, robin_hood::hash&lt;VkEvent_T*, void&gt;, std::equal_to&lt;VkEvent_T*&gt; &gt;::destroy (1 samples, 0.15%)</title><rect x="59.2375%" y="469" width="0.1466%" height="15" fill="rgb(249,57,21)" fg:x="404" fg:w="1"/><text x="59.4875%" y="479.50"></text></g><g><title>FENCE_STATE::EnqueueSignal (1 samples, 0.15%)</title><rect x="59.3842%" y="501" width="0.1466%" height="15" fill="rgb(243,12,36)" fg:x="405" fg:w="1"/><text x="59.6342%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="59.3842%" y="485" width="0.1466%" height="15" fill="rgb(253,128,47)" fg:x="405" fg:w="1"/><text x="59.6342%" y="495.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="59.3842%" y="469" width="0.1466%" height="15" fill="rgb(207,33,20)" fg:x="405" fg:w="1"/><text x="59.6342%" y="479.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="59.3842%" y="453" width="0.1466%" height="15" fill="rgb(233,215,35)" fg:x="405" fg:w="1"/><text x="59.6342%" y="463.50"></text></g><g><title>QUEUE_STATE::Submit (1 samples, 0.15%)</title><rect x="59.3842%" y="437" width="0.1466%" height="15" fill="rgb(249,188,52)" fg:x="405" fg:w="1"/><text x="59.6342%" y="447.50"></text></g><g><title>pthread_mutex_unlock (1 samples, 0.15%)</title><rect x="59.3842%" y="421" width="0.1466%" height="15" fill="rgb(225,12,32)" fg:x="405" fg:w="1"/><text x="59.6342%" y="431.50"></text></g><g><title>hell_renderer::vulkan::frame::VulkanFrameData::submit_queue (19 samples, 2.79%)</title><rect x="56.8915%" y="581" width="2.7859%" height="15" fill="rgb(247,98,14)" fg:x="388" fg:w="19"/><text x="57.1415%" y="591.50">he..</text></g><g><title>ash::device::Device::queue_submit (19 samples, 2.79%)</title><rect x="56.8915%" y="565" width="2.7859%" height="15" fill="rgb(247,219,48)" fg:x="388" fg:w="19"/><text x="57.1415%" y="575.50">as..</text></g><g><title>vulkan_layer_chassis::QueueSubmit (19 samples, 2.79%)</title><rect x="56.8915%" y="549" width="2.7859%" height="15" fill="rgb(253,60,48)" fg:x="388" fg:w="19"/><text x="57.1415%" y="559.50">vu..</text></g><g><title>ValidationStateTracker::PreCallRecordQueueSubmit (3 samples, 0.44%)</title><rect x="59.2375%" y="533" width="0.4399%" height="15" fill="rgb(245,15,52)" fg:x="404" fg:w="3"/><text x="59.4875%" y="543.50"></text></g><g><title>QUEUE_STATE::Submit (3 samples, 0.44%)</title><rect x="59.2375%" y="517" width="0.4399%" height="15" fill="rgb(220,133,28)" fg:x="404" fg:w="3"/><text x="59.4875%" y="527.50"></text></g><g><title>SEMAPHORE_STATE::EnqueueSignal (1 samples, 0.15%)</title><rect x="59.5308%" y="501" width="0.1466%" height="15" fill="rgb(217,180,4)" fg:x="406" fg:w="1"/><text x="59.7808%" y="511.50"></text></g><g><title>SEMAPHORE_STATE::SemOpEntry::SemOpEntry (1 samples, 0.15%)</title><rect x="59.5308%" y="485" width="0.1466%" height="15" fill="rgb(251,24,1)" fg:x="406" fg:w="1"/><text x="59.7808%" y="495.50"></text></g><g><title>std::promise&lt;void&gt;::promise (1 samples, 0.15%)</title><rect x="59.5308%" y="469" width="0.1466%" height="15" fill="rgb(212,185,49)" fg:x="406" fg:w="1"/><text x="59.7808%" y="479.50"></text></g><g><title>std::make_shared&lt;std::__future_base::_State_baseV2&gt; (1 samples, 0.15%)</title><rect x="59.5308%" y="453" width="0.1466%" height="15" fill="rgb(215,175,22)" fg:x="406" fg:w="1"/><text x="59.7808%" y="463.50"></text></g><g><title>std::shared_ptr&lt;std::__future_base::_State_baseV2&gt;::shared_ptr&lt;std::allocator&lt;void&gt;&gt; (1 samples, 0.15%)</title><rect x="59.5308%" y="437" width="0.1466%" height="15" fill="rgb(250,205,14)" fg:x="406" fg:w="1"/><text x="59.7808%" y="447.50"></text></g><g><title>std::__shared_ptr&lt;std::__future_base::_State_baseV2, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;&gt; (1 samples, 0.15%)</title><rect x="59.5308%" y="421" width="0.1466%" height="15" fill="rgb(225,211,22)" fg:x="406" fg:w="1"/><text x="59.7808%" y="431.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;std::__future_base::_State_baseV2, std::allocator&lt;void&gt;&gt; (1 samples, 0.15%)</title><rect x="59.5308%" y="405" width="0.1466%" height="15" fill="rgb(251,179,42)" fg:x="406" fg:w="1"/><text x="59.7808%" y="415.50"></text></g><g><title>std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; (1 samples, 0.15%)</title><rect x="59.5308%" y="389" width="0.1466%" height="15" fill="rgb(208,216,51)" fg:x="406" fg:w="1"/><text x="59.7808%" y="399.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::__future_base::_State_baseV2, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::allocate (1 samples, 0.15%)</title><rect x="59.5308%" y="373" width="0.1466%" height="15" fill="rgb(235,36,11)" fg:x="406" fg:w="1"/><text x="59.7808%" y="383.50"></text></g><g><title>std::__new_allocator&lt;LoggingLabel&gt;::allocate (1 samples, 0.15%)</title><rect x="59.5308%" y="357" width="0.1466%" height="15" fill="rgb(213,189,28)" fg:x="406" fg:w="1"/><text x="59.7808%" y="367.50"></text></g><g><title>operator new (1 samples, 0.15%)</title><rect x="59.5308%" y="341" width="0.1466%" height="15" fill="rgb(227,203,42)" fg:x="406" fg:w="1"/><text x="59.7808%" y="351.50"></text></g><g><title>malloc (1 samples, 0.15%)</title><rect x="59.5308%" y="325" width="0.1466%" height="15" fill="rgb(244,72,36)" fg:x="406" fg:w="1"/><text x="59.7808%" y="335.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="61.5836%" y="453" width="0.1466%" height="15" fill="rgb(213,53,17)" fg:x="420" fg:w="1"/><text x="61.8336%" y="463.50"></text></g><g><title>clock_gettime (1 samples, 0.15%)</title><rect x="61.5836%" y="437" width="0.1466%" height="15" fill="rgb(207,167,3)" fg:x="420" fg:w="1"/><text x="61.8336%" y="447.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.15%)</title><rect x="61.5836%" y="421" width="0.1466%" height="15" fill="rgb(216,98,30)" fg:x="420" fg:w="1"/><text x="61.8336%" y="431.50"></text></g><g><title>[[vdso]] (1 samples, 0.15%)</title><rect x="61.5836%" y="405" width="0.1466%" height="15" fill="rgb(236,123,15)" fg:x="420" fg:w="1"/><text x="61.8336%" y="415.50"></text></g><g><title>__poll (6 samples, 0.88%)</title><rect x="61.7302%" y="453" width="0.8798%" height="15" fill="rgb(248,81,50)" fg:x="421" fg:w="6"/><text x="61.9802%" y="463.50"></text></g><g><title>[libc.so.6] (5 samples, 0.73%)</title><rect x="61.8768%" y="437" width="0.7331%" height="15" fill="rgb(214,120,4)" fg:x="422" fg:w="5"/><text x="62.1268%" y="447.50"></text></g><g><title>cfree (13 samples, 1.91%)</title><rect x="62.6100%" y="453" width="1.9062%" height="15" fill="rgb(208,179,34)" fg:x="427" fg:w="13"/><text x="62.8600%" y="463.50">c..</text></g><g><title>[libc.so.6] (2 samples, 0.29%)</title><rect x="64.2229%" y="437" width="0.2933%" height="15" fill="rgb(227,140,7)" fg:x="438" fg:w="2"/><text x="64.4729%" y="447.50"></text></g><g><title>DispatchWaitForFences (34 samples, 4.99%)</title><rect x="59.6774%" y="533" width="4.9853%" height="15" fill="rgb(214,22,6)" fg:x="407" fg:w="34"/><text x="59.9274%" y="543.50">Dispat..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (34 samples, 4.99%)</title><rect x="59.6774%" y="517" width="4.9853%" height="15" fill="rgb(207,137,27)" fg:x="407" fg:w="34"/><text x="59.9274%" y="527.50">[libnv..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (33 samples, 4.84%)</title><rect x="59.8240%" y="501" width="4.8387%" height="15" fill="rgb(210,8,46)" fg:x="408" fg:w="33"/><text x="60.0740%" y="511.50">[libnv..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (32 samples, 4.69%)</title><rect x="59.9707%" y="485" width="4.6921%" height="15" fill="rgb(240,16,54)" fg:x="409" fg:w="32"/><text x="60.2207%" y="495.50">[libn..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (28 samples, 4.11%)</title><rect x="60.5572%" y="469" width="4.1056%" height="15" fill="rgb(211,209,29)" fg:x="413" fg:w="28"/><text x="60.8072%" y="479.50">[lib..</text></g><g><title>clock_gettime (1 samples, 0.15%)</title><rect x="64.5161%" y="453" width="0.1466%" height="15" fill="rgb(226,228,24)" fg:x="440" fg:w="1"/><text x="64.7661%" y="463.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.15%)</title><rect x="64.5161%" y="437" width="0.1466%" height="15" fill="rgb(222,84,9)" fg:x="440" fg:w="1"/><text x="64.7661%" y="447.50"></text></g><g><title>[[vdso]] (1 samples, 0.15%)</title><rect x="64.5161%" y="421" width="0.1466%" height="15" fill="rgb(234,203,30)" fg:x="440" fg:w="1"/><text x="64.7661%" y="431.50"></text></g><g><title>ObjectLifetimes::PreCallValidateWaitForFences (1 samples, 0.15%)</title><rect x="64.6628%" y="533" width="0.1466%" height="15" fill="rgb(238,109,14)" fg:x="441" fg:w="1"/><text x="64.9128%" y="543.50"></text></g><g><title>ObjectLifetimes::ValidateObject&lt;VkDevice_T*&gt; (1 samples, 0.15%)</title><rect x="64.6628%" y="517" width="0.1466%" height="15" fill="rgb(233,206,34)" fg:x="441" fg:w="1"/><text x="64.9128%" y="527.50"></text></g><g><title>ObjectLifetimes::ValidateObject&lt;VkPhysicalDevice_T*&gt; (1 samples, 0.15%)</title><rect x="64.6628%" y="501" width="0.1466%" height="15" fill="rgb(220,167,47)" fg:x="441" fg:w="1"/><text x="64.9128%" y="511.50"></text></g><g><title>ObjectLifetimes::ValidateDeviceObject (1 samples, 0.15%)</title><rect x="64.6628%" y="485" width="0.1466%" height="15" fill="rgb(238,105,10)" fg:x="441" fg:w="1"/><text x="64.9128%" y="495.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, std::shared_ptr&lt;ObjTrackState&gt;, 6, robin_hood::hash&lt;unsigned long, void&gt; &gt;::contains (1 samples, 0.15%)</title><rect x="64.6628%" y="469" width="0.1466%" height="15" fill="rgb(213,227,17)" fg:x="441" fg:w="1"/><text x="64.9128%" y="479.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="64.6628%" y="453" width="0.1466%" height="15" fill="rgb(217,132,38)" fg:x="441" fg:w="1"/><text x="64.9128%" y="463.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="64.6628%" y="437" width="0.1466%" height="15" fill="rgb(242,146,4)" fg:x="441" fg:w="1"/><text x="64.9128%" y="447.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="64.6628%" y="421" width="0.1466%" height="15" fill="rgb(212,61,9)" fg:x="441" fg:w="1"/><text x="64.9128%" y="431.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="64.6628%" y="405" width="0.1466%" height="15" fill="rgb(247,126,22)" fg:x="441" fg:w="1"/><text x="64.9128%" y="415.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, std::shared_ptr&lt;ObjTrackState&gt;, 6, robin_hood::hash&lt;unsigned long, void&gt; &gt;::contains (1 samples, 0.15%)</title><rect x="64.6628%" y="389" width="0.1466%" height="15" fill="rgb(220,196,2)" fg:x="441" fg:w="1"/><text x="64.9128%" y="399.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="64.6628%" y="373" width="0.1466%" height="15" fill="rgb(208,46,4)" fg:x="441" fg:w="1"/><text x="64.9128%" y="383.50"></text></g><g><title>ThreadSafety::FinishReadObjectParentInstance (1 samples, 0.15%)</title><rect x="64.8094%" y="517" width="0.1466%" height="15" fill="rgb(252,104,46)" fg:x="442" fg:w="1"/><text x="65.0594%" y="527.50"></text></g><g><title>counter&lt;VkDevice_T*&gt;::FinishRead (1 samples, 0.15%)</title><rect x="64.8094%" y="501" width="0.1466%" height="15" fill="rgb(237,152,48)" fg:x="442" fg:w="1"/><text x="65.0594%" y="511.50"></text></g><g><title>counter&lt;VkDevice_T*&gt;::FindObject (1 samples, 0.15%)</title><rect x="64.8094%" y="485" width="0.1466%" height="15" fill="rgb(221,59,37)" fg:x="442" fg:w="1"/><text x="65.0594%" y="495.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkDevice_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkDevice_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="64.8094%" y="469" width="0.1466%" height="15" fill="rgb(209,202,51)" fg:x="442" fg:w="1"/><text x="65.0594%" y="479.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="64.8094%" y="453" width="0.1466%" height="15" fill="rgb(228,81,30)" fg:x="442" fg:w="1"/><text x="65.0594%" y="463.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="64.8094%" y="437" width="0.1466%" height="15" fill="rgb(227,42,39)" fg:x="442" fg:w="1"/><text x="65.0594%" y="447.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="64.8094%" y="421" width="0.1466%" height="15" fill="rgb(221,26,2)" fg:x="442" fg:w="1"/><text x="65.0594%" y="431.50"></text></g><g><title>__gthread_mutex_unlock (1 samples, 0.15%)</title><rect x="64.8094%" y="405" width="0.1466%" height="15" fill="rgb(254,61,31)" fg:x="442" fg:w="1"/><text x="65.0594%" y="415.50"></text></g><g><title>ThreadSafety::PostCallRecordWaitForFences (3 samples, 0.44%)</title><rect x="64.8094%" y="533" width="0.4399%" height="15" fill="rgb(222,173,38)" fg:x="442" fg:w="3"/><text x="65.0594%" y="543.50"></text></g><g><title>ThreadSafety::PostCallRecordWaitForFences (2 samples, 0.29%)</title><rect x="64.9560%" y="517" width="0.2933%" height="15" fill="rgb(218,50,12)" fg:x="443" fg:w="2"/><text x="65.2060%" y="527.50"></text></g><g><title>ThreadSafety::FinishReadObject (2 samples, 0.29%)</title><rect x="64.9560%" y="501" width="0.2933%" height="15" fill="rgb(223,88,40)" fg:x="443" fg:w="2"/><text x="65.2060%" y="511.50"></text></g><g><title>counter&lt;VkFence_T*&gt;::FinishRead (2 samples, 0.29%)</title><rect x="64.9560%" y="485" width="0.2933%" height="15" fill="rgb(237,54,19)" fg:x="443" fg:w="2"/><text x="65.2060%" y="495.50"></text></g><g><title>counter&lt;VkFence_T*&gt;::FindObject (2 samples, 0.29%)</title><rect x="64.9560%" y="469" width="0.2933%" height="15" fill="rgb(251,129,25)" fg:x="443" fg:w="2"/><text x="65.2060%" y="479.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkFence_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkFence_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="65.1026%" y="453" width="0.1466%" height="15" fill="rgb(238,97,19)" fg:x="444" fg:w="1"/><text x="65.3526%" y="463.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="65.1026%" y="437" width="0.1466%" height="15" fill="rgb(240,169,18)" fg:x="444" fg:w="1"/><text x="65.3526%" y="447.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="65.1026%" y="421" width="0.1466%" height="15" fill="rgb(230,187,49)" fg:x="444" fg:w="1"/><text x="65.3526%" y="431.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="65.1026%" y="405" width="0.1466%" height="15" fill="rgb(209,44,26)" fg:x="444" fg:w="1"/><text x="65.3526%" y="415.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="65.1026%" y="389" width="0.1466%" height="15" fill="rgb(244,0,6)" fg:x="444" fg:w="1"/><text x="65.3526%" y="399.50"></text></g><g><title>counter&lt;VkFence_T*&gt;::FindObject (1 samples, 0.15%)</title><rect x="65.1026%" y="373" width="0.1466%" height="15" fill="rgb(248,18,21)" fg:x="444" fg:w="1"/><text x="65.3526%" y="383.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="65.1026%" y="357" width="0.1466%" height="15" fill="rgb(245,180,19)" fg:x="444" fg:w="1"/><text x="65.3526%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="65.5425%" y="405" width="0.1466%" height="15" fill="rgb(252,118,36)" fg:x="447" fg:w="1"/><text x="65.7925%" y="415.50"></text></g><g><title>clock_gettime (4 samples, 0.59%)</title><rect x="65.6891%" y="405" width="0.5865%" height="15" fill="rgb(210,224,19)" fg:x="448" fg:w="4"/><text x="65.9391%" y="415.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.29%)</title><rect x="65.9824%" y="389" width="0.2933%" height="15" fill="rgb(218,30,24)" fg:x="450" fg:w="2"/><text x="66.2324%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="66.1290%" y="373" width="0.1466%" height="15" fill="rgb(219,75,50)" fg:x="451" fg:w="1"/><text x="66.3790%" y="383.50"></text></g><g><title>FENCE_STATE::NotifyAndWait (9 samples, 1.32%)</title><rect x="65.2493%" y="517" width="1.3196%" height="15" fill="rgb(234,72,50)" fg:x="445" fg:w="9"/><text x="65.4993%" y="527.50"></text></g><g><title>std::__basic_future&lt;void&gt;::wait_until&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (9 samples, 1.32%)</title><rect x="65.2493%" y="501" width="1.3196%" height="15" fill="rgb(219,100,48)" fg:x="445" fg:w="9"/><text x="65.4993%" y="511.50"></text></g><g><title>std::__future_base::_State_baseV2::wait_until&lt;std::chrono::_V2::steady_clock, std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (9 samples, 1.32%)</title><rect x="65.2493%" y="485" width="1.3196%" height="15" fill="rgb(253,5,41)" fg:x="445" fg:w="9"/><text x="65.4993%" y="495.50"></text></g><g><title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::_M_load_when_equal_until&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (9 samples, 1.32%)</title><rect x="65.2493%" y="469" width="1.3196%" height="15" fill="rgb(247,181,11)" fg:x="445" fg:w="9"/><text x="65.4993%" y="479.50"></text></g><g><title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::_M_load_and_test_until_impl&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; (9 samples, 1.32%)</title><rect x="65.2493%" y="453" width="1.3196%" height="15" fill="rgb(222,223,25)" fg:x="445" fg:w="9"/><text x="65.4993%" y="463.50"></text></g><g><title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::_M_load_and_test_until_steady (9 samples, 1.32%)</title><rect x="65.2493%" y="437" width="1.3196%" height="15" fill="rgb(214,198,28)" fg:x="445" fg:w="9"/><text x="65.4993%" y="447.50"></text></g><g><title>std::__atomic_futex_unsigned_base::_M_futex_wait_until_steady (9 samples, 1.32%)</title><rect x="65.2493%" y="421" width="1.3196%" height="15" fill="rgb(230,46,43)" fg:x="445" fg:w="9"/><text x="65.4993%" y="431.50"></text></g><g><title>syscall (2 samples, 0.29%)</title><rect x="66.2757%" y="405" width="0.2933%" height="15" fill="rgb(233,65,53)" fg:x="452" fg:w="2"/><text x="66.5257%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="66.4223%" y="389" width="0.1466%" height="15" fill="rgb(221,121,27)" fg:x="453" fg:w="1"/><text x="66.6723%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="66.4223%" y="373" width="0.1466%" height="15" fill="rgb(247,70,47)" fg:x="453" fg:w="1"/><text x="66.6723%" y="383.50"></text></g><g><title>hell_renderer::vulkan::frame::VulkanFrameData::wait_for_in_flight (48 samples, 7.04%)</title><rect x="59.6774%" y="581" width="7.0381%" height="15" fill="rgb(228,85,35)" fg:x="407" fg:w="48"/><text x="59.9274%" y="591.50">hell_rend..</text></g><g><title>ash::device::Device::wait_for_fences (48 samples, 7.04%)</title><rect x="59.6774%" y="565" width="7.0381%" height="15" fill="rgb(209,50,18)" fg:x="407" fg:w="48"/><text x="59.9274%" y="575.50">ash::devi..</text></g><g><title>vulkan_layer_chassis::WaitForFences (48 samples, 7.04%)</title><rect x="59.6774%" y="549" width="7.0381%" height="15" fill="rgb(250,19,35)" fg:x="407" fg:w="48"/><text x="59.9274%" y="559.50">vulkan_la..</text></g><g><title>ValidationStateTracker::PostCallRecordWaitForFences (10 samples, 1.47%)</title><rect x="65.2493%" y="533" width="1.4663%" height="15" fill="rgb(253,107,29)" fg:x="445" fg:w="10"/><text x="65.4993%" y="543.50"></text></g><g><title>std::shared_ptr&lt;FENCE_STATE&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="66.5689%" y="517" width="0.1466%" height="15" fill="rgb(252,179,29)" fg:x="454" fg:w="1"/><text x="66.8189%" y="527.50"></text></g><g><title>std::__shared_ptr&lt;FENCE_STATE, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="66.5689%" y="501" width="0.1466%" height="15" fill="rgb(238,194,6)" fg:x="454" fg:w="1"/><text x="66.8189%" y="511.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="66.5689%" y="485" width="0.1466%" height="15" fill="rgb(238,164,29)" fg:x="454" fg:w="1"/><text x="66.8189%" y="495.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="66.5689%" y="469" width="0.1466%" height="15" fill="rgb(224,25,9)" fg:x="454" fg:w="1"/><text x="66.8189%" y="479.50"></text></g><g><title>ValidationStateTracker::Get&lt;FENCE_STATE, state_object::Traits&lt;FENCE_STATE&gt; &gt; (1 samples, 0.15%)</title><rect x="66.7155%" y="501" width="0.1466%" height="15" fill="rgb(244,153,23)" fg:x="455" fg:w="1"/><text x="66.9655%" y="511.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkFence_T*, std::shared_ptr&lt;FENCE_STATE&gt;, 2, robin_hood::hash&lt;VkFence_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="66.7155%" y="485" width="0.1466%" height="15" fill="rgb(212,203,14)" fg:x="455" fg:w="1"/><text x="66.9655%" y="495.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkFence_T*, std::shared_ptr&lt;FENCE_STATE&gt;, robin_hood::hash&lt;VkFence_T*, void&gt;, std::equal_to&lt;VkFence_T*&gt; &gt;::find (1 samples, 0.15%)</title><rect x="66.7155%" y="469" width="0.1466%" height="15" fill="rgb(220,164,20)" fg:x="455" fg:w="1"/><text x="66.9655%" y="479.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkImageView_T*, std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, robin_hood::hash&lt;VkImageView_T*, void&gt;, std::equal_to&lt;VkImageView_T*&gt; &gt;::findIdx&lt;VkImageView_T*&gt; (1 samples, 0.15%)</title><rect x="66.7155%" y="453" width="0.1466%" height="15" fill="rgb(222,203,48)" fg:x="455" fg:w="1"/><text x="66.9655%" y="463.50"></text></g><g><title>ValidationStateTracker::Get&lt;SEMAPHORE_STATE, state_object::Traits&lt;SEMAPHORE_STATE&gt; &gt; (1 samples, 0.15%)</title><rect x="66.8622%" y="501" width="0.1466%" height="15" fill="rgb(215,159,22)" fg:x="456" fg:w="1"/><text x="67.1122%" y="511.50"></text></g><g><title>std::static_pointer_cast&lt;SWAPCHAIN_NODE, SWAPCHAIN_NODE&gt; (1 samples, 0.15%)</title><rect x="67.0088%" y="485" width="0.1466%" height="15" fill="rgb(216,183,47)" fg:x="457" fg:w="1"/><text x="67.2588%" y="495.50"></text></g><g><title>CoreChecks::PreCallValidateAcquireNextImageKHR (4 samples, 0.59%)</title><rect x="66.7155%" y="533" width="0.5865%" height="15" fill="rgb(229,195,25)" fg:x="455" fg:w="4"/><text x="66.9655%" y="543.50"></text></g><g><title>CoreChecks::ValidateAcquireNextImage (4 samples, 0.59%)</title><rect x="66.7155%" y="517" width="0.5865%" height="15" fill="rgb(224,132,51)" fg:x="455" fg:w="4"/><text x="66.9655%" y="527.50"></text></g><g><title>ValidationStateTracker::Get&lt;SWAPCHAIN_NODE, state_object::Traits&lt;SWAPCHAIN_NODE&gt; &gt; (2 samples, 0.29%)</title><rect x="67.0088%" y="501" width="0.2933%" height="15" fill="rgb(240,63,7)" fg:x="457" fg:w="2"/><text x="67.2588%" y="511.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkSwapchainKHR_T*, std::shared_ptr&lt;SWAPCHAIN_NODE&gt;, 2, robin_hood::hash&lt;VkSwapchainKHR_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="67.1554%" y="485" width="0.1466%" height="15" fill="rgb(249,182,41)" fg:x="458" fg:w="1"/><text x="67.4054%" y="495.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkSwapchainKHR_T*, std::shared_ptr&lt;SWAPCHAIN_NODE&gt;, 2, robin_hood::hash&lt;VkSwapchainKHR_T*, void&gt; &gt;::ConcurrentMapHashObject (1 samples, 0.15%)</title><rect x="67.1554%" y="469" width="0.1466%" height="15" fill="rgb(243,47,26)" fg:x="458" fg:w="1"/><text x="67.4054%" y="479.50"></text></g><g><title>ThreadSafety::StartWriteObject (1 samples, 0.15%)</title><rect x="67.3021%" y="517" width="0.1466%" height="15" fill="rgb(233,48,2)" fg:x="459" fg:w="1"/><text x="67.5521%" y="527.50"></text></g><g><title>counter&lt;VkSemaphore_T*&gt;::StartWrite (1 samples, 0.15%)</title><rect x="67.3021%" y="501" width="0.1466%" height="15" fill="rgb(244,165,34)" fg:x="459" fg:w="1"/><text x="67.5521%" y="511.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkSwapchainKHR_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkSwapchainKHR_T*, void&gt; &gt;::FindResult::~FindResult (1 samples, 0.15%)</title><rect x="67.4487%" y="469" width="0.1466%" height="15" fill="rgb(207,89,7)" fg:x="460" fg:w="1"/><text x="67.6987%" y="479.50"></text></g><g><title>std::pair&lt;bool, std::shared_ptr&lt;ObjectUseData&gt; &gt;::~pair (1 samples, 0.15%)</title><rect x="67.4487%" y="453" width="0.1466%" height="15" fill="rgb(244,117,36)" fg:x="460" fg:w="1"/><text x="67.6987%" y="463.50"></text></g><g><title>std::shared_ptr&lt;ObjectUseData&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="67.4487%" y="437" width="0.1466%" height="15" fill="rgb(226,144,34)" fg:x="460" fg:w="1"/><text x="67.6987%" y="447.50"></text></g><g><title>std::__shared_ptr&lt;ObjectUseData, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="67.4487%" y="421" width="0.1466%" height="15" fill="rgb(213,23,19)" fg:x="460" fg:w="1"/><text x="67.6987%" y="431.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="67.4487%" y="405" width="0.1466%" height="15" fill="rgb(217,75,12)" fg:x="460" fg:w="1"/><text x="67.6987%" y="415.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="67.4487%" y="389" width="0.1466%" height="15" fill="rgb(224,159,17)" fg:x="460" fg:w="1"/><text x="67.6987%" y="399.50"></text></g><g><title>ThreadSafety::PreCallRecordAcquireNextImageKHR (3 samples, 0.44%)</title><rect x="67.3021%" y="533" width="0.4399%" height="15" fill="rgb(217,118,1)" fg:x="459" fg:w="3"/><text x="67.5521%" y="543.50"></text></g><g><title>ThreadSafety::StartWriteObjectParentInstance (2 samples, 0.29%)</title><rect x="67.4487%" y="517" width="0.2933%" height="15" fill="rgb(232,180,48)" fg:x="460" fg:w="2"/><text x="67.6987%" y="527.50"></text></g><g><title>counter&lt;VkSwapchainKHR_T*&gt;::StartWrite (2 samples, 0.29%)</title><rect x="67.4487%" y="501" width="0.2933%" height="15" fill="rgb(230,27,33)" fg:x="460" fg:w="2"/><text x="67.6987%" y="511.50"></text></g><g><title>counter&lt;VkSwapchainKHR_T*&gt;::FindObject (2 samples, 0.29%)</title><rect x="67.4487%" y="485" width="0.2933%" height="15" fill="rgb(205,31,21)" fg:x="460" fg:w="2"/><text x="67.6987%" y="495.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkSwapchainKHR_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkSwapchainKHR_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="67.5953%" y="469" width="0.1466%" height="15" fill="rgb(253,59,4)" fg:x="461" fg:w="1"/><text x="67.8453%" y="479.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkSwapchainKHR_T*, std::shared_ptr&lt;ObjectUseData&gt;, robin_hood::hash&lt;VkSwapchainKHR_T*, void&gt;, std::equal_to&lt;VkSwapchainKHR_T*&gt; &gt;::find (1 samples, 0.15%)</title><rect x="67.5953%" y="453" width="0.1466%" height="15" fill="rgb(224,201,9)" fg:x="461" fg:w="1"/><text x="67.8453%" y="463.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkImageView_T*, std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, robin_hood::hash&lt;VkImageView_T*, void&gt;, std::equal_to&lt;VkImageView_T*&gt; &gt;::findIdx&lt;VkImageView_T*&gt; (1 samples, 0.15%)</title><rect x="67.5953%" y="437" width="0.1466%" height="15" fill="rgb(229,206,30)" fg:x="461" fg:w="1"/><text x="67.8453%" y="447.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkCommandBuffer_T*, std::unique_ptr&lt;LoggingLabelState, std::default_delete&lt;LoggingLabelState&gt; &gt;, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt;, std::equal_to&lt;VkCommandBuffer_T*&gt; &gt;::keyToIdx&lt;VkCommandBuffer_T* const&amp;&gt; (1 samples, 0.15%)</title><rect x="67.5953%" y="421" width="0.1466%" height="15" fill="rgb(212,67,47)" fg:x="461" fg:w="1"/><text x="67.8453%" y="431.50"></text></g><g><title>hell_renderer::vulkan::swapchain::VulkanSwapchain::aquire_next_image (8 samples, 1.17%)</title><rect x="66.7155%" y="581" width="1.1730%" height="15" fill="rgb(211,96,50)" fg:x="455" fg:w="8"/><text x="66.9655%" y="591.50"></text></g><g><title>ash::extensions::khr::swapchain::Swapchain::acquire_next_image (8 samples, 1.17%)</title><rect x="66.7155%" y="565" width="1.1730%" height="15" fill="rgb(252,114,18)" fg:x="455" fg:w="8"/><text x="66.9655%" y="575.50"></text></g><g><title>vulkan_layer_chassis::AcquireNextImageKHR (8 samples, 1.17%)</title><rect x="66.7155%" y="549" width="1.1730%" height="15" fill="rgb(223,58,37)" fg:x="455" fg:w="8"/><text x="66.9655%" y="559.50"></text></g><g><title>ValidationStateTracker::RecordAcquireNextImageState (1 samples, 0.15%)</title><rect x="67.7419%" y="533" width="0.1466%" height="15" fill="rgb(237,70,4)" fg:x="462" fg:w="1"/><text x="67.9919%" y="543.50"></text></g><g><title>SEMAPHORE_STATE::EnqueueAcquire (1 samples, 0.15%)</title><rect x="67.7419%" y="517" width="0.1466%" height="15" fill="rgb(244,85,46)" fg:x="462" fg:w="1"/><text x="67.9919%" y="527.50"></text></g><g><title>std::multimap&lt;unsigned long, SEMAPHORE_STATE::SemOpEntry, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt; &gt;::emplace&lt;unsigned long&amp;, SEMAPHORE_STATE::SemOpEntry&gt; (1 samples, 0.15%)</title><rect x="67.7419%" y="501" width="0.1466%" height="15" fill="rgb(223,39,52)" fg:x="462" fg:w="1"/><text x="67.9919%" y="511.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt; &gt;::_M_emplace_equal&lt;unsigned long&amp;, SEMAPHORE_STATE::SemOpEntry&gt; (1 samples, 0.15%)</title><rect x="67.7419%" y="485" width="0.1466%" height="15" fill="rgb(218,200,14)" fg:x="462" fg:w="1"/><text x="67.9919%" y="495.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt; &gt;::_Auto_node::_Auto_node&lt;unsigned long&amp;, SEMAPHORE_STATE::SemOpEntry&gt; (1 samples, 0.15%)</title><rect x="67.7419%" y="469" width="0.1466%" height="15" fill="rgb(208,171,16)" fg:x="462" fg:w="1"/><text x="67.9919%" y="479.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt; &gt;::_M_create_node&lt;unsigned long&amp;, SEMAPHORE_STATE::SemOpEntry&gt; (1 samples, 0.15%)</title><rect x="67.7419%" y="453" width="0.1466%" height="15" fill="rgb(234,200,18)" fg:x="462" fg:w="1"/><text x="67.9919%" y="463.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt; &gt;::_M_get_node (1 samples, 0.15%)</title><rect x="67.7419%" y="437" width="0.1466%" height="15" fill="rgb(228,45,11)" fg:x="462" fg:w="1"/><text x="67.9919%" y="447.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt; &gt; &gt;::allocate (1 samples, 0.15%)</title><rect x="67.7419%" y="421" width="0.1466%" height="15" fill="rgb(237,182,11)" fg:x="462" fg:w="1"/><text x="67.9919%" y="431.50"></text></g><g><title>std::__new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, SEMAPHORE_STATE::SemOpEntry&gt; &gt; &gt;::allocate (1 samples, 0.15%)</title><rect x="67.7419%" y="405" width="0.1466%" height="15" fill="rgb(241,175,49)" fg:x="462" fg:w="1"/><text x="67.9919%" y="415.50"></text></g><g><title>operator new (1 samples, 0.15%)</title><rect x="67.7419%" y="389" width="0.1466%" height="15" fill="rgb(247,38,35)" fg:x="462" fg:w="1"/><text x="67.9919%" y="399.50"></text></g><g><title>malloc (1 samples, 0.15%)</title><rect x="67.7419%" y="373" width="0.1466%" height="15" fill="rgb(228,39,49)" fg:x="462" fg:w="1"/><text x="67.9919%" y="383.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="67.7419%" y="357" width="0.1466%" height="15" fill="rgb(226,101,26)" fg:x="462" fg:w="1"/><text x="67.9919%" y="367.50"></text></g><g><title>CMD_BUFFER_STATE::AddChild&lt;RENDER_PASS_STATE&gt; (1 samples, 0.15%)</title><rect x="67.8886%" y="501" width="0.1466%" height="15" fill="rgb(206,141,19)" fg:x="463" fg:w="1"/><text x="68.1386%" y="511.50"></text></g><g><title>CMD_BUFFER_STATE::AddChild (1 samples, 0.15%)</title><rect x="67.8886%" y="485" width="0.1466%" height="15" fill="rgb(211,200,13)" fg:x="463" fg:w="1"/><text x="68.1386%" y="495.50"></text></g><g><title>BASE_NODE::AddParent (1 samples, 0.15%)</title><rect x="67.8886%" y="469" width="0.1466%" height="15" fill="rgb(241,121,6)" fg:x="463" fg:w="1"/><text x="68.1386%" y="479.50"></text></g><g><title>BASE_NODE::WriteLockTree (1 samples, 0.15%)</title><rect x="67.8886%" y="453" width="0.1466%" height="15" fill="rgb(234,221,29)" fg:x="463" fg:w="1"/><text x="68.1386%" y="463.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="67.8886%" y="437" width="0.1466%" height="15" fill="rgb(229,136,5)" fg:x="463" fg:w="1"/><text x="68.1386%" y="447.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="67.8886%" y="421" width="0.1466%" height="15" fill="rgb(238,36,11)" fg:x="463" fg:w="1"/><text x="68.1386%" y="431.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="67.8886%" y="405" width="0.1466%" height="15" fill="rgb(251,55,41)" fg:x="463" fg:w="1"/><text x="68.1386%" y="415.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="67.8886%" y="389" width="0.1466%" height="15" fill="rgb(242,34,40)" fg:x="463" fg:w="1"/><text x="68.1386%" y="399.50"></text></g><g><title>BASE_NODE::AddParent (1 samples, 0.15%)</title><rect x="67.8886%" y="373" width="0.1466%" height="15" fill="rgb(215,42,17)" fg:x="463" fg:w="1"/><text x="68.1386%" y="383.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="67.8886%" y="357" width="0.1466%" height="15" fill="rgb(207,44,46)" fg:x="463" fg:w="1"/><text x="68.1386%" y="367.50"></text></g><g><title>CMD_BUFFER_STATE::UpdateAttachmentsView (1 samples, 0.15%)</title><rect x="68.0352%" y="501" width="0.1466%" height="15" fill="rgb(211,206,28)" fg:x="464" fg:w="1"/><text x="68.2852%" y="511.50"></text></g><g><title>std::set&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, std::less&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt; &gt;::insert (1 samples, 0.15%)</title><rect x="68.0352%" y="485" width="0.1466%" height="15" fill="rgb(237,167,16)" fg:x="464" fg:w="1"/><text x="68.2852%" y="495.50"></text></g><g><title>std::_Rb_tree&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, std::_Identity&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt;, std::less&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt; &gt;::_M_insert_unique&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; const&amp;&gt; (1 samples, 0.15%)</title><rect x="68.0352%" y="469" width="0.1466%" height="15" fill="rgb(233,66,6)" fg:x="464" fg:w="1"/><text x="68.2852%" y="479.50"></text></g><g><title>std::_Rb_tree&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, std::_Identity&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt;, std::less&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt;, std::allocator&lt;std::shared_ptr&lt;IMAGE_VIEW_STATE&gt; &gt; &gt;::_M_get_insert_unique_pos (1 samples, 0.15%)</title><rect x="68.0352%" y="453" width="0.1466%" height="15" fill="rgb(246,123,29)" fg:x="464" fg:w="1"/><text x="68.2852%" y="463.50"></text></g><g><title>ValidationStateTracker::Get&lt;RENDER_PASS_STATE, state_object::Traits&lt;RENDER_PASS_STATE&gt; &gt; (1 samples, 0.15%)</title><rect x="68.1818%" y="501" width="0.1466%" height="15" fill="rgb(209,62,40)" fg:x="465" fg:w="1"/><text x="68.4318%" y="511.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkRenderPass_T*, std::shared_ptr&lt;RENDER_PASS_STATE&gt;, 2, robin_hood::hash&lt;VkRenderPass_T*, void&gt; &gt;::FindResult::~FindResult (1 samples, 0.15%)</title><rect x="68.1818%" y="485" width="0.1466%" height="15" fill="rgb(218,4,25)" fg:x="465" fg:w="1"/><text x="68.4318%" y="495.50"></text></g><g><title>std::pair&lt;bool, std::shared_ptr&lt;RENDER_PASS_STATE&gt; &gt;::~pair (1 samples, 0.15%)</title><rect x="68.1818%" y="469" width="0.1466%" height="15" fill="rgb(253,91,49)" fg:x="465" fg:w="1"/><text x="68.4318%" y="479.50"></text></g><g><title>std::shared_ptr&lt;RENDER_PASS_STATE&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="68.1818%" y="453" width="0.1466%" height="15" fill="rgb(228,155,29)" fg:x="465" fg:w="1"/><text x="68.4318%" y="463.50"></text></g><g><title>std::__shared_ptr&lt;RENDER_PASS_STATE, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="68.1818%" y="437" width="0.1466%" height="15" fill="rgb(243,57,37)" fg:x="465" fg:w="1"/><text x="68.4318%" y="447.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="68.1818%" y="421" width="0.1466%" height="15" fill="rgb(244,167,17)" fg:x="465" fg:w="1"/><text x="68.4318%" y="431.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="68.1818%" y="405" width="0.1466%" height="15" fill="rgb(207,181,38)" fg:x="465" fg:w="1"/><text x="68.4318%" y="415.50"></text></g><g><title>__gnu_cxx::__exchange_and_add_dispatch (1 samples, 0.15%)</title><rect x="68.1818%" y="389" width="0.1466%" height="15" fill="rgb(211,8,23)" fg:x="465" fg:w="1"/><text x="68.4318%" y="399.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, std::shared_ptr&lt;FRAMEBUFFER_STATE&gt;, void, robin_hood::hash&lt;std::shared_ptr&lt;FRAMEBUFFER_STATE&gt;, void&gt;, std::equal_to&lt;std::shared_ptr&lt;FRAMEBUFFER_STATE&gt; &gt; &gt;::insert (1 samples, 0.15%)</title><rect x="68.3284%" y="501" width="0.1466%" height="15" fill="rgb(235,11,44)" fg:x="466" fg:w="1"/><text x="68.5784%" y="511.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, std::shared_ptr&lt;FRAMEBUFFER_STATE&gt;, void, robin_hood::hash&lt;std::shared_ptr&lt;FRAMEBUFFER_STATE&gt;, void&gt;, std::equal_to&lt;std::shared_ptr&lt;FRAMEBUFFER_STATE&gt; &gt; &gt;::emplace&lt;std::shared_ptr&lt;FRAMEBUFFER_STATE&gt; const&amp;&gt; (1 samples, 0.15%)</title><rect x="68.3284%" y="485" width="0.1466%" height="15" fill="rgb(248,18,52)" fg:x="466" fg:w="1"/><text x="68.5784%" y="495.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, std::shared_ptr&lt;FRAMEBUFFER_STATE&gt;, void, robin_hood::hash&lt;std::shared_ptr&lt;FRAMEBUFFER_STATE&gt;, void&gt;, std::equal_to&lt;std::shared_ptr&lt;FRAMEBUFFER_STATE&gt; &gt; &gt;::insertKeyPrepareEmptySpot&lt;std::shared_ptr&lt;FRAMEBUFFER_STATE&gt; const&amp;&gt; (1 samples, 0.15%)</title><rect x="68.3284%" y="469" width="0.1466%" height="15" fill="rgb(208,4,7)" fg:x="466" fg:w="1"/><text x="68.5784%" y="479.50"></text></g><g><title>safe_VkRenderPassBeginInfo::operator= (2 samples, 0.29%)</title><rect x="68.4751%" y="501" width="0.2933%" height="15" fill="rgb(240,17,39)" fg:x="467" fg:w="2"/><text x="68.7251%" y="511.50"></text></g><g><title>operator new (1 samples, 0.15%)</title><rect x="68.6217%" y="485" width="0.1466%" height="15" fill="rgb(207,170,3)" fg:x="468" fg:w="1"/><text x="68.8717%" y="495.50"></text></g><g><title>malloc (1 samples, 0.15%)</title><rect x="68.6217%" y="469" width="0.1466%" height="15" fill="rgb(236,100,52)" fg:x="468" fg:w="1"/><text x="68.8717%" y="479.50"></text></g><g><title>safe_VkRenderPassBeginInfo::safe_VkRenderPassBeginInfo (2 samples, 0.29%)</title><rect x="68.7683%" y="501" width="0.2933%" height="15" fill="rgb(246,78,51)" fg:x="469" fg:w="2"/><text x="69.0183%" y="511.50"></text></g><g><title>safe_VkRenderPassBeginInfo::safe_VkRenderPassBeginInfo (2 samples, 0.29%)</title><rect x="68.7683%" y="485" width="0.2933%" height="15" fill="rgb(211,17,15)" fg:x="469" fg:w="2"/><text x="69.0183%" y="495.50"></text></g><g><title>operator new (2 samples, 0.29%)</title><rect x="68.7683%" y="469" width="0.2933%" height="15" fill="rgb(209,59,46)" fg:x="469" fg:w="2"/><text x="69.0183%" y="479.50"></text></g><g><title>malloc (1 samples, 0.15%)</title><rect x="68.9150%" y="453" width="0.1466%" height="15" fill="rgb(210,92,25)" fg:x="470" fg:w="1"/><text x="69.1650%" y="463.50"></text></g><g><title>CoreChecks::PreCallRecordCmdBeginRenderPass (9 samples, 1.32%)</title><rect x="67.8886%" y="549" width="1.3196%" height="15" fill="rgb(238,174,52)" fg:x="463" fg:w="9"/><text x="68.1386%" y="559.50"></text></g><g><title>ValidationStateTracker::PreCallRecordCmdBeginRenderPass (9 samples, 1.32%)</title><rect x="67.8886%" y="533" width="1.3196%" height="15" fill="rgb(230,73,7)" fg:x="463" fg:w="9"/><text x="68.1386%" y="543.50"></text></g><g><title>CMD_BUFFER_STATE::BeginRenderPass (9 samples, 1.32%)</title><rect x="67.8886%" y="517" width="1.3196%" height="15" fill="rgb(243,124,40)" fg:x="463" fg:w="9"/><text x="68.1386%" y="527.50"></text></g><g><title>std::make_shared&lt;std::vector&lt;IMAGE_VIEW_STATE*, std::allocator&lt;IMAGE_VIEW_STATE*&gt; &gt;, unsigned int const&amp;&gt; (1 samples, 0.15%)</title><rect x="69.0616%" y="501" width="0.1466%" height="15" fill="rgb(244,170,11)" fg:x="471" fg:w="1"/><text x="69.3116%" y="511.50"></text></g><g><title>std::shared_ptr&lt;std::vector&lt;IMAGE_VIEW_STATE*, std::allocator&lt;IMAGE_VIEW_STATE*&gt; &gt; &gt;::shared_ptr&lt;std::allocator&lt;void&gt;, unsigned int const&amp;&gt; (1 samples, 0.15%)</title><rect x="69.0616%" y="485" width="0.1466%" height="15" fill="rgb(207,114,54)" fg:x="471" fg:w="1"/><text x="69.3116%" y="495.50"></text></g><g><title>std::__shared_ptr&lt;std::vector&lt;IMAGE_VIEW_STATE*, std::allocator&lt;IMAGE_VIEW_STATE*&gt; &gt;, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, unsigned int const&amp;&gt; (1 samples, 0.15%)</title><rect x="69.0616%" y="469" width="0.1466%" height="15" fill="rgb(205,42,20)" fg:x="471" fg:w="1"/><text x="69.3116%" y="479.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;std::vector&lt;IMAGE_VIEW_STATE*, std::allocator&lt;IMAGE_VIEW_STATE*&gt; &gt;, std::allocator&lt;void&gt;, unsigned int const&amp;&gt; (1 samples, 0.15%)</title><rect x="69.0616%" y="453" width="0.1466%" height="15" fill="rgb(230,30,28)" fg:x="471" fg:w="1"/><text x="69.3116%" y="463.50"></text></g><g><title>std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::vector&lt;IMAGE_VIEW_STATE*, std::allocator&lt;IMAGE_VIEW_STATE*&gt; &gt;, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; (1 samples, 0.15%)</title><rect x="69.0616%" y="437" width="0.1466%" height="15" fill="rgb(205,73,54)" fg:x="471" fg:w="1"/><text x="69.3116%" y="447.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::vector&lt;IMAGE_VIEW_STATE*, std::allocator&lt;IMAGE_VIEW_STATE*&gt; &gt;, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::allocate (1 samples, 0.15%)</title><rect x="69.0616%" y="421" width="0.1466%" height="15" fill="rgb(254,227,23)" fg:x="471" fg:w="1"/><text x="69.3116%" y="431.50"></text></g><g><title>std::__new_allocator&lt;VkDebugUtilsObjectNameInfoEXT&gt;::allocate (1 samples, 0.15%)</title><rect x="69.0616%" y="405" width="0.1466%" height="15" fill="rgb(228,202,34)" fg:x="471" fg:w="1"/><text x="69.3116%" y="415.50"></text></g><g><title>operator new (1 samples, 0.15%)</title><rect x="69.0616%" y="389" width="0.1466%" height="15" fill="rgb(222,225,37)" fg:x="471" fg:w="1"/><text x="69.3116%" y="399.50"></text></g><g><title>malloc (1 samples, 0.15%)</title><rect x="69.0616%" y="373" width="0.1466%" height="15" fill="rgb(221,14,54)" fg:x="471" fg:w="1"/><text x="69.3116%" y="383.50"></text></g><g><title>CMD_BUFFER_STATE::GetImageSubresourceLayoutMap (1 samples, 0.15%)</title><rect x="69.2082%" y="501" width="0.1466%" height="15" fill="rgb(254,102,2)" fg:x="472" fg:w="1"/><text x="69.4582%" y="511.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, IMAGE_STATE const*, std::shared_ptr&lt;image_layout_map::ImageSubresourceLayoutMap&gt;, robin_hood::hash&lt;IMAGE_STATE const*, void&gt;, std::equal_to&lt;IMAGE_STATE const*&gt; &gt;::operator[]&lt;std::shared_ptr&lt;image_layout_map::ImageSubresourceLayoutMap&gt; &gt; (1 samples, 0.15%)</title><rect x="69.2082%" y="485" width="0.1466%" height="15" fill="rgb(232,104,17)" fg:x="472" fg:w="1"/><text x="69.4582%" y="495.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, IMAGE_STATE const*, std::shared_ptr&lt;image_layout_map::ImageSubresourceLayoutMap&gt;, robin_hood::hash&lt;IMAGE_STATE const*, void&gt;, std::equal_to&lt;IMAGE_STATE const*&gt; &gt;::insertKeyPrepareEmptySpot&lt;IMAGE_STATE const*&amp;&gt; (1 samples, 0.15%)</title><rect x="69.2082%" y="469" width="0.1466%" height="15" fill="rgb(250,220,14)" fg:x="472" fg:w="1"/><text x="69.4582%" y="479.50"></text></g><g><title>CMD_BUFFER_STATE::SetImageInitialLayout (2 samples, 0.29%)</title><rect x="69.2082%" y="517" width="0.2933%" height="15" fill="rgb(241,158,9)" fg:x="472" fg:w="2"/><text x="69.4582%" y="527.50"></text></g><g><title>image_layout_map::ImageSubresourceLayoutMap::SetSubresourceRangeInitialLayout (1 samples, 0.15%)</title><rect x="69.3548%" y="501" width="0.1466%" height="15" fill="rgb(246,9,43)" fg:x="473" fg:w="1"/><text x="69.6048%" y="511.50"></text></g><g><title>CMD_BUFFER_STATE::SetImageInitialLayout (1 samples, 0.15%)</title><rect x="69.3548%" y="485" width="0.1466%" height="15" fill="rgb(206,73,33)" fg:x="473" fg:w="1"/><text x="69.6048%" y="495.50"></text></g><g><title>image_layout_map::UpdateLayoutStateImpl&lt;sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt; &gt; (1 samples, 0.15%)</title><rect x="69.3548%" y="469" width="0.1466%" height="15" fill="rgb(222,79,8)" fg:x="473" fg:w="1"/><text x="69.6048%" y="479.50"></text></g><g><title>sparse_container::cached_lower_bound_impl&lt;sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt; &gt;::invalidate (1 samples, 0.15%)</title><rect x="69.3548%" y="453" width="0.1466%" height="15" fill="rgb(234,8,54)" fg:x="473" fg:w="1"/><text x="69.6048%" y="463.50"></text></g><g><title>sparse_container::cached_lower_bound_impl&lt;sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt; &gt;::set_value (1 samples, 0.15%)</title><rect x="69.3548%" y="437" width="0.1466%" height="15" fill="rgb(209,134,38)" fg:x="473" fg:w="1"/><text x="69.6048%" y="447.50"></text></g><g><title>sparse_container::cached_lower_bound_impl&lt;sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt; &gt;::is_valid (1 samples, 0.15%)</title><rect x="69.3548%" y="421" width="0.1466%" height="15" fill="rgb(230,127,29)" fg:x="473" fg:w="1"/><text x="69.6048%" y="431.50"></text></g><g><title>sparse_container::cached_lower_bound_impl&lt;sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt; &gt;::includes (1 samples, 0.15%)</title><rect x="69.3548%" y="405" width="0.1466%" height="15" fill="rgb(242,44,41)" fg:x="473" fg:w="1"/><text x="69.6048%" y="415.50"></text></g><g><title>sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::IteratorImpl&lt;sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;, std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; &gt;::operator (1 samples, 0.15%)</title><rect x="69.3548%" y="389" width="0.1466%" height="15" fill="rgb(222,56,43)" fg:x="473" fg:w="1"/><text x="69.6048%" y="399.50"></text></g><g><title> (1 samples, 0.15%)</title><rect x="69.3548%" y="373" width="0.1466%" height="15" fill="rgb(238,39,47)" fg:x="473" fg:w="1"/><text x="69.6048%" y="383.50"></text></g><g><title>sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::get_value (1 samples, 0.15%)</title><rect x="69.3548%" y="357" width="0.1466%" height="15" fill="rgb(226,79,43)" fg:x="473" fg:w="1"/><text x="69.6048%" y="367.50"></text></g><g><title>std::array&lt;sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::BackingStore, 16ul&gt;::operator[] (1 samples, 0.15%)</title><rect x="69.3548%" y="341" width="0.1466%" height="15" fill="rgb(242,105,53)" fg:x="473" fg:w="1"/><text x="69.6048%" y="351.50"></text></g><g><title>CoreChecks::TransitionBeginRenderPassLayouts (3 samples, 0.44%)</title><rect x="69.2082%" y="533" width="0.4399%" height="15" fill="rgb(251,132,46)" fg:x="472" fg:w="3"/><text x="69.4582%" y="543.50"></text></g><g><title>CoreChecks::TransitionSubpassLayouts (1 samples, 0.15%)</title><rect x="69.5015%" y="517" width="0.1466%" height="15" fill="rgb(231,77,14)" fg:x="474" fg:w="1"/><text x="69.7515%" y="527.50"></text></g><g><title>CMD_BUFFER_STATE::SetImageViewLayout (1 samples, 0.15%)</title><rect x="69.5015%" y="501" width="0.1466%" height="15" fill="rgb(240,135,9)" fg:x="474" fg:w="1"/><text x="69.7515%" y="511.50"></text></g><g><title>CMD_BUFFER_STATE::SetImageLayout (1 samples, 0.15%)</title><rect x="69.5015%" y="485" width="0.1466%" height="15" fill="rgb(248,109,14)" fg:x="474" fg:w="1"/><text x="69.7515%" y="495.50"></text></g><g><title>image_layout_map::ImageSubresourceLayoutMap::SetSubresourceRangeLayout (1 samples, 0.15%)</title><rect x="69.5015%" y="469" width="0.1466%" height="15" fill="rgb(227,146,52)" fg:x="474" fg:w="1"/><text x="69.7515%" y="479.50"></text></g><g><title>image_layout_map::ImageSubresourceLayoutMap::SetSubresourceRangeLayout (1 samples, 0.15%)</title><rect x="69.5015%" y="453" width="0.1466%" height="15" fill="rgb(232,54,3)" fg:x="474" fg:w="1"/><text x="69.7515%" y="463.50"></text></g><g><title>image_layout_map::UpdateLayoutStateImpl&lt;sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt; &gt; (1 samples, 0.15%)</title><rect x="69.5015%" y="437" width="0.1466%" height="15" fill="rgb(229,201,43)" fg:x="474" fg:w="1"/><text x="69.7515%" y="447.50"></text></g><g><title>sparse_container::range&lt;unsigned long&gt;::operator&amp; (1 samples, 0.15%)</title><rect x="69.5015%" y="421" width="0.1466%" height="15" fill="rgb(252,161,33)" fg:x="474" fg:w="1"/><text x="69.7515%" y="431.50"></text></g><g><title>sparse_container::range&lt;unsigned long&gt;::range (1 samples, 0.15%)</title><rect x="69.5015%" y="405" width="0.1466%" height="15" fill="rgb(226,146,40)" fg:x="474" fg:w="1"/><text x="69.7515%" y="415.50"></text></g><g><title>CoreChecks::RecordCmdBeginRenderPassLayouts (4 samples, 0.59%)</title><rect x="69.2082%" y="549" width="0.5865%" height="15" fill="rgb(219,47,25)" fg:x="472" fg:w="4"/><text x="69.4582%" y="559.50"></text></g><g><title>LockedSharedPtr&lt;CMD_BUFFER_STATE, std::unique_lock&lt;ReadWriteLock&gt; &gt;::~LockedSharedPtr (1 samples, 0.15%)</title><rect x="69.6481%" y="533" width="0.1466%" height="15" fill="rgb(250,135,13)" fg:x="475" fg:w="1"/><text x="69.8981%" y="543.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="69.6481%" y="517" width="0.1466%" height="15" fill="rgb(219,229,18)" fg:x="475" fg:w="1"/><text x="69.8981%" y="527.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="69.6481%" y="501" width="0.1466%" height="15" fill="rgb(217,152,27)" fg:x="475" fg:w="1"/><text x="69.8981%" y="511.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="69.6481%" y="485" width="0.1466%" height="15" fill="rgb(225,71,47)" fg:x="475" fg:w="1"/><text x="69.8981%" y="495.50"></text></g><g><title>CoreChecks::RecordCmdBeginRenderPassLayouts (1 samples, 0.15%)</title><rect x="69.6481%" y="469" width="0.1466%" height="15" fill="rgb(220,139,14)" fg:x="475" fg:w="1"/><text x="69.8981%" y="479.50"></text></g><g><title>pthread_mutex_unlock (1 samples, 0.15%)</title><rect x="69.6481%" y="453" width="0.1466%" height="15" fill="rgb(247,54,32)" fg:x="475" fg:w="1"/><text x="69.8981%" y="463.50"></text></g><g><title>CoreChecks::ValidateClearDepthStencilValue (1 samples, 0.15%)</title><rect x="69.7947%" y="533" width="0.1466%" height="15" fill="rgb(252,131,39)" fg:x="476" fg:w="1"/><text x="70.0447%" y="543.50"></text></g><g><title>MEMORY_TRACKED_RESOURCE_STATE&lt;IMAGE_STATE, BindableNoMemoryTracker&gt;::DoesResourceMemoryOverlap (1 samples, 0.15%)</title><rect x="69.9413%" y="517" width="0.1466%" height="15" fill="rgb(210,108,39)" fg:x="477" fg:w="1"/><text x="70.1913%" y="527.50"></text></g><g><title>std::map&lt;VkDeviceMemory_T*, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt;, std::less&lt;VkDeviceMemory_T*&gt;, std::allocator&lt;std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt; &gt; &gt;::~map (1 samples, 0.15%)</title><rect x="69.9413%" y="501" width="0.1466%" height="15" fill="rgb(205,23,29)" fg:x="477" fg:w="1"/><text x="70.1913%" y="511.50"></text></g><g><title>std::_Rb_tree&lt;VkDeviceMemory_T*, std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt; &gt;, std::less&lt;VkDeviceMemory_T*&gt;, std::allocator&lt;std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt; &gt; &gt;::~_Rb_tree (1 samples, 0.15%)</title><rect x="69.9413%" y="485" width="0.1466%" height="15" fill="rgb(246,139,46)" fg:x="477" fg:w="1"/><text x="70.1913%" y="495.50"></text></g><g><title>std::_Rb_tree&lt;VkDeviceMemory_T*, std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt; &gt;, std::less&lt;VkDeviceMemory_T*&gt;, std::allocator&lt;std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt; &gt; &gt;::_M_erase (1 samples, 0.15%)</title><rect x="69.9413%" y="469" width="0.1466%" height="15" fill="rgb(250,81,26)" fg:x="477" fg:w="1"/><text x="70.1913%" y="479.50"></text></g><g><title>CoreChecks::ValidateDependencies (2 samples, 0.29%)</title><rect x="69.9413%" y="533" width="0.2933%" height="15" fill="rgb(214,104,7)" fg:x="477" fg:w="2"/><text x="70.1913%" y="543.50"></text></g><g><title>subresource_adapter::ImageRangeGenerator::ImageRangeGenerator (1 samples, 0.15%)</title><rect x="70.0880%" y="517" width="0.1466%" height="15" fill="rgb(233,189,8)" fg:x="478" fg:w="1"/><text x="70.3380%" y="527.50"></text></g><g><title>CoreChecks::ValidateRenderPassLayoutAgainstFramebufferImageUsage (1 samples, 0.15%)</title><rect x="70.2346%" y="517" width="0.1466%" height="15" fill="rgb(228,141,17)" fg:x="479" fg:w="1"/><text x="70.4846%" y="527.50"></text></g><g><title>LvlFindInChain&lt;VkImageStencilUsageCreateInfo&gt; (1 samples, 0.15%)</title><rect x="70.2346%" y="501" width="0.1466%" height="15" fill="rgb(247,157,1)" fg:x="479" fg:w="1"/><text x="70.4846%" y="511.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkImageView_T*, std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, robin_hood::hash&lt;VkImageView_T*, void&gt;, std::equal_to&lt;VkImageView_T*&gt; &gt;::find (1 samples, 0.15%)</title><rect x="70.3812%" y="485" width="0.1466%" height="15" fill="rgb(249,225,5)" fg:x="480" fg:w="1"/><text x="70.6312%" y="495.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkImageView_T*, std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, robin_hood::hash&lt;VkImageView_T*, void&gt;, std::equal_to&lt;VkImageView_T*&gt; &gt;::findIdx&lt;VkImageView_T*&gt; (1 samples, 0.15%)</title><rect x="70.3812%" y="469" width="0.1466%" height="15" fill="rgb(242,55,13)" fg:x="480" fg:w="1"/><text x="70.6312%" y="479.50"></text></g><g><title>std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;::shared_ptr (1 samples, 0.15%)</title><rect x="70.5279%" y="485" width="0.1466%" height="15" fill="rgb(230,49,50)" fg:x="481" fg:w="1"/><text x="70.7779%" y="495.50"></text></g><g><title>std::__shared_ptr&lt;IMAGE_VIEW_STATE, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr (1 samples, 0.15%)</title><rect x="70.5279%" y="469" width="0.1466%" height="15" fill="rgb(241,111,38)" fg:x="481" fg:w="1"/><text x="70.7779%" y="479.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count (1 samples, 0.15%)</title><rect x="70.5279%" y="453" width="0.1466%" height="15" fill="rgb(252,155,4)" fg:x="481" fg:w="1"/><text x="70.7779%" y="463.50"></text></g><g><title>CoreChecks::ValidateCmdBeginRenderPass (7 samples, 1.03%)</title><rect x="69.7947%" y="549" width="1.0264%" height="15" fill="rgb(212,69,32)" fg:x="476" fg:w="7"/><text x="70.0447%" y="559.50"></text></g><g><title>CoreChecks::VerifyFramebufferAndRenderPassLayouts (4 samples, 0.59%)</title><rect x="70.2346%" y="533" width="0.5865%" height="15" fill="rgb(243,107,47)" fg:x="479" fg:w="4"/><text x="70.4846%" y="543.50"></text></g><g><title>ValidationStateTracker::Get&lt;IMAGE_VIEW_STATE, state_object::Traits&lt;IMAGE_VIEW_STATE&gt; &gt; (3 samples, 0.44%)</title><rect x="70.3812%" y="517" width="0.4399%" height="15" fill="rgb(247,130,12)" fg:x="480" fg:w="3"/><text x="70.6312%" y="527.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkImageView_T*, std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, 2, robin_hood::hash&lt;VkImageView_T*, void&gt; &gt;::find (3 samples, 0.44%)</title><rect x="70.3812%" y="501" width="0.4399%" height="15" fill="rgb(233,74,16)" fg:x="480" fg:w="3"/><text x="70.6312%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="70.6745%" y="485" width="0.1466%" height="15" fill="rgb(208,58,18)" fg:x="482" fg:w="1"/><text x="70.9245%" y="495.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="70.6745%" y="469" width="0.1466%" height="15" fill="rgb(242,225,1)" fg:x="482" fg:w="1"/><text x="70.9245%" y="479.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="70.6745%" y="453" width="0.1466%" height="15" fill="rgb(249,39,40)" fg:x="482" fg:w="1"/><text x="70.9245%" y="463.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="70.6745%" y="437" width="0.1466%" height="15" fill="rgb(207,72,44)" fg:x="482" fg:w="1"/><text x="70.9245%" y="447.50"></text></g><g><title>ValidationStateTracker::Get&lt;IMAGE_VIEW_STATE, state_object::Traits&lt;IMAGE_VIEW_STATE&gt; &gt; (1 samples, 0.15%)</title><rect x="70.6745%" y="421" width="0.1466%" height="15" fill="rgb(215,193,12)" fg:x="482" fg:w="1"/><text x="70.9245%" y="431.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="70.6745%" y="405" width="0.1466%" height="15" fill="rgb(248,41,39)" fg:x="482" fg:w="1"/><text x="70.9245%" y="415.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="72.4340%" y="421" width="0.1466%" height="15" fill="rgb(253,85,4)" fg:x="494" fg:w="1"/><text x="72.6840%" y="431.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="73.7537%" y="373" width="0.2933%" height="15" fill="rgb(243,70,31)" fg:x="503" fg:w="2"/><text x="74.0037%" y="383.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="73.9003%" y="357" width="0.1466%" height="15" fill="rgb(253,195,26)" fg:x="504" fg:w="1"/><text x="74.1503%" y="367.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="73.9003%" y="341" width="0.1466%" height="15" fill="rgb(243,42,11)" fg:x="504" fg:w="1"/><text x="74.1503%" y="351.50"></text></g><g><title>hell_renderer::vulkan::vulkan_backend::VulkanBackend::begin_render_pass (43 samples, 6.30%)</title><rect x="67.8886%" y="581" width="6.3050%" height="15" fill="rgb(239,66,17)" fg:x="463" fg:w="43"/><text x="68.1386%" y="591.50">hell_ren..</text></g><g><title>vulkan_layer_chassis::CmdBeginRenderPass (43 samples, 6.30%)</title><rect x="67.8886%" y="565" width="6.3050%" height="15" fill="rgb(217,132,21)" fg:x="463" fg:w="43"/><text x="68.1386%" y="575.50">vulkan_l..</text></g><g><title>DispatchCmdBeginRenderPass (23 samples, 3.37%)</title><rect x="70.8211%" y="549" width="3.3724%" height="15" fill="rgb(252,202,21)" fg:x="483" fg:w="23"/><text x="71.0711%" y="559.50">Dis..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (23 samples, 3.37%)</title><rect x="70.8211%" y="533" width="3.3724%" height="15" fill="rgb(233,98,36)" fg:x="483" fg:w="23"/><text x="71.0711%" y="543.50">[li..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (23 samples, 3.37%)</title><rect x="70.8211%" y="517" width="3.3724%" height="15" fill="rgb(216,153,54)" fg:x="483" fg:w="23"/><text x="71.0711%" y="527.50">[li..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (23 samples, 3.37%)</title><rect x="70.8211%" y="501" width="3.3724%" height="15" fill="rgb(250,99,7)" fg:x="483" fg:w="23"/><text x="71.0711%" y="511.50">[li..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (21 samples, 3.08%)</title><rect x="71.1144%" y="485" width="3.0792%" height="15" fill="rgb(207,56,50)" fg:x="485" fg:w="21"/><text x="71.3644%" y="495.50">[li..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (18 samples, 2.64%)</title><rect x="71.5543%" y="469" width="2.6393%" height="15" fill="rgb(244,61,34)" fg:x="488" fg:w="18"/><text x="71.8043%" y="479.50">[l..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (17 samples, 2.49%)</title><rect x="71.7009%" y="453" width="2.4927%" height="15" fill="rgb(241,50,38)" fg:x="489" fg:w="17"/><text x="71.9509%" y="463.50">[l..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (14 samples, 2.05%)</title><rect x="72.1408%" y="437" width="2.0528%" height="15" fill="rgb(212,166,30)" fg:x="492" fg:w="14"/><text x="72.3908%" y="447.50">[..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (11 samples, 1.61%)</title><rect x="72.5806%" y="421" width="1.6129%" height="15" fill="rgb(249,127,32)" fg:x="495" fg:w="11"/><text x="72.8306%" y="431.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (11 samples, 1.61%)</title><rect x="72.5806%" y="405" width="1.6129%" height="15" fill="rgb(209,103,0)" fg:x="495" fg:w="11"/><text x="72.8306%" y="415.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (5 samples, 0.73%)</title><rect x="73.4604%" y="389" width="0.7331%" height="15" fill="rgb(238,209,51)" fg:x="501" fg:w="5"/><text x="73.7104%" y="399.50"></text></g><g><title>memcpy (1 samples, 0.15%)</title><rect x="74.0469%" y="373" width="0.1466%" height="15" fill="rgb(237,56,23)" fg:x="505" fg:w="1"/><text x="74.2969%" y="383.50"></text></g><g><title>vulkan_layer_chassis::CmdBindIndexBuffer (1 samples, 0.15%)</title><rect x="74.1935%" y="581" width="0.1466%" height="15" fill="rgb(215,153,46)" fg:x="506" fg:w="1"/><text x="74.4435%" y="591.50"></text></g><g><title>ThreadSafety::PreCallRecordCmdBindIndexBuffer (1 samples, 0.15%)</title><rect x="74.1935%" y="565" width="0.1466%" height="15" fill="rgb(224,49,31)" fg:x="506" fg:w="1"/><text x="74.4435%" y="575.50"></text></g><g><title>ThreadSafety::StartWriteObject (1 samples, 0.15%)</title><rect x="74.1935%" y="549" width="0.1466%" height="15" fill="rgb(250,18,42)" fg:x="506" fg:w="1"/><text x="74.4435%" y="559.50"></text></g><g><title>ThreadSafety::StartWriteObject (1 samples, 0.15%)</title><rect x="74.1935%" y="533" width="0.1466%" height="15" fill="rgb(215,176,39)" fg:x="506" fg:w="1"/><text x="74.4435%" y="543.50"></text></g><g><title>counter&lt;VkCommandPool_T*&gt;::StartWrite (1 samples, 0.15%)</title><rect x="74.1935%" y="517" width="0.1466%" height="15" fill="rgb(223,77,29)" fg:x="506" fg:w="1"/><text x="74.4435%" y="527.50"></text></g><g><title>counter&lt;VkCommandPool_T*&gt;::FindObject (1 samples, 0.15%)</title><rect x="74.1935%" y="501" width="0.1466%" height="15" fill="rgb(234,94,52)" fg:x="506" fg:w="1"/><text x="74.4435%" y="511.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandPool_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkCommandPool_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="74.1935%" y="485" width="0.1466%" height="15" fill="rgb(220,154,50)" fg:x="506" fg:w="1"/><text x="74.4435%" y="495.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="74.1935%" y="469" width="0.1466%" height="15" fill="rgb(212,11,10)" fg:x="506" fg:w="1"/><text x="74.4435%" y="479.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="74.1935%" y="453" width="0.1466%" height="15" fill="rgb(205,166,19)" fg:x="506" fg:w="1"/><text x="74.4435%" y="463.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="74.1935%" y="437" width="0.1466%" height="15" fill="rgb(244,198,16)" fg:x="506" fg:w="1"/><text x="74.4435%" y="447.50"></text></g><g><title>counter&lt;VkCommandPool_T*&gt;::FindObject (1 samples, 0.15%)</title><rect x="74.1935%" y="421" width="0.1466%" height="15" fill="rgb(219,69,12)" fg:x="506" fg:w="1"/><text x="74.4435%" y="431.50"></text></g><g><title>CoreChecks::PreCallValidateCmdBindPipeline (1 samples, 0.15%)</title><rect x="74.3402%" y="565" width="0.1466%" height="15" fill="rgb(245,30,7)" fg:x="507" fg:w="1"/><text x="74.5902%" y="575.50"></text></g><g><title>ValidationStateTracker::Get&lt;PIPELINE_STATE, state_object::Traits&lt;PIPELINE_STATE&gt; &gt; (1 samples, 0.15%)</title><rect x="74.3402%" y="549" width="0.1466%" height="15" fill="rgb(218,221,48)" fg:x="507" fg:w="1"/><text x="74.5902%" y="559.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkPipeline_T*, std::shared_ptr&lt;PIPELINE_STATE&gt;, 2, robin_hood::hash&lt;VkPipeline_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="74.3402%" y="533" width="0.1466%" height="15" fill="rgb(216,66,15)" fg:x="507" fg:w="1"/><text x="74.5902%" y="543.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="74.3402%" y="517" width="0.1466%" height="15" fill="rgb(226,122,50)" fg:x="507" fg:w="1"/><text x="74.5902%" y="527.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="74.3402%" y="501" width="0.1466%" height="15" fill="rgb(239,156,16)" fg:x="507" fg:w="1"/><text x="74.5902%" y="511.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="74.3402%" y="485" width="0.1466%" height="15" fill="rgb(224,27,38)" fg:x="507" fg:w="1"/><text x="74.5902%" y="495.50"></text></g><g><title>ValidationStateTracker::Get&lt;PIPELINE_STATE, state_object::Traits&lt;PIPELINE_STATE&gt; &gt; (1 samples, 0.15%)</title><rect x="74.3402%" y="469" width="0.1466%" height="15" fill="rgb(224,39,27)" fg:x="507" fg:w="1"/><text x="74.5902%" y="479.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="74.3402%" y="453" width="0.1466%" height="15" fill="rgb(215,92,29)" fg:x="507" fg:w="1"/><text x="74.5902%" y="463.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkPipeline_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkPipeline_T*, void&gt; &gt;::FindResult::~FindResult (1 samples, 0.15%)</title><rect x="74.4868%" y="533" width="0.1466%" height="15" fill="rgb(207,159,16)" fg:x="508" fg:w="1"/><text x="74.7368%" y="543.50"></text></g><g><title>std::pair&lt;bool, std::shared_ptr&lt;ObjectUseData&gt; &gt;::~pair (1 samples, 0.15%)</title><rect x="74.4868%" y="517" width="0.1466%" height="15" fill="rgb(238,163,47)" fg:x="508" fg:w="1"/><text x="74.7368%" y="527.50"></text></g><g><title>std::shared_ptr&lt;ObjectUseData&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="74.4868%" y="501" width="0.1466%" height="15" fill="rgb(219,91,49)" fg:x="508" fg:w="1"/><text x="74.7368%" y="511.50"></text></g><g><title>std::__shared_ptr&lt;ObjectUseData, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="74.4868%" y="485" width="0.1466%" height="15" fill="rgb(227,167,31)" fg:x="508" fg:w="1"/><text x="74.7368%" y="495.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="74.4868%" y="469" width="0.1466%" height="15" fill="rgb(234,80,54)" fg:x="508" fg:w="1"/><text x="74.7368%" y="479.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="74.4868%" y="453" width="0.1466%" height="15" fill="rgb(212,114,2)" fg:x="508" fg:w="1"/><text x="74.7368%" y="463.50"></text></g><g><title>vulkan_layer_chassis::CmdBindPipeline (3 samples, 0.44%)</title><rect x="74.3402%" y="581" width="0.4399%" height="15" fill="rgb(234,50,24)" fg:x="507" fg:w="3"/><text x="74.5902%" y="591.50"></text></g><g><title>counter&lt;VkPipeline_T*&gt;::StartRead (2 samples, 0.29%)</title><rect x="74.4868%" y="565" width="0.2933%" height="15" fill="rgb(221,68,8)" fg:x="508" fg:w="2"/><text x="74.7368%" y="575.50"></text></g><g><title>counter&lt;VkPipeline_T*&gt;::FindObject (2 samples, 0.29%)</title><rect x="74.4868%" y="549" width="0.2933%" height="15" fill="rgb(254,180,31)" fg:x="508" fg:w="2"/><text x="74.7368%" y="559.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkPipeline_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkPipeline_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="74.6334%" y="533" width="0.1466%" height="15" fill="rgb(247,130,50)" fg:x="509" fg:w="1"/><text x="74.8834%" y="543.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="74.6334%" y="517" width="0.1466%" height="15" fill="rgb(211,109,4)" fg:x="509" fg:w="1"/><text x="74.8834%" y="527.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="74.6334%" y="501" width="0.1466%" height="15" fill="rgb(238,50,21)" fg:x="509" fg:w="1"/><text x="74.8834%" y="511.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="74.6334%" y="485" width="0.1466%" height="15" fill="rgb(225,57,45)" fg:x="509" fg:w="1"/><text x="74.8834%" y="495.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="74.6334%" y="469" width="0.1466%" height="15" fill="rgb(209,196,50)" fg:x="509" fg:w="1"/><text x="74.8834%" y="479.50"></text></g><g><title>counter&lt;VkPipeline_T*&gt;::FindObject (1 samples, 0.15%)</title><rect x="74.6334%" y="453" width="0.1466%" height="15" fill="rgb(242,140,13)" fg:x="509" fg:w="1"/><text x="74.8834%" y="463.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="74.6334%" y="437" width="0.1466%" height="15" fill="rgb(217,111,7)" fg:x="509" fg:w="1"/><text x="74.8834%" y="447.50"></text></g><g><title>CoreChecks::ValidateMemoryIsBoundToBuffer (2 samples, 0.29%)</title><rect x="74.7801%" y="549" width="0.2933%" height="15" fill="rgb(253,193,51)" fg:x="510" fg:w="2"/><text x="75.0301%" y="559.50"></text></g><g><title>CoreChecks::ValidateMemoryIsBoundToBuffer (2 samples, 0.29%)</title><rect x="74.7801%" y="533" width="0.2933%" height="15" fill="rgb(252,70,29)" fg:x="510" fg:w="2"/><text x="75.0301%" y="543.50"></text></g><g><title>BINDABLE::MemState (2 samples, 0.29%)</title><rect x="74.7801%" y="517" width="0.2933%" height="15" fill="rgb(232,127,12)" fg:x="510" fg:w="2"/><text x="75.0301%" y="527.50"></text></g><g><title>MEMORY_TRACKED_RESOURCE_STATE&lt;BUFFER_STATE, BindableLinearMemoryTracker&gt;::Binding (2 samples, 0.29%)</title><rect x="74.7801%" y="501" width="0.2933%" height="15" fill="rgb(211,180,21)" fg:x="510" fg:w="2"/><text x="75.0301%" y="511.50"></text></g><g><title>BindableLinearMemoryTracker::Binding (1 samples, 0.15%)</title><rect x="74.9267%" y="485" width="0.1466%" height="15" fill="rgb(229,72,13)" fg:x="511" fg:w="1"/><text x="75.1767%" y="495.50"></text></g><g><title>std::__shared_ptr&lt;DEVICE_MEMORY_STATE, (__gnu_cxx::_Lock_policy)2&gt;::operator bool (1 samples, 0.15%)</title><rect x="74.9267%" y="469" width="0.1466%" height="15" fill="rgb(240,211,49)" fg:x="511" fg:w="1"/><text x="75.1767%" y="479.50"></text></g><g><title>CoreChecks::PreCallValidateCmdBindVertexBuffers (3 samples, 0.44%)</title><rect x="74.7801%" y="565" width="0.4399%" height="15" fill="rgb(219,149,40)" fg:x="510" fg:w="3"/><text x="75.0301%" y="575.50"></text></g><g><title>ValidationStateTracker::Get&lt;BUFFER_STATE, state_object::Traits&lt;BUFFER_STATE&gt; &gt; (1 samples, 0.15%)</title><rect x="75.0733%" y="549" width="0.1466%" height="15" fill="rgb(210,127,46)" fg:x="512" fg:w="1"/><text x="75.3233%" y="559.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkBuffer_T*, std::shared_ptr&lt;BUFFER_STATE&gt;, 2, robin_hood::hash&lt;VkBuffer_T*, void&gt; &gt;::FindResult::~FindResult (1 samples, 0.15%)</title><rect x="75.0733%" y="533" width="0.1466%" height="15" fill="rgb(220,106,7)" fg:x="512" fg:w="1"/><text x="75.3233%" y="543.50"></text></g><g><title>std::pair&lt;bool, std::shared_ptr&lt;BUFFER_STATE&gt; &gt;::~pair (1 samples, 0.15%)</title><rect x="75.0733%" y="517" width="0.1466%" height="15" fill="rgb(249,31,22)" fg:x="512" fg:w="1"/><text x="75.3233%" y="527.50"></text></g><g><title>std::shared_ptr&lt;BUFFER_STATE&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="75.0733%" y="501" width="0.1466%" height="15" fill="rgb(253,1,49)" fg:x="512" fg:w="1"/><text x="75.3233%" y="511.50"></text></g><g><title>std::__shared_ptr&lt;BUFFER_STATE, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="75.0733%" y="485" width="0.1466%" height="15" fill="rgb(227,144,33)" fg:x="512" fg:w="1"/><text x="75.3233%" y="495.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="75.0733%" y="469" width="0.1466%" height="15" fill="rgb(249,163,44)" fg:x="512" fg:w="1"/><text x="75.3233%" y="479.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="75.0733%" y="453" width="0.1466%" height="15" fill="rgb(234,15,39)" fg:x="512" fg:w="1"/><text x="75.3233%" y="463.50"></text></g><g><title>ObjectLifetimes::PreCallValidateCmdBindVertexBuffers (1 samples, 0.15%)</title><rect x="75.2199%" y="565" width="0.1466%" height="15" fill="rgb(207,66,16)" fg:x="513" fg:w="1"/><text x="75.4699%" y="575.50"></text></g><g><title>ObjectLifetimes::ValidateObject&lt;VkPhysicalDevice_T*&gt; (1 samples, 0.15%)</title><rect x="75.2199%" y="549" width="0.1466%" height="15" fill="rgb(233,112,24)" fg:x="513" fg:w="1"/><text x="75.4699%" y="559.50"></text></g><g><title>ObjectLifetimes::CheckObjectValidity (1 samples, 0.15%)</title><rect x="75.2199%" y="533" width="0.1466%" height="15" fill="rgb(230,90,22)" fg:x="513" fg:w="1"/><text x="75.4699%" y="543.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, std::shared_ptr&lt;ObjTrackState&gt;, 6, robin_hood::hash&lt;unsigned long, void&gt; &gt;::contains (1 samples, 0.15%)</title><rect x="75.2199%" y="517" width="0.1466%" height="15" fill="rgb(229,61,13)" fg:x="513" fg:w="1"/><text x="75.4699%" y="527.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="75.2199%" y="501" width="0.1466%" height="15" fill="rgb(225,57,24)" fg:x="513" fg:w="1"/><text x="75.4699%" y="511.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="75.2199%" y="485" width="0.1466%" height="15" fill="rgb(208,169,48)" fg:x="513" fg:w="1"/><text x="75.4699%" y="495.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="75.2199%" y="469" width="0.1466%" height="15" fill="rgb(244,218,51)" fg:x="513" fg:w="1"/><text x="75.4699%" y="479.50"></text></g><g><title>vl_concurrent_unordered_map&lt;unsigned long, std::shared_ptr&lt;ObjTrackState&gt;, 6, robin_hood::hash&lt;unsigned long, void&gt; &gt;::contains (1 samples, 0.15%)</title><rect x="75.2199%" y="453" width="0.1466%" height="15" fill="rgb(214,148,10)" fg:x="513" fg:w="1"/><text x="75.4699%" y="463.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="75.2199%" y="437" width="0.1466%" height="15" fill="rgb(225,174,27)" fg:x="513" fg:w="1"/><text x="75.4699%" y="447.50"></text></g><g><title>vulkan_layer_chassis::CmdBindVertexBuffers (5 samples, 0.73%)</title><rect x="74.7801%" y="581" width="0.7331%" height="15" fill="rgb(230,96,26)" fg:x="510" fg:w="5"/><text x="75.0301%" y="591.50"></text></g><g><title>ThreadSafety::PostCallRecordCmdBindVertexBuffers (1 samples, 0.15%)</title><rect x="75.3666%" y="565" width="0.1466%" height="15" fill="rgb(232,10,30)" fg:x="514" fg:w="1"/><text x="75.6166%" y="575.50"></text></g><g><title>ThreadSafety::PostCallRecordCmdBindVertexBuffers (1 samples, 0.15%)</title><rect x="75.3666%" y="549" width="0.1466%" height="15" fill="rgb(222,8,50)" fg:x="514" fg:w="1"/><text x="75.6166%" y="559.50"></text></g><g><title>ThreadSafety::FinishReadObject (1 samples, 0.15%)</title><rect x="75.3666%" y="533" width="0.1466%" height="15" fill="rgb(213,81,27)" fg:x="514" fg:w="1"/><text x="75.6166%" y="543.50"></text></g><g><title>counter&lt;VkBuffer_T*&gt;::FinishRead (1 samples, 0.15%)</title><rect x="75.3666%" y="517" width="0.1466%" height="15" fill="rgb(245,50,10)" fg:x="514" fg:w="1"/><text x="75.6166%" y="527.50"></text></g><g><title>counter&lt;VkBuffer_T*&gt;::FindObject (1 samples, 0.15%)</title><rect x="75.3666%" y="501" width="0.1466%" height="15" fill="rgb(216,100,18)" fg:x="514" fg:w="1"/><text x="75.6166%" y="511.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkBuffer_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkBuffer_T*, void&gt; &gt;::FindResult::~FindResult (1 samples, 0.15%)</title><rect x="75.3666%" y="485" width="0.1466%" height="15" fill="rgb(236,147,54)" fg:x="514" fg:w="1"/><text x="75.6166%" y="495.50"></text></g><g><title>std::pair&lt;bool, std::shared_ptr&lt;ObjectUseData&gt; &gt;::~pair (1 samples, 0.15%)</title><rect x="75.3666%" y="469" width="0.1466%" height="15" fill="rgb(205,143,26)" fg:x="514" fg:w="1"/><text x="75.6166%" y="479.50"></text></g><g><title>std::shared_ptr&lt;ObjectUseData&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="75.3666%" y="453" width="0.1466%" height="15" fill="rgb(236,26,9)" fg:x="514" fg:w="1"/><text x="75.6166%" y="463.50"></text></g><g><title>std::__shared_ptr&lt;ObjectUseData, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="75.3666%" y="437" width="0.1466%" height="15" fill="rgb(221,165,53)" fg:x="514" fg:w="1"/><text x="75.6166%" y="447.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="75.3666%" y="421" width="0.1466%" height="15" fill="rgb(214,110,17)" fg:x="514" fg:w="1"/><text x="75.6166%" y="431.50"></text></g><g><title>CoreChecks::ValidateCmdDrawInstance (2 samples, 0.29%)</title><rect x="75.5132%" y="549" width="0.2933%" height="15" fill="rgb(237,197,12)" fg:x="515" fg:w="2"/><text x="75.7632%" y="559.50"></text></g><g><title>CoreChecks::GetDrawDispatchVuid (2 samples, 0.29%)</title><rect x="75.5132%" y="533" width="0.2933%" height="15" fill="rgb(205,84,17)" fg:x="515" fg:w="2"/><text x="75.7632%" y="543.50"></text></g><g><title>std::map&lt;CMD_TYPE, DrawDispatchVuid, std::less&lt;CMD_TYPE&gt;, std::allocator&lt;std::pair&lt;CMD_TYPE const, DrawDispatchVuid&gt; &gt; &gt;::find (2 samples, 0.29%)</title><rect x="75.5132%" y="517" width="0.2933%" height="15" fill="rgb(237,18,45)" fg:x="515" fg:w="2"/><text x="75.7632%" y="527.50"></text></g><g><title>std::_Rb_tree&lt;CMD_TYPE, std::pair&lt;CMD_TYPE const, DrawDispatchVuid&gt;, std::_Select1st&lt;std::pair&lt;CMD_TYPE const, DrawDispatchVuid&gt; &gt;, std::less&lt;CMD_TYPE&gt;, std::allocator&lt;std::pair&lt;CMD_TYPE const, DrawDispatchVuid&gt; &gt; &gt;::find (2 samples, 0.29%)</title><rect x="75.5132%" y="501" width="0.2933%" height="15" fill="rgb(221,87,14)" fg:x="515" fg:w="2"/><text x="75.7632%" y="511.50"></text></g><g><title>std::_Rb_tree&lt;CMD_TYPE, std::pair&lt;CMD_TYPE const, DrawDispatchVuid&gt;, std::_Select1st&lt;std::pair&lt;CMD_TYPE const, DrawDispatchVuid&gt; &gt;, std::less&lt;CMD_TYPE&gt;, std::allocator&lt;std::pair&lt;CMD_TYPE const, DrawDispatchVuid&gt; &gt; &gt;::_M_lower_bound (2 samples, 0.29%)</title><rect x="75.5132%" y="485" width="0.2933%" height="15" fill="rgb(238,186,15)" fg:x="515" fg:w="2"/><text x="75.7632%" y="495.50"></text></g><g><title>std::_Rb_tree&lt;CMD_TYPE, std::pair&lt;CMD_TYPE const, DrawDispatchVuid&gt;, std::_Select1st&lt;std::pair&lt;CMD_TYPE const, DrawDispatchVuid&gt; &gt;, std::less&lt;CMD_TYPE&gt;, std::allocator&lt;std::pair&lt;CMD_TYPE const, DrawDispatchVuid&gt; &gt; &gt;::_S_right (1 samples, 0.15%)</title><rect x="75.6598%" y="469" width="0.1466%" height="15" fill="rgb(208,115,11)" fg:x="516" fg:w="1"/><text x="75.9098%" y="479.50"></text></g><g><title>CoreChecks::ValidateCmd (1 samples, 0.15%)</title><rect x="75.8065%" y="533" width="0.1466%" height="15" fill="rgb(254,175,0)" fg:x="517" fg:w="1"/><text x="76.0565%" y="543.50"></text></g><g><title>CoreChecks::ValidateCmdQueueFlags (1 samples, 0.15%)</title><rect x="75.8065%" y="517" width="0.1466%" height="15" fill="rgb(227,24,42)" fg:x="517" fg:w="1"/><text x="76.0565%" y="527.50"></text></g><g><title>CoreChecks::GetDrawDispatchVuid (1 samples, 0.15%)</title><rect x="76.0997%" y="517" width="0.1466%" height="15" fill="rgb(223,211,37)" fg:x="519" fg:w="1"/><text x="76.3497%" y="527.50"></text></g><g><title>std::map&lt;VkQueueFlagBits, unsigned long, std::less&lt;VkQueueFlagBits&gt;, std::allocator&lt;std::pair&lt;VkQueueFlagBits const, unsigned long&gt; &gt; &gt;::at (1 samples, 0.15%)</title><rect x="76.0997%" y="501" width="0.1466%" height="15" fill="rgb(235,49,27)" fg:x="519" fg:w="1"/><text x="76.3497%" y="511.50"></text></g><g><title>std::map&lt;VkQueueFlagBits, unsigned long, std::less&lt;VkQueueFlagBits&gt;, std::allocator&lt;std::pair&lt;VkQueueFlagBits const, unsigned long&gt; &gt; &gt;::lower_bound (1 samples, 0.15%)</title><rect x="76.0997%" y="485" width="0.1466%" height="15" fill="rgb(254,97,51)" fg:x="519" fg:w="1"/><text x="76.3497%" y="495.50"></text></g><g><title>std::_Rb_tree&lt;VkQueueFlagBits, std::pair&lt;VkQueueFlagBits const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;VkQueueFlagBits const, unsigned long&gt; &gt;, std::less&lt;VkQueueFlagBits&gt;, std::allocator&lt;std::pair&lt;VkQueueFlagBits const, unsigned long&gt; &gt; &gt;::lower_bound (1 samples, 0.15%)</title><rect x="76.0997%" y="469" width="0.1466%" height="15" fill="rgb(249,51,40)" fg:x="519" fg:w="1"/><text x="76.3497%" y="479.50"></text></g><g><title>std::_Rb_tree&lt;VkQueueFlagBits, std::pair&lt;VkQueueFlagBits const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;VkQueueFlagBits const, unsigned long&gt; &gt;, std::less&lt;VkQueueFlagBits&gt;, std::allocator&lt;std::pair&lt;VkQueueFlagBits const, unsigned long&gt; &gt; &gt;::_M_lower_bound (1 samples, 0.15%)</title><rect x="76.0997%" y="453" width="0.1466%" height="15" fill="rgb(210,128,45)" fg:x="519" fg:w="1"/><text x="76.3497%" y="463.50"></text></g><g><title>std::_Rb_tree&lt;VkQueueFlagBits, std::pair&lt;VkQueueFlagBits const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;VkQueueFlagBits const, unsigned long&gt; &gt;, std::less&lt;VkQueueFlagBits&gt;, std::allocator&lt;std::pair&lt;VkQueueFlagBits const, unsigned long&gt; &gt; &gt;::_S_right (1 samples, 0.15%)</title><rect x="76.0997%" y="437" width="0.1466%" height="15" fill="rgb(224,137,50)" fg:x="519" fg:w="1"/><text x="76.3497%" y="447.50"></text></g><g><title>CoreChecks::ValidateDrawState (2 samples, 0.29%)</title><rect x="76.2463%" y="517" width="0.2933%" height="15" fill="rgb(242,15,9)" fg:x="520" fg:w="2"/><text x="76.4963%" y="527.50"></text></g><g><title>cvdescriptorset::DescriptorSet::GetBinding (2 samples, 0.29%)</title><rect x="76.2463%" y="501" width="0.2933%" height="15" fill="rgb(233,187,41)" fg:x="520" fg:w="2"/><text x="76.4963%" y="511.50"></text></g><g><title>cvdescriptorset::DescriptorSetLayout::GetIndexFromBinding (2 samples, 0.29%)</title><rect x="76.2463%" y="485" width="0.2933%" height="15" fill="rgb(227,2,29)" fg:x="520" fg:w="2"/><text x="76.4963%" y="495.50"></text></g><g><title>cvdescriptorset::DescriptorSetLayoutDef::GetIndexFromBinding (2 samples, 0.29%)</title><rect x="76.2463%" y="469" width="0.2933%" height="15" fill="rgb(222,70,3)" fg:x="520" fg:w="2"/><text x="76.4963%" y="479.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, unsigned int, unsigned int, robin_hood::hash&lt;unsigned int, void&gt;, std::equal_to&lt;unsigned int&gt; &gt;::find (2 samples, 0.29%)</title><rect x="76.2463%" y="453" width="0.2933%" height="15" fill="rgb(213,11,42)" fg:x="520" fg:w="2"/><text x="76.4963%" y="463.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, unsigned int, int, robin_hood::hash&lt;unsigned int, void&gt;, std::equal_to&lt;unsigned int&gt; &gt;::findIdx&lt;unsigned int&gt; (2 samples, 0.29%)</title><rect x="76.2463%" y="437" width="0.2933%" height="15" fill="rgb(225,150,9)" fg:x="520" fg:w="2"/><text x="76.4963%" y="447.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, unsigned int, int, robin_hood::hash&lt;unsigned int, void&gt;, std::equal_to&lt;unsigned int&gt; &gt;::keyToIdx&lt;unsigned int const&amp;&gt; (1 samples, 0.15%)</title><rect x="76.3930%" y="421" width="0.1466%" height="15" fill="rgb(230,162,45)" fg:x="521" fg:w="1"/><text x="76.6430%" y="431.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.15%)</title><rect x="76.5396%" y="485" width="0.1466%" height="15" fill="rgb(222,14,52)" fg:x="522" fg:w="1"/><text x="76.7896%" y="495.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (1 samples, 0.15%)</title><rect x="76.5396%" y="469" width="0.1466%" height="15" fill="rgb(254,198,14)" fg:x="522" fg:w="1"/><text x="76.7896%" y="479.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.15%)</title><rect x="76.5396%" y="453" width="0.1466%" height="15" fill="rgb(220,217,30)" fg:x="522" fg:w="1"/><text x="76.7896%" y="463.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy (1 samples, 0.15%)</title><rect x="76.5396%" y="437" width="0.1466%" height="15" fill="rgb(215,146,41)" fg:x="522" fg:w="1"/><text x="76.7896%" y="447.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (1 samples, 0.15%)</title><rect x="76.5396%" y="421" width="0.1466%" height="15" fill="rgb(217,27,36)" fg:x="522" fg:w="1"/><text x="76.7896%" y="431.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="76.5396%" y="405" width="0.1466%" height="15" fill="rgb(219,218,39)" fg:x="522" fg:w="1"/><text x="76.7896%" y="415.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (3 samples, 0.44%)</title><rect x="76.5396%" y="501" width="0.4399%" height="15" fill="rgb(219,4,42)" fg:x="522" fg:w="3"/><text x="76.7896%" y="511.50"></text></g><g><title>std::char_traits&lt;char&gt;::length (2 samples, 0.29%)</title><rect x="76.6862%" y="485" width="0.2933%" height="15" fill="rgb(249,119,36)" fg:x="523" fg:w="2"/><text x="76.9362%" y="495.50"></text></g><g><title>[libc.so.6] (2 samples, 0.29%)</title><rect x="76.6862%" y="469" width="0.2933%" height="15" fill="rgb(209,23,33)" fg:x="523" fg:w="2"/><text x="76.9362%" y="479.50"></text></g><g><title>SHADER_MODULE_STATE::FindEntrypointStruct (4 samples, 0.59%)</title><rect x="76.5396%" y="517" width="0.5865%" height="15" fill="rgb(211,10,0)" fg:x="522" fg:w="4"/><text x="76.7896%" y="527.50"></text></g><g><title>std::unordered_multimap&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, SHADER_MODULE_STATE::EntryPoint, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, SHADER_MODULE_STATE::EntryPoint&gt; &gt; &gt;::equal_range (1 samples, 0.15%)</title><rect x="76.9795%" y="501" width="0.1466%" height="15" fill="rgb(208,99,37)" fg:x="525" fg:w="1"/><text x="77.2295%" y="511.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, SHADER_MODULE_STATE::EntryPoint&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, SHADER_MODULE_STATE::EntryPoint&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::equal_range (1 samples, 0.15%)</title><rect x="76.9795%" y="485" width="0.1466%" height="15" fill="rgb(213,132,31)" fg:x="525" fg:w="1"/><text x="77.2295%" y="495.50"></text></g><g><title>std::_Hashtable&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, SHADER_MODULE_STATE::EntryPoint&gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, SHADER_MODULE_STATE::EntryPoint&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::find (1 samples, 0.15%)</title><rect x="76.9795%" y="469" width="0.1466%" height="15" fill="rgb(243,129,40)" fg:x="525" fg:w="1"/><text x="77.2295%" y="479.50"></text></g><g><title>std::__detail::_Hashtable_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, SHADER_MODULE_STATE::EntryPoint&gt;, std::__detail::_Select1st, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, false&gt; &gt;::_M_key_equals (1 samples, 0.15%)</title><rect x="76.9795%" y="453" width="0.1466%" height="15" fill="rgb(210,66,33)" fg:x="525" fg:w="1"/><text x="77.2295%" y="463.50"></text></g><g><title>std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1 samples, 0.15%)</title><rect x="76.9795%" y="437" width="0.1466%" height="15" fill="rgb(209,189,4)" fg:x="525" fg:w="1"/><text x="77.2295%" y="447.50"></text></g><g><title>std::operator==&lt;char&gt; (1 samples, 0.15%)</title><rect x="76.9795%" y="421" width="0.1466%" height="15" fill="rgb(214,107,37)" fg:x="525" fg:w="1"/><text x="77.2295%" y="431.50"></text></g><g><title>std::char_traits&lt;char&gt;::compare (1 samples, 0.15%)</title><rect x="76.9795%" y="405" width="0.1466%" height="15" fill="rgb(245,88,54)" fg:x="525" fg:w="1"/><text x="77.2295%" y="415.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="76.9795%" y="389" width="0.1466%" height="15" fill="rgb(205,146,20)" fg:x="525" fg:w="1"/><text x="77.2295%" y="399.50"></text></g><g><title>CoreChecks::PreCallValidateCmdDrawIndexed (13 samples, 1.91%)</title><rect x="75.5132%" y="565" width="1.9062%" height="15" fill="rgb(220,161,25)" fg:x="515" fg:w="13"/><text x="75.7632%" y="575.50">C..</text></g><g><title>CoreChecks::ValidateCmdDrawType (11 samples, 1.61%)</title><rect x="75.8065%" y="549" width="1.6129%" height="15" fill="rgb(215,152,15)" fg:x="517" fg:w="11"/><text x="76.0565%" y="559.50"></text></g><g><title>CoreChecks::ValidateCmdBufDrawState (10 samples, 1.47%)</title><rect x="75.9531%" y="533" width="1.4663%" height="15" fill="rgb(233,192,44)" fg:x="518" fg:w="10"/><text x="76.2031%" y="543.50"></text></g><g><title>std::vector&lt;LAST_BOUND_STATE::PER_SET, std::allocator&lt;LAST_BOUND_STATE::PER_SET&gt; &gt;::size (2 samples, 0.29%)</title><rect x="77.1261%" y="517" width="0.2933%" height="15" fill="rgb(240,170,46)" fg:x="526" fg:w="2"/><text x="77.3761%" y="527.50"></text></g><g><title>ThreadSafety::PreCallRecordCmdDrawIndexed (2 samples, 0.29%)</title><rect x="77.4194%" y="565" width="0.2933%" height="15" fill="rgb(207,104,33)" fg:x="528" fg:w="2"/><text x="77.6694%" y="575.50"></text></g><g><title>ThreadSafety::StartWriteObject (2 samples, 0.29%)</title><rect x="77.4194%" y="549" width="0.2933%" height="15" fill="rgb(219,21,39)" fg:x="528" fg:w="2"/><text x="77.6694%" y="559.50"></text></g><g><title>ThreadSafety::StartWriteObject (2 samples, 0.29%)</title><rect x="77.4194%" y="533" width="0.2933%" height="15" fill="rgb(214,133,29)" fg:x="528" fg:w="2"/><text x="77.6694%" y="543.50"></text></g><g><title>counter&lt;VkCommandPool_T*&gt;::StartWrite (2 samples, 0.29%)</title><rect x="77.4194%" y="517" width="0.2933%" height="15" fill="rgb(226,93,6)" fg:x="528" fg:w="2"/><text x="77.6694%" y="527.50"></text></g><g><title>counter&lt;VkCommandPool_T*&gt;::FindObject (1 samples, 0.15%)</title><rect x="77.5660%" y="501" width="0.1466%" height="15" fill="rgb(252,222,34)" fg:x="529" fg:w="1"/><text x="77.8160%" y="511.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandPool_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkCommandPool_T*, void&gt; &gt;::FindResult::~FindResult (1 samples, 0.15%)</title><rect x="77.5660%" y="485" width="0.1466%" height="15" fill="rgb(252,92,48)" fg:x="529" fg:w="1"/><text x="77.8160%" y="495.50"></text></g><g><title>std::pair&lt;bool, std::shared_ptr&lt;ObjectUseData&gt; &gt;::~pair (1 samples, 0.15%)</title><rect x="77.5660%" y="469" width="0.1466%" height="15" fill="rgb(245,223,24)" fg:x="529" fg:w="1"/><text x="77.8160%" y="479.50"></text></g><g><title>std::shared_ptr&lt;ObjectUseData&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="77.5660%" y="453" width="0.1466%" height="15" fill="rgb(205,176,3)" fg:x="529" fg:w="1"/><text x="77.8160%" y="463.50"></text></g><g><title>std::__shared_ptr&lt;ObjectUseData, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="77.5660%" y="437" width="0.1466%" height="15" fill="rgb(235,151,15)" fg:x="529" fg:w="1"/><text x="77.8160%" y="447.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="77.5660%" y="421" width="0.1466%" height="15" fill="rgb(237,209,11)" fg:x="529" fg:w="1"/><text x="77.8160%" y="431.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="77.5660%" y="405" width="0.1466%" height="15" fill="rgb(243,227,24)" fg:x="529" fg:w="1"/><text x="77.8160%" y="415.50"></text></g><g><title>std::enable_shared_from_this&lt;BASE_NODE&gt;::shared_from_this (1 samples, 0.15%)</title><rect x="78.0059%" y="469" width="0.1466%" height="15" fill="rgb(239,193,16)" fg:x="532" fg:w="1"/><text x="78.2559%" y="479.50"></text></g><g><title>std::shared_ptr&lt;BASE_NODE&gt;::shared_ptr&lt;BASE_NODE, void&gt; (1 samples, 0.15%)</title><rect x="78.0059%" y="453" width="0.1466%" height="15" fill="rgb(231,27,9)" fg:x="532" fg:w="1"/><text x="78.2559%" y="463.50"></text></g><g><title>std::__shared_ptr&lt;BASE_NODE, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;BASE_NODE, void&gt; (1 samples, 0.15%)</title><rect x="78.0059%" y="437" width="0.1466%" height="15" fill="rgb(219,169,10)" fg:x="532" fg:w="1"/><text x="78.2559%" y="447.50"></text></g><g><title>std::shared_ptr&lt;BASE_NODE&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="78.1525%" y="469" width="0.1466%" height="15" fill="rgb(244,229,43)" fg:x="533" fg:w="1"/><text x="78.4025%" y="479.50"></text></g><g><title>std::__shared_ptr&lt;BASE_NODE, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="78.1525%" y="453" width="0.1466%" height="15" fill="rgb(254,38,20)" fg:x="533" fg:w="1"/><text x="78.4025%" y="463.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="78.1525%" y="437" width="0.1466%" height="15" fill="rgb(250,47,30)" fg:x="533" fg:w="1"/><text x="78.4025%" y="447.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="78.1525%" y="421" width="0.1466%" height="15" fill="rgb(224,124,36)" fg:x="533" fg:w="1"/><text x="78.4025%" y="431.50"></text></g><g><title>CMD_BUFFER_STATE::AddChild&lt;RENDER_PASS_STATE&gt; (4 samples, 0.59%)</title><rect x="77.8592%" y="517" width="0.5865%" height="15" fill="rgb(246,68,51)" fg:x="531" fg:w="4"/><text x="78.1092%" y="527.50"></text></g><g><title>CMD_BUFFER_STATE::AddChild (3 samples, 0.44%)</title><rect x="78.0059%" y="501" width="0.4399%" height="15" fill="rgb(253,43,49)" fg:x="532" fg:w="3"/><text x="78.2559%" y="511.50"></text></g><g><title>BASE_NODE::AddParent (3 samples, 0.44%)</title><rect x="78.0059%" y="485" width="0.4399%" height="15" fill="rgb(219,54,36)" fg:x="532" fg:w="3"/><text x="78.2559%" y="495.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="78.2991%" y="469" width="0.1466%" height="15" fill="rgb(227,133,34)" fg:x="534" fg:w="1"/><text x="78.5491%" y="479.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="78.2991%" y="453" width="0.1466%" height="15" fill="rgb(247,227,15)" fg:x="534" fg:w="1"/><text x="78.5491%" y="463.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="78.2991%" y="437" width="0.1466%" height="15" fill="rgb(229,96,14)" fg:x="534" fg:w="1"/><text x="78.5491%" y="447.50"></text></g><g><title>BASE_NODE::AddParent (1 samples, 0.15%)</title><rect x="78.2991%" y="421" width="0.1466%" height="15" fill="rgb(220,79,17)" fg:x="534" fg:w="1"/><text x="78.5491%" y="431.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="78.2991%" y="405" width="0.1466%" height="15" fill="rgb(205,131,53)" fg:x="534" fg:w="1"/><text x="78.5491%" y="415.50"></text></g><g><title>cvdescriptorset::DescriptorBinding::IsBindless (1 samples, 0.15%)</title><rect x="78.5924%" y="501" width="0.1466%" height="15" fill="rgb(209,50,29)" fg:x="536" fg:w="1"/><text x="78.8424%" y="511.50"></text></g><g><title>sparse_container::range&lt;unsigned long&gt;::empty (1 samples, 0.15%)</title><rect x="78.7390%" y="309" width="0.1466%" height="15" fill="rgb(245,86,46)" fg:x="537" fg:w="1"/><text x="78.9890%" y="319.50"></text></g><g><title>SetSubresourceRangeInitialLayoutImpl&lt;sparse_container::small_range_map&lt;long unsigned int, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;long unsigned int&gt;, 16, unsigned char&gt; &gt; (2 samples, 0.29%)</title><rect x="78.7390%" y="341" width="0.2933%" height="15" fill="rgb(235,66,46)" fg:x="537" fg:w="2"/><text x="78.9890%" y="351.50"></text></g><g><title>image_layout_map::UpdateLayoutStateImpl&lt;sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt; &gt; (2 samples, 0.29%)</title><rect x="78.7390%" y="325" width="0.2933%" height="15" fill="rgb(232,148,31)" fg:x="537" fg:w="2"/><text x="78.9890%" y="335.50"></text></g><g><title>sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::IteratorImpl&lt;sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;, std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; &gt;::IteratorImpl (1 samples, 0.15%)</title><rect x="78.8856%" y="309" width="0.1466%" height="15" fill="rgb(217,149,8)" fg:x="538" fg:w="1"/><text x="79.1356%" y="319.50"></text></g><g><title>cvdescriptorset::ImageDescriptor::UpdateDrawState (3 samples, 0.44%)</title><rect x="78.7390%" y="501" width="0.4399%" height="15" fill="rgb(209,183,11)" fg:x="537" fg:w="3"/><text x="78.9890%" y="511.50"></text></g><g><title>ValidationStateTracker::CallSetImageViewInitialLayoutCallback (3 samples, 0.44%)</title><rect x="78.7390%" y="485" width="0.4399%" height="15" fill="rgb(208,55,20)" fg:x="537" fg:w="3"/><text x="78.9890%" y="495.50"></text></g><g><title>std::function&lt;void (CMD_BUFFER_STATE*, IMAGE_VIEW_STATE const&amp;, VkImageLayout)&gt;::operator (3 samples, 0.44%)</title><rect x="78.7390%" y="469" width="0.4399%" height="15" fill="rgb(218,39,14)" fg:x="537" fg:w="3"/><text x="78.9890%" y="479.50"></text></g><g><title>_M_invoke (3 samples, 0.44%)</title><rect x="78.7390%" y="453" width="0.4399%" height="15" fill="rgb(216,169,33)" fg:x="537" fg:w="3"/><text x="78.9890%" y="463.50"></text></g><g><title>__invoke_r&lt;void, CoreChecks::CreateDevice(const VkDeviceCreateInfo*)::&lt;lambda(CMD_BUFFER_STATE*, const IMAGE_VIEW_STATE&amp;, VkImageLayout)&gt;&amp;, CMD_BUFFER_STATE*, const IMAGE_VIEW_STATE&amp;, VkImageLayout&gt; (3 samples, 0.44%)</title><rect x="78.7390%" y="437" width="0.4399%" height="15" fill="rgb(233,80,24)" fg:x="537" fg:w="3"/><text x="78.9890%" y="447.50"></text></g><g><title>__invoke_impl&lt;void, CoreChecks::CreateDevice(const VkDeviceCreateInfo*)::&lt;lambda(CMD_BUFFER_STATE*, const IMAGE_VIEW_STATE&amp;, VkImageLayout)&gt;&amp;, CMD_BUFFER_STATE*, const IMAGE_VIEW_STATE&amp;, VkImageLayout&gt; (3 samples, 0.44%)</title><rect x="78.7390%" y="421" width="0.4399%" height="15" fill="rgb(213,179,31)" fg:x="537" fg:w="3"/><text x="78.9890%" y="431.50"></text></g><g><title>operator (3 samples, 0.44%)</title><rect x="78.7390%" y="405" width="0.4399%" height="15" fill="rgb(209,19,5)" fg:x="537" fg:w="3"/><text x="78.9890%" y="415.50"></text></g><g><title>CMD_BUFFER_STATE::SetImageViewInitialLayout (3 samples, 0.44%)</title><rect x="78.7390%" y="389" width="0.4399%" height="15" fill="rgb(219,18,35)" fg:x="537" fg:w="3"/><text x="78.9890%" y="399.50"></text></g><g><title>CMD_BUFFER_STATE::SetImageViewInitialLayout (3 samples, 0.44%)</title><rect x="78.7390%" y="373" width="0.4399%" height="15" fill="rgb(209,169,16)" fg:x="537" fg:w="3"/><text x="78.9890%" y="383.50"></text></g><g><title>image_layout_map::ImageSubresourceLayoutMap::SetSubresourceRangeInitialLayout (3 samples, 0.44%)</title><rect x="78.7390%" y="357" width="0.4399%" height="15" fill="rgb(245,90,51)" fg:x="537" fg:w="3"/><text x="78.9890%" y="367.50"></text></g><g><title>std::_Function_handler&lt;void (CMD_BUFFER_STATE*, IMAGE_VIEW_STATE const&amp;, VkImageLayout), CoreChecks::CreateDevice(VkDeviceCreateInfo const*)::{lambda(CMD_BUFFER_STATE*, IMAGE_VIEW_STATE const&amp;, VkImageLayout)#1}&gt;::_M_invoke (1 samples, 0.15%)</title><rect x="79.0323%" y="341" width="0.1466%" height="15" fill="rgb(220,99,45)" fg:x="539" fg:w="1"/><text x="79.2823%" y="351.50"></text></g><g><title>cvdescriptorset::DescriptorSet::UpdateDrawState (7 samples, 1.03%)</title><rect x="78.4457%" y="517" width="1.0264%" height="15" fill="rgb(249,89,25)" fg:x="535" fg:w="7"/><text x="78.6957%" y="527.50"></text></g><g><title>std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned int const, DescriptorRequirement&gt; &gt;::operator++ (2 samples, 0.29%)</title><rect x="79.1789%" y="501" width="0.2933%" height="15" fill="rgb(239,193,0)" fg:x="540" fg:w="2"/><text x="79.4289%" y="511.50"></text></g><g><title>robin_hood::detail::Table&lt;false, 80ul, unsigned int, std::map&lt;unsigned int, DescriptorRequirement, std::less&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, DescriptorRequirement&gt; &gt; &gt;, robin_hood::hash&lt;unsigned int, void&gt;, std::equal_to&lt;unsigned int&gt; &gt;::begin (1 samples, 0.15%)</title><rect x="79.4721%" y="517" width="0.1466%" height="15" fill="rgb(231,126,1)" fg:x="542" fg:w="1"/><text x="79.7221%" y="527.50"></text></g><g><title>robin_hood::detail::Table&lt;false, 80ul, unsigned int, std::map&lt;unsigned int, DescriptorRequirement, std::less&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, DescriptorRequirement&gt; &gt; &gt;, robin_hood::hash&lt;unsigned int, void&gt;, std::equal_to&lt;unsigned int&gt; &gt;::cbegin (1 samples, 0.15%)</title><rect x="79.4721%" y="501" width="0.1466%" height="15" fill="rgb(243,166,3)" fg:x="542" fg:w="1"/><text x="79.7221%" y="511.50"></text></g><g><title>robin_hood::detail::Table&lt;false, 80ul, unsigned int, std::map&lt;unsigned int, DescriptorRequirement, std::less&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, DescriptorRequirement&gt; &gt; &gt;, robin_hood::hash&lt;unsigned int, void&gt;, std::equal_to&lt;unsigned int&gt; &gt;::cbegin (1 samples, 0.15%)</title><rect x="79.4721%" y="485" width="0.1466%" height="15" fill="rgb(223,22,34)" fg:x="542" fg:w="1"/><text x="79.7221%" y="495.50"></text></g><g><title>robin_hood::detail::Table&lt;false, 80ul, unsigned int, std::map&lt;unsigned int, DescriptorRequirement, std::less&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;unsigned int const, DescriptorRequirement&gt; &gt; &gt;, robin_hood::hash&lt;unsigned int, void&gt;, std::equal_to&lt;unsigned int&gt; &gt;::Iter&lt;true&gt;::Iter (1 samples, 0.15%)</title><rect x="79.4721%" y="469" width="0.1466%" height="15" fill="rgb(251,52,51)" fg:x="542" fg:w="1"/><text x="79.7221%" y="479.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkDescriptorSet_T*, void, robin_hood::hash&lt;VkDescriptorSet_T*, void&gt;, std::equal_to&lt;VkDescriptorSet_T*&gt; &gt;::Iter&lt;false&gt;::fastForward (1 samples, 0.15%)</title><rect x="79.4721%" y="453" width="0.1466%" height="15" fill="rgb(221,165,28)" fg:x="542" fg:w="1"/><text x="79.7221%" y="463.50"></text></g><g><title>robin_hood::detail::unaligned_load&lt;unsigned long&gt; (1 samples, 0.15%)</title><rect x="79.4721%" y="437" width="0.1466%" height="15" fill="rgb(218,121,47)" fg:x="542" fg:w="1"/><text x="79.7221%" y="447.50"></text></g><g><title>CMD_BUFFER_STATE::UpdatePipelineState (1 samples, 0.15%)</title><rect x="79.4721%" y="421" width="0.1466%" height="15" fill="rgb(209,120,9)" fg:x="542" fg:w="1"/><text x="79.7221%" y="431.50"></text></g><g><title>ValidationStateTracker::PostCallRecordCmdDrawIndexed (16 samples, 2.35%)</title><rect x="77.7126%" y="565" width="2.3460%" height="15" fill="rgb(236,68,12)" fg:x="530" fg:w="16"/><text x="77.9626%" y="575.50">V..</text></g><g><title>CMD_BUFFER_STATE::UpdateDrawCmd (16 samples, 2.35%)</title><rect x="77.7126%" y="549" width="2.3460%" height="15" fill="rgb(225,194,26)" fg:x="530" fg:w="16"/><text x="77.9626%" y="559.50">C..</text></g><g><title>CMD_BUFFER_STATE::UpdatePipelineState (16 samples, 2.35%)</title><rect x="77.7126%" y="533" width="2.3460%" height="15" fill="rgb(231,84,39)" fg:x="530" fg:w="16"/><text x="77.9626%" y="543.50">C..</text></g><g><title>std::vector&lt;LAST_BOUND_STATE::PER_SET, std::allocator&lt;LAST_BOUND_STATE::PER_SET&gt; &gt;::operator[] (3 samples, 0.44%)</title><rect x="79.6188%" y="517" width="0.4399%" height="15" fill="rgb(210,11,45)" fg:x="543" fg:w="3"/><text x="79.8688%" y="527.50"></text></g><g><title>std::vector&lt;LAST_BOUND_STATE::PER_SET, std::allocator&lt;LAST_BOUND_STATE::PER_SET&gt; &gt;::size (1 samples, 0.15%)</title><rect x="79.9120%" y="501" width="0.1466%" height="15" fill="rgb(224,54,52)" fg:x="545" fg:w="1"/><text x="80.1620%" y="511.50"></text></g><g><title>vulkan_layer_chassis::CmdDrawIndexed (32 samples, 4.69%)</title><rect x="75.5132%" y="581" width="4.6921%" height="15" fill="rgb(238,102,14)" fg:x="515" fg:w="32"/><text x="75.7632%" y="591.50">vulka..</text></g><g><title>counter&lt;VkCommandBuffer_T*&gt;::StartWrite (1 samples, 0.15%)</title><rect x="80.0587%" y="565" width="0.1466%" height="15" fill="rgb(243,160,52)" fg:x="546" fg:w="1"/><text x="80.3087%" y="575.50"></text></g><g><title>counter&lt;VkCommandBuffer_T*&gt;::FindObject (1 samples, 0.15%)</title><rect x="80.0587%" y="549" width="0.1466%" height="15" fill="rgb(216,114,19)" fg:x="546" fg:w="1"/><text x="80.3087%" y="559.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandBuffer_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="80.0587%" y="533" width="0.1466%" height="15" fill="rgb(244,166,37)" fg:x="546" fg:w="1"/><text x="80.3087%" y="543.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="80.0587%" y="517" width="0.1466%" height="15" fill="rgb(246,29,44)" fg:x="546" fg:w="1"/><text x="80.3087%" y="527.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="80.0587%" y="501" width="0.1466%" height="15" fill="rgb(215,56,53)" fg:x="546" fg:w="1"/><text x="80.3087%" y="511.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="80.0587%" y="485" width="0.1466%" height="15" fill="rgb(217,60,2)" fg:x="546" fg:w="1"/><text x="80.3087%" y="495.50"></text></g><g><title>counter&lt;VkCommandBuffer_T*&gt;::FindObject (1 samples, 0.15%)</title><rect x="80.0587%" y="469" width="0.1466%" height="15" fill="rgb(207,26,24)" fg:x="546" fg:w="1"/><text x="80.3087%" y="479.50"></text></g><g><title>vulkan_layer_chassis::CmdEndRenderPass (1 samples, 0.15%)</title><rect x="80.2053%" y="581" width="0.1466%" height="15" fill="rgb(252,210,15)" fg:x="547" fg:w="1"/><text x="80.4553%" y="591.50"></text></g><g><title>CoreChecks::PostCallRecordCmdEndRenderPass (1 samples, 0.15%)</title><rect x="80.2053%" y="565" width="0.1466%" height="15" fill="rgb(253,209,26)" fg:x="547" fg:w="1"/><text x="80.4553%" y="575.50"></text></g><g><title>CoreChecks::RecordCmdEndRenderPassLayouts (1 samples, 0.15%)</title><rect x="80.2053%" y="549" width="0.1466%" height="15" fill="rgb(238,170,14)" fg:x="547" fg:w="1"/><text x="80.4553%" y="559.50"></text></g><g><title>CoreChecks::TransitionFinalSubpassLayouts (1 samples, 0.15%)</title><rect x="80.2053%" y="533" width="0.1466%" height="15" fill="rgb(216,178,15)" fg:x="547" fg:w="1"/><text x="80.4553%" y="543.50"></text></g><g><title>CMD_BUFFER_STATE::SetImageViewLayout (1 samples, 0.15%)</title><rect x="80.2053%" y="517" width="0.1466%" height="15" fill="rgb(250,197,2)" fg:x="547" fg:w="1"/><text x="80.4553%" y="527.50"></text></g><g><title>CMD_BUFFER_STATE::SetImageLayout (1 samples, 0.15%)</title><rect x="80.2053%" y="501" width="0.1466%" height="15" fill="rgb(212,70,42)" fg:x="547" fg:w="1"/><text x="80.4553%" y="511.50"></text></g><g><title>image_layout_map::ImageSubresourceLayoutMap::SetSubresourceRangeLayout (1 samples, 0.15%)</title><rect x="80.2053%" y="485" width="0.1466%" height="15" fill="rgb(227,213,9)" fg:x="547" fg:w="1"/><text x="80.4553%" y="495.50"></text></g><g><title>image_layout_map::ImageSubresourceLayoutMap::SetSubresourceRangeLayout (1 samples, 0.15%)</title><rect x="80.2053%" y="469" width="0.1466%" height="15" fill="rgb(245,99,25)" fg:x="547" fg:w="1"/><text x="80.4553%" y="479.50"></text></g><g><title>image_layout_map::UpdateLayoutStateImpl&lt;sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt; &gt; (1 samples, 0.15%)</title><rect x="80.2053%" y="453" width="0.1466%" height="15" fill="rgb(250,82,29)" fg:x="547" fg:w="1"/><text x="80.4553%" y="463.50"></text></g><g><title>CoreChecks::PreCallValidateCmdPushConstants (1 samples, 0.15%)</title><rect x="80.3519%" y="565" width="0.1466%" height="15" fill="rgb(241,226,54)" fg:x="548" fg:w="1"/><text x="80.6019%" y="575.50"></text></g><g><title>CoreChecks::ValidateCmd (1 samples, 0.15%)</title><rect x="80.3519%" y="549" width="0.1466%" height="15" fill="rgb(221,99,41)" fg:x="548" fg:w="1"/><text x="80.6019%" y="559.50"></text></g><g><title>CoreChecks::ValidateCmdQueueFlags (1 samples, 0.15%)</title><rect x="80.3519%" y="533" width="0.1466%" height="15" fill="rgb(213,90,21)" fg:x="548" fg:w="1"/><text x="80.6019%" y="543.50"></text></g><g><title>ThreadSafety::StartWriteObject (2 samples, 0.29%)</title><rect x="80.4985%" y="533" width="0.2933%" height="15" fill="rgb(205,208,24)" fg:x="549" fg:w="2"/><text x="80.7485%" y="543.50"></text></g><g><title>counter&lt;VkCommandPool_T*&gt;::StartWrite (2 samples, 0.29%)</title><rect x="80.4985%" y="517" width="0.2933%" height="15" fill="rgb(246,31,12)" fg:x="549" fg:w="2"/><text x="80.7485%" y="527.50"></text></g><g><title>vulkan_layer_chassis::CmdPushConstants (4 samples, 0.59%)</title><rect x="80.3519%" y="581" width="0.5865%" height="15" fill="rgb(213,154,6)" fg:x="548" fg:w="4"/><text x="80.6019%" y="591.50"></text></g><g><title>ThreadSafety::PreCallRecordCmdPushConstants (3 samples, 0.44%)</title><rect x="80.4985%" y="565" width="0.4399%" height="15" fill="rgb(222,163,29)" fg:x="549" fg:w="3"/><text x="80.7485%" y="575.50"></text></g><g><title>ThreadSafety::StartWriteObject (3 samples, 0.44%)</title><rect x="80.4985%" y="549" width="0.4399%" height="15" fill="rgb(227,201,8)" fg:x="549" fg:w="3"/><text x="80.7485%" y="559.50"></text></g><g><title>counter&lt;VkCommandBuffer_T*&gt;::StartWrite (1 samples, 0.15%)</title><rect x="80.7918%" y="533" width="0.1466%" height="15" fill="rgb(233,9,32)" fg:x="551" fg:w="1"/><text x="81.0418%" y="543.50"></text></g><g><title>counter&lt;VkCommandBuffer_T*&gt;::FindObject (1 samples, 0.15%)</title><rect x="80.7918%" y="517" width="0.1466%" height="15" fill="rgb(217,54,24)" fg:x="551" fg:w="1"/><text x="81.0418%" y="527.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandBuffer_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="80.7918%" y="501" width="0.1466%" height="15" fill="rgb(235,192,0)" fg:x="551" fg:w="1"/><text x="81.0418%" y="511.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::~unique_lock (1 samples, 0.15%)</title><rect x="80.7918%" y="485" width="0.1466%" height="15" fill="rgb(235,45,9)" fg:x="551" fg:w="1"/><text x="81.0418%" y="495.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (1 samples, 0.15%)</title><rect x="80.7918%" y="469" width="0.1466%" height="15" fill="rgb(246,42,40)" fg:x="551" fg:w="1"/><text x="81.0418%" y="479.50"></text></g><g><title>std::mutex::unlock (1 samples, 0.15%)</title><rect x="80.7918%" y="453" width="0.1466%" height="15" fill="rgb(248,111,24)" fg:x="551" fg:w="1"/><text x="81.0418%" y="463.50"></text></g><g><title>__gthread_mutex_unlock (1 samples, 0.15%)</title><rect x="80.7918%" y="437" width="0.1466%" height="15" fill="rgb(249,65,22)" fg:x="551" fg:w="1"/><text x="81.0418%" y="447.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="80.7918%" y="421" width="0.1466%" height="15" fill="rgb(238,111,51)" fg:x="551" fg:w="1"/><text x="81.0418%" y="431.50"></text></g><g><title>StatelessValidation::PreCallValidateCmdSetViewport (1 samples, 0.15%)</title><rect x="80.9384%" y="565" width="0.1466%" height="15" fill="rgb(250,118,22)" fg:x="552" fg:w="1"/><text x="81.1884%" y="575.50"></text></g><g><title>StatelessValidation::manual_PreCallValidateCmdSetViewport (1 samples, 0.15%)</title><rect x="80.9384%" y="549" width="0.1466%" height="15" fill="rgb(234,84,26)" fg:x="552" fg:w="1"/><text x="81.1884%" y="559.50"></text></g><g><title>StatelessValidation::manual_PreCallValidateViewport (1 samples, 0.15%)</title><rect x="80.9384%" y="533" width="0.1466%" height="15" fill="rgb(243,172,12)" fg:x="552" fg:w="1"/><text x="81.1884%" y="543.50"></text></g><g><title>hell_renderer::vulkan::vulkan_backend::VulkanBackend::draw_frame (207 samples, 30.35%)</title><rect x="51.0264%" y="597" width="30.3519%" height="15" fill="rgb(236,150,49)" fg:x="348" fg:w="207"/><text x="51.2764%" y="607.50">hell_renderer::vulkan::vulkan_backend::VulkanBack..</text></g><g><title>vulkan_layer_chassis::CmdSetViewport (3 samples, 0.44%)</title><rect x="80.9384%" y="581" width="0.4399%" height="15" fill="rgb(225,197,26)" fg:x="552" fg:w="3"/><text x="81.1884%" y="591.50"></text></g><g><title>ThreadSafety::PreCallRecordCmdSetViewport (2 samples, 0.29%)</title><rect x="81.0850%" y="565" width="0.2933%" height="15" fill="rgb(214,17,42)" fg:x="553" fg:w="2"/><text x="81.3350%" y="575.50"></text></g><g><title>ThreadSafety::StartWriteObject (2 samples, 0.29%)</title><rect x="81.0850%" y="549" width="0.2933%" height="15" fill="rgb(224,165,40)" fg:x="553" fg:w="2"/><text x="81.3350%" y="559.50"></text></g><g><title>ThreadSafety::StartWriteObject (2 samples, 0.29%)</title><rect x="81.0850%" y="533" width="0.2933%" height="15" fill="rgb(246,100,4)" fg:x="553" fg:w="2"/><text x="81.3350%" y="543.50"></text></g><g><title>counter&lt;VkCommandPool_T*&gt;::StartWrite (2 samples, 0.29%)</title><rect x="81.0850%" y="517" width="0.2933%" height="15" fill="rgb(222,103,0)" fg:x="553" fg:w="2"/><text x="81.3350%" y="527.50"></text></g><g><title>counter&lt;VkCommandPool_T*&gt;::FindObject (2 samples, 0.29%)</title><rect x="81.0850%" y="501" width="0.2933%" height="15" fill="rgb(227,189,26)" fg:x="553" fg:w="2"/><text x="81.3350%" y="511.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkCommandPool_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkCommandPool_T*, void&gt; &gt;::find (1 samples, 0.15%)</title><rect x="81.2317%" y="485" width="0.1466%" height="15" fill="rgb(214,202,17)" fg:x="554" fg:w="1"/><text x="81.4817%" y="495.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::unique_lock (1 samples, 0.15%)</title><rect x="81.2317%" y="469" width="0.1466%" height="15" fill="rgb(229,111,3)" fg:x="554" fg:w="1"/><text x="81.4817%" y="479.50"></text></g><g><title>std::unique_lock&lt;ReadWriteLock&gt;::lock (1 samples, 0.15%)</title><rect x="81.2317%" y="453" width="0.1466%" height="15" fill="rgb(229,172,15)" fg:x="554" fg:w="1"/><text x="81.4817%" y="463.50"></text></g><g><title>ReadWriteLock::lock (1 samples, 0.15%)</title><rect x="81.2317%" y="437" width="0.1466%" height="15" fill="rgb(230,224,35)" fg:x="554" fg:w="1"/><text x="81.4817%" y="447.50"></text></g><g><title>std::mutex::lock (1 samples, 0.15%)</title><rect x="81.2317%" y="421" width="0.1466%" height="15" fill="rgb(251,141,6)" fg:x="554" fg:w="1"/><text x="81.4817%" y="431.50"></text></g><g><title>counter&lt;VkCommandPool_T*&gt;::FindObject (1 samples, 0.15%)</title><rect x="81.2317%" y="405" width="0.1466%" height="15" fill="rgb(225,208,6)" fg:x="554" fg:w="1"/><text x="81.4817%" y="415.50"></text></g><g><title>winit::event_loop::EventLoop&lt;T&gt;::run (208 samples, 30.50%)</title><rect x="51.0264%" y="725" width="30.4985%" height="15" fill="rgb(246,181,16)" fg:x="348" fg:w="208"/><text x="51.2764%" y="735.50">winit::event_loop::EventLoop&lt;T&gt;::run</text></g><g><title>winit::platform_impl::platform::EventLoop&lt;T&gt;::run (208 samples, 30.50%)</title><rect x="51.0264%" y="709" width="30.4985%" height="15" fill="rgb(227,129,36)" fg:x="348" fg:w="208"/><text x="51.2764%" y="719.50">winit::platform_impl::platform::EventLoop&lt;T&gt;::run</text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run (208 samples, 30.50%)</title><rect x="51.0264%" y="693" width="30.4985%" height="15" fill="rgb(248,117,24)" fg:x="348" fg:w="208"/><text x="51.2764%" y="703.50">winit::platform_impl::platform::x11::EventLoop&lt;T&gt;..</text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run_return::single_iteration (208 samples, 30.50%)</title><rect x="51.0264%" y="677" width="30.4985%" height="15" fill="rgb(214,185,35)" fg:x="348" fg:w="208"/><text x="51.2764%" y="687.50">winit::platform_impl::platform::x11::EventLoop&lt;T&gt;..</text></g><g><title>hell_winit::window::Window::main_loop::{{closure}} (208 samples, 30.50%)</title><rect x="51.0264%" y="661" width="30.4985%" height="15" fill="rgb(236,150,34)" fg:x="348" fg:w="208"/><text x="51.2764%" y="671.50">hell_winit::window::Window::main_loop::{{closure}}</text></g><g><title>hell_winit::window::Window::handle_redraw_request (208 samples, 30.50%)</title><rect x="51.0264%" y="645" width="30.4985%" height="15" fill="rgb(243,228,27)" fg:x="348" fg:w="208"/><text x="51.2764%" y="655.50">hell_winit::window::Window::handle_redraw_request</text></g><g><title>hell_app::app::HellApp::draw_frame (208 samples, 30.50%)</title><rect x="51.0264%" y="629" width="30.4985%" height="15" fill="rgb(245,77,44)" fg:x="348" fg:w="208"/><text x="51.2764%" y="639.50">hell_app::app::HellApp::draw_frame</text></g><g><title>hell_renderer::hell_renderer::HellRenderer::draw_frame (208 samples, 30.50%)</title><rect x="51.0264%" y="613" width="30.4985%" height="15" fill="rgb(235,214,42)" fg:x="348" fg:w="208"/><text x="51.2764%" y="623.50">hell_renderer::hell_renderer::HellRenderer::draw_..</text></g><g><title>hell_renderer::vulkan::vulkan_backend::VulkanBackend::update_object_buffer (1 samples, 0.15%)</title><rect x="81.3783%" y="597" width="0.1466%" height="15" fill="rgb(221,74,3)" fg:x="555" fg:w="1"/><text x="81.6283%" y="607.50"></text></g><g><title>hell_renderer::vulkan::buffer::VulkanBuffer::upload_data_storage_buffer (1 samples, 0.15%)</title><rect x="81.3783%" y="581" width="0.1466%" height="15" fill="rgb(206,121,29)" fg:x="555" fg:w="1"/><text x="81.6283%" y="591.50"></text></g><g><title>ash::device::Device::map_memory (1 samples, 0.15%)</title><rect x="81.3783%" y="565" width="0.1466%" height="15" fill="rgb(249,131,53)" fg:x="555" fg:w="1"/><text x="81.6283%" y="575.50"></text></g><g><title>vulkan_layer_chassis::MapMemory (1 samples, 0.15%)</title><rect x="81.3783%" y="549" width="0.1466%" height="15" fill="rgb(236,170,29)" fg:x="555" fg:w="1"/><text x="81.6283%" y="559.50"></text></g><g><title>counter&lt;VkDeviceMemory_T*&gt;::StartWrite (1 samples, 0.15%)</title><rect x="81.3783%" y="533" width="0.1466%" height="15" fill="rgb(247,96,15)" fg:x="555" fg:w="1"/><text x="81.6283%" y="543.50"></text></g><g><title>counter&lt;VkDeviceMemory_T*&gt;::FindObject (1 samples, 0.15%)</title><rect x="81.3783%" y="517" width="0.1466%" height="15" fill="rgb(211,210,7)" fg:x="555" fg:w="1"/><text x="81.6283%" y="527.50"></text></g><g><title>vl_concurrent_unordered_map&lt;VkDeviceMemory_T*, std::shared_ptr&lt;ObjectUseData&gt;, 6, robin_hood::hash&lt;VkDeviceMemory_T*, void&gt; &gt;::FindResult::~FindResult (1 samples, 0.15%)</title><rect x="81.3783%" y="501" width="0.1466%" height="15" fill="rgb(240,88,50)" fg:x="555" fg:w="1"/><text x="81.6283%" y="511.50"></text></g><g><title>std::pair&lt;bool, std::shared_ptr&lt;ObjectUseData&gt; &gt;::~pair (1 samples, 0.15%)</title><rect x="81.3783%" y="485" width="0.1466%" height="15" fill="rgb(209,229,26)" fg:x="555" fg:w="1"/><text x="81.6283%" y="495.50"></text></g><g><title>std::shared_ptr&lt;ObjectUseData&gt;::~shared_ptr (1 samples, 0.15%)</title><rect x="81.3783%" y="469" width="0.1466%" height="15" fill="rgb(210,68,23)" fg:x="555" fg:w="1"/><text x="81.6283%" y="479.50"></text></g><g><title>std::__shared_ptr&lt;ObjectUseData, (__gnu_cxx::_Lock_policy)2&gt;::~__shared_ptr (1 samples, 0.15%)</title><rect x="81.3783%" y="453" width="0.1466%" height="15" fill="rgb(229,180,13)" fg:x="555" fg:w="1"/><text x="81.6283%" y="463.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::~__shared_count (1 samples, 0.15%)</title><rect x="81.3783%" y="437" width="0.1466%" height="15" fill="rgb(236,53,44)" fg:x="555" fg:w="1"/><text x="81.6283%" y="447.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.15%)</title><rect x="81.3783%" y="421" width="0.1466%" height="15" fill="rgb(244,214,29)" fg:x="555" fg:w="1"/><text x="81.6283%" y="431.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (1 samples, 0.15%)</title><rect x="81.5249%" y="437" width="0.1466%" height="15" fill="rgb(220,75,29)" fg:x="556" fg:w="1"/><text x="81.7749%" y="447.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="81.5249%" y="421" width="0.1466%" height="15" fill="rgb(214,183,37)" fg:x="556" fg:w="1"/><text x="81.7749%" y="431.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="81.5249%" y="405" width="0.1466%" height="15" fill="rgb(239,117,29)" fg:x="556" fg:w="1"/><text x="81.7749%" y="415.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="81.5249%" y="389" width="0.1466%" height="15" fill="rgb(237,171,35)" fg:x="556" fg:w="1"/><text x="81.7749%" y="399.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (5 samples, 0.73%)</title><rect x="81.6716%" y="421" width="0.7331%" height="15" fill="rgb(229,178,53)" fg:x="557" fg:w="5"/><text x="81.9216%" y="431.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (5 samples, 0.73%)</title><rect x="81.6716%" y="405" width="0.7331%" height="15" fill="rgb(210,102,19)" fg:x="557" fg:w="5"/><text x="81.9216%" y="415.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (4 samples, 0.59%)</title><rect x="81.8182%" y="389" width="0.5865%" height="15" fill="rgb(235,127,22)" fg:x="558" fg:w="4"/><text x="82.0682%" y="399.50"></text></g><g><title>__sched_yield (4 samples, 0.59%)</title><rect x="81.8182%" y="373" width="0.5865%" height="15" fill="rgb(244,31,31)" fg:x="558" fg:w="4"/><text x="82.0682%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.44%)</title><rect x="81.9648%" y="357" width="0.4399%" height="15" fill="rgb(231,43,21)" fg:x="559" fg:w="3"/><text x="82.2148%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="82.2581%" y="341" width="0.1466%" height="15" fill="rgb(217,131,35)" fg:x="561" fg:w="1"/><text x="82.5081%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="82.2581%" y="325" width="0.1466%" height="15" fill="rgb(221,149,4)" fg:x="561" fg:w="1"/><text x="82.5081%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.15%)</title><rect x="82.2581%" y="309" width="0.1466%" height="15" fill="rgb(232,170,28)" fg:x="561" fg:w="1"/><text x="82.5081%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="82.5513%" y="405" width="0.1466%" height="15" fill="rgb(238,56,10)" fg:x="563" fg:w="1"/><text x="82.8013%" y="415.50"></text></g><g><title>hell_renderer::vulkan::frame::VulkanFrameData::present_queue (12 samples, 1.76%)</title><rect x="81.5249%" y="597" width="1.7595%" height="15" fill="rgb(235,196,14)" fg:x="556" fg:w="12"/><text x="81.7749%" y="607.50"></text></g><g><title>ash::extensions::khr::swapchain::Swapchain::queue_present (12 samples, 1.76%)</title><rect x="81.5249%" y="581" width="1.7595%" height="15" fill="rgb(216,45,48)" fg:x="556" fg:w="12"/><text x="81.7749%" y="591.50"></text></g><g><title>vulkan_layer_chassis::QueuePresentKHR (12 samples, 1.76%)</title><rect x="81.5249%" y="565" width="1.7595%" height="15" fill="rgb(238,213,17)" fg:x="556" fg:w="12"/><text x="81.7749%" y="575.50"></text></g><g><title>DispatchQueuePresentKHR (12 samples, 1.76%)</title><rect x="81.5249%" y="549" width="1.7595%" height="15" fill="rgb(212,13,2)" fg:x="556" fg:w="12"/><text x="81.7749%" y="559.50"></text></g><g><title>[libGLX_nvidia.so.525.60.11] (12 samples, 1.76%)</title><rect x="81.5249%" y="533" width="1.7595%" height="15" fill="rgb(240,114,20)" fg:x="556" fg:w="12"/><text x="81.7749%" y="543.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (12 samples, 1.76%)</title><rect x="81.5249%" y="517" width="1.7595%" height="15" fill="rgb(228,41,40)" fg:x="556" fg:w="12"/><text x="81.7749%" y="527.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (12 samples, 1.76%)</title><rect x="81.5249%" y="501" width="1.7595%" height="15" fill="rgb(244,132,35)" fg:x="556" fg:w="12"/><text x="81.7749%" y="511.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (12 samples, 1.76%)</title><rect x="81.5249%" y="485" width="1.7595%" height="15" fill="rgb(253,189,4)" fg:x="556" fg:w="12"/><text x="81.7749%" y="495.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (12 samples, 1.76%)</title><rect x="81.5249%" y="469" width="1.7595%" height="15" fill="rgb(224,37,19)" fg:x="556" fg:w="12"/><text x="81.7749%" y="479.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (12 samples, 1.76%)</title><rect x="81.5249%" y="453" width="1.7595%" height="15" fill="rgb(235,223,18)" fg:x="556" fg:w="12"/><text x="81.7749%" y="463.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (11 samples, 1.61%)</title><rect x="81.6716%" y="437" width="1.6129%" height="15" fill="rgb(235,163,25)" fg:x="557" fg:w="11"/><text x="81.9216%" y="447.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (6 samples, 0.88%)</title><rect x="82.4047%" y="421" width="0.8798%" height="15" fill="rgb(217,145,28)" fg:x="562" fg:w="6"/><text x="82.6547%" y="431.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (4 samples, 0.59%)</title><rect x="82.6979%" y="405" width="0.5865%" height="15" fill="rgb(223,223,32)" fg:x="564" fg:w="4"/><text x="82.9479%" y="415.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (3 samples, 0.44%)</title><rect x="82.8446%" y="389" width="0.4399%" height="15" fill="rgb(227,189,39)" fg:x="565" fg:w="3"/><text x="83.0946%" y="399.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="83.1378%" y="373" width="0.1466%" height="15" fill="rgb(248,10,22)" fg:x="567" fg:w="1"/><text x="83.3878%" y="383.50"></text></g><g><title>layer_data::optional&lt;GlobalImageLayoutRangeMap&gt;::emplace&lt;unsigned long&gt; (1 samples, 0.15%)</title><rect x="83.2845%" y="485" width="0.1466%" height="15" fill="rgb(248,46,39)" fg:x="568" fg:w="1"/><text x="83.5345%" y="495.50"></text></g><g><title>GlobalImageLayoutRangeMap::GlobalImageLayoutRangeMap (1 samples, 0.15%)</title><rect x="83.2845%" y="469" width="0.1466%" height="15" fill="rgb(248,113,48)" fg:x="568" fg:w="1"/><text x="83.5345%" y="479.50"></text></g><g><title>subresource_adapter::BothRangeMap&lt;VkImageLayout, 16ul&gt;::BothRangeMap (1 samples, 0.15%)</title><rect x="83.2845%" y="453" width="0.1466%" height="15" fill="rgb(245,16,25)" fg:x="568" fg:w="1"/><text x="83.5345%" y="463.50"></text></g><g><title>subresource_adapter::BothRangeMap&lt;VkImageLayout, 16ul&gt;::MakeSmallMap (1 samples, 0.15%)</title><rect x="83.2845%" y="437" width="0.1466%" height="15" fill="rgb(249,152,16)" fg:x="568" fg:w="1"/><text x="83.5345%" y="447.50"></text></g><g><title>sparse_container::small_range_map&lt;unsigned long, VkImageLayout, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::small_range_map (1 samples, 0.15%)</title><rect x="83.2845%" y="421" width="0.1466%" height="15" fill="rgb(250,16,1)" fg:x="568" fg:w="1"/><text x="83.5345%" y="431.50"></text></g><g><title>sparse_container::small_range_map&lt;unsigned long, VkImageLayout, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::init_range (1 samples, 0.15%)</title><rect x="83.2845%" y="405" width="0.1466%" height="15" fill="rgb(249,138,3)" fg:x="568" fg:w="1"/><text x="83.5345%" y="415.50"></text></g><g><title>GetLayoutRangeMap (2 samples, 0.29%)</title><rect x="83.2845%" y="501" width="0.2933%" height="15" fill="rgb(227,71,41)" fg:x="568" fg:w="2"/><text x="83.5345%" y="511.50"></text></g><g><title>robin_hood::detail::Table&lt;false, 80ul, IMAGE_STATE const*, layer_data::optional&lt;GlobalImageLayoutRangeMap&gt;, robin_hood::hash&lt;IMAGE_STATE const*, void&gt;, std::equal_to&lt;IMAGE_STATE const*&gt; &gt;::operator[]&lt;layer_data::optional&lt;GlobalImageLayoutRangeMap&gt; &gt; (1 samples, 0.15%)</title><rect x="83.4311%" y="485" width="0.1466%" height="15" fill="rgb(209,184,23)" fg:x="569" fg:w="1"/><text x="83.6811%" y="495.50"></text></g><g><title>robin_hood::detail::Table&lt;false, 80ul, IMAGE_STATE const*, layer_data::optional&lt;GlobalImageLayoutRangeMap&gt;, robin_hood::hash&lt;IMAGE_STATE const*, void&gt;, std::equal_to&lt;IMAGE_STATE const*&gt; &gt;::DataNode&lt;robin_hood::detail::Table&lt;false, 80ul, IMAGE_STATE const*, layer_data::optional&lt;GlobalImageLayoutRangeMap&gt;, robin_hood::hash&lt;IMAGE_STATE const*, void&gt;, std::equal_to&lt;IMAGE_STATE const*&gt; &gt;, false&gt;::DataNode&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;IMAGE_STATE const*&amp;&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.15%)</title><rect x="83.4311%" y="469" width="0.1466%" height="15" fill="rgb(223,215,31)" fg:x="569" fg:w="1"/><text x="83.6811%" y="479.50"></text></g><g><title>robin_hood::detail::BulkPoolAllocator&lt;robin_hood::pair&lt;IMAGE_STATE const* const, layer_data::optional&lt;GlobalImageLayoutRangeMap&gt; &gt;, 4ul, 16384ul&gt;::allocate (1 samples, 0.15%)</title><rect x="83.4311%" y="453" width="0.1466%" height="15" fill="rgb(210,146,28)" fg:x="569" fg:w="1"/><text x="83.6811%" y="463.50"></text></g><g><title>robin_hood::detail::BulkPoolAllocator&lt;robin_hood::pair&lt;IMAGE_STATE const* const, layer_data::optional&lt;GlobalImageLayoutRangeMap&gt; &gt;, 4ul, 16384ul&gt;::performAllocation (1 samples, 0.15%)</title><rect x="83.4311%" y="437" width="0.1466%" height="15" fill="rgb(209,183,41)" fg:x="569" fg:w="1"/><text x="83.6811%" y="447.50"></text></g><g><title>malloc (1 samples, 0.15%)</title><rect x="83.4311%" y="421" width="0.1466%" height="15" fill="rgb(209,224,45)" fg:x="569" fg:w="1"/><text x="83.6811%" y="431.50"></text></g><g><title>sparse_container::parallel_iterator&lt;GlobalImageLayoutRangeMap, subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt; const, sparse_container::range&lt;unsigned long&gt; &gt;::invalidate_A (1 samples, 0.15%)</title><rect x="83.5777%" y="469" width="0.1466%" height="15" fill="rgb(224,209,51)" fg:x="570" fg:w="1"/><text x="83.8277%" y="479.50"></text></g><g><title>sparse_container::parallel_iterator&lt;GlobalImageLayoutRangeMap, subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt; const, sparse_container::range&lt;unsigned long&gt; &gt;::compute_delta (1 samples, 0.15%)</title><rect x="83.5777%" y="453" width="0.1466%" height="15" fill="rgb(223,17,39)" fg:x="570" fg:w="1"/><text x="83.8277%" y="463.50"></text></g><g><title>sparse_container::cached_lower_bound_impl&lt;GlobalImageLayoutRangeMap&gt;::distance_to_edge (1 samples, 0.15%)</title><rect x="83.5777%" y="437" width="0.1466%" height="15" fill="rgb(234,204,37)" fg:x="570" fg:w="1"/><text x="83.8277%" y="447.50"></text></g><g><title>sparse_container::cached_lower_bound_impl&lt;GlobalImageLayoutRangeMap&gt;::offset (1 samples, 0.15%)</title><rect x="83.7243%" y="453" width="0.1466%" height="15" fill="rgb(236,120,5)" fg:x="571" fg:w="1"/><text x="83.9743%" y="463.50"></text></g><g><title>sparse_container::cached_lower_bound_impl&lt;GlobalImageLayoutRangeMap&gt;::seek (1 samples, 0.15%)</title><rect x="83.7243%" y="437" width="0.1466%" height="15" fill="rgb(248,97,27)" fg:x="571" fg:w="1"/><text x="83.9743%" y="447.50"></text></g><g><title>sparse_container::cached_lower_bound_impl&lt;GlobalImageLayoutRangeMap&gt;::is_lower_than (1 samples, 0.15%)</title><rect x="83.7243%" y="421" width="0.1466%" height="15" fill="rgb(240,66,17)" fg:x="571" fg:w="1"/><text x="83.9743%" y="431.50"></text></g><g><title>sparse_container::cached_lower_bound_impl&lt;GlobalImageLayoutRangeMap&gt;::at_end (1 samples, 0.15%)</title><rect x="83.7243%" y="405" width="0.1466%" height="15" fill="rgb(210,79,3)" fg:x="571" fg:w="1"/><text x="83.9743%" y="415.50"></text></g><g><title>subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt;::IteratorImpl&lt;subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt;, std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt;, sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::IteratorImpl&lt;sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;, std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; &gt;, sparse_container::range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, std::map&lt;sparse_container::range&lt;unsigned long&gt;, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, std::less&lt;sparse_container::range&lt;unsigned long&gt; &gt;, std::allocator&lt;std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; &gt; &gt; &gt;::iterator_impl&lt;std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt;, std::_Rb_tree_iterator&lt;std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; &gt; &gt; &gt;::operator== (1 samples, 0.15%)</title><rect x="83.7243%" y="389" width="0.1466%" height="15" fill="rgb(214,176,27)" fg:x="571" fg:w="1"/><text x="83.9743%" y="399.50"></text></g><g><title>subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt;::IteratorImpl&lt;subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt;, std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt;, sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::IteratorImpl&lt;sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;, std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; &gt;, sparse_container::range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, std::map&lt;sparse_container::range&lt;unsigned long&gt;, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, std::less&lt;sparse_container::range&lt;unsigned long&gt; &gt;, std::allocator&lt;std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; &gt; &gt; &gt;::iterator_impl&lt;std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt;, std::_Rb_tree_iterator&lt;std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; &gt; &gt; &gt;::operator== (1 samples, 0.15%)</title><rect x="83.7243%" y="373" width="0.1466%" height="15" fill="rgb(235,185,3)" fg:x="571" fg:w="1"/><text x="83.9743%" y="383.50"></text></g><g><title>sparse_container::splice&lt;GlobalImageLayoutRangeMap, subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt;, GlobalLayoutUpdater&gt; (3 samples, 0.44%)</title><rect x="83.5777%" y="501" width="0.4399%" height="15" fill="rgb(227,24,12)" fg:x="570" fg:w="3"/><text x="83.8277%" y="511.50"></text></g><g><title>sparse_container::splice&lt;GlobalImageLayoutRangeMap, subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt;, GlobalLayoutUpdater, subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt;::IteratorImpl&lt;subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt; const, std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; const, sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::const_iterator, sparse_container::range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, std::map&lt;sparse_container::range&lt;unsigned long&gt;, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, std::less&lt;sparse_container::range&lt;unsigned long&gt; &gt;, std::allocator&lt;std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; &gt; &gt; &gt;::const_iterator&gt; &gt; (3 samples, 0.44%)</title><rect x="83.5777%" y="485" width="0.4399%" height="15" fill="rgb(252,169,48)" fg:x="570" fg:w="3"/><text x="83.8277%" y="495.50"></text></g><g><title>sparse_container::parallel_iterator&lt;GlobalImageLayoutRangeMap, subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt; const, sparse_container::range&lt;unsigned long&gt; &gt;::operator++ (2 samples, 0.29%)</title><rect x="83.7243%" y="469" width="0.2933%" height="15" fill="rgb(212,65,1)" fg:x="571" fg:w="2"/><text x="83.9743%" y="479.50"></text></g><g><title>sparse_container::parallel_iterator&lt;GlobalImageLayoutRangeMap, subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt; const, sparse_container::range&lt;unsigned long&gt; &gt;::compute_delta (1 samples, 0.15%)</title><rect x="83.8710%" y="453" width="0.1466%" height="15" fill="rgb(242,39,24)" fg:x="572" fg:w="1"/><text x="84.1210%" y="463.50"></text></g><g><title>sparse_container::cached_lower_bound_impl&lt;subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt; const&gt;::distance_to_edge (1 samples, 0.15%)</title><rect x="83.8710%" y="437" width="0.1466%" height="15" fill="rgb(249,32,23)" fg:x="572" fg:w="1"/><text x="84.1210%" y="447.50"></text></g><g><title>sparse_container::cached_lower_bound_impl&lt;subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt; const&gt;::at_end (1 samples, 0.15%)</title><rect x="83.8710%" y="421" width="0.1466%" height="15" fill="rgb(251,195,23)" fg:x="572" fg:w="1"/><text x="84.1210%" y="431.50"></text></g><g><title>sparse_container::cached_lower_bound_impl&lt;subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt; const&gt;::at_end (1 samples, 0.15%)</title><rect x="83.8710%" y="405" width="0.1466%" height="15" fill="rgb(236,174,8)" fg:x="572" fg:w="1"/><text x="84.1210%" y="415.50"></text></g><g><title>subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt;::IteratorImpl&lt;subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt; const, std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; const, sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::const_iterator, sparse_container::range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, std::map&lt;sparse_container::range&lt;unsigned long&gt;, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, std::less&lt;sparse_container::range&lt;unsigned long&gt; &gt;, std::allocator&lt;std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; &gt; &gt; &gt;::const_iterator&gt;::operator== (1 samples, 0.15%)</title><rect x="83.8710%" y="389" width="0.1466%" height="15" fill="rgb(220,197,8)" fg:x="572" fg:w="1"/><text x="84.1210%" y="399.50"></text></g><g><title>subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt;::IteratorImpl&lt;subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt; const, std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; const, sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::const_iterator, sparse_container::range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, std::map&lt;sparse_container::range&lt;unsigned long&gt;, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, std::less&lt;sparse_container::range&lt;unsigned long&gt; &gt;, std::allocator&lt;std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; &gt; &gt; &gt;::const_iterator&gt;::operator== (1 samples, 0.15%)</title><rect x="83.8710%" y="373" width="0.1466%" height="15" fill="rgb(240,108,37)" fg:x="572" fg:w="1"/><text x="84.1210%" y="383.50"></text></g><g><title>sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::IteratorImpl&lt;sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt; const, std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; const&gt;::operator== (1 samples, 0.15%)</title><rect x="83.8710%" y="357" width="0.1466%" height="15" fill="rgb(232,176,24)" fg:x="572" fg:w="1"/><text x="84.1210%" y="367.50"></text></g><g><title>sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::IteratorImpl&lt;sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt; const, std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; const&gt;::at_end (1 samples, 0.15%)</title><rect x="83.8710%" y="341" width="0.1466%" height="15" fill="rgb(243,35,29)" fg:x="572" fg:w="1"/><text x="84.1210%" y="351.50"></text></g><g><title>subresource_adapter::BothRangeMap&lt;VkImageLayout, 16ul&gt;::IteratorImpl&lt;subresource_adapter::BothRangeMap&lt;VkImageLayout, 16ul&gt; const, std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, VkImageLayout&gt; const, sparse_container::small_range_map&lt;unsigned long, VkImageLayout, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::const_iterator, sparse_container::range_map&lt;unsigned long, VkImageLayout, sparse_container::range&lt;unsigned long&gt;, std::map&lt;sparse_container::range&lt;unsigned long&gt;, VkImageLayout, std::less&lt;sparse_container::range&lt;unsigned long&gt; &gt;, std::allocator&lt;std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, VkImageLayout&gt; &gt; &gt; &gt;::const_iterator&gt;::operator (1 samples, 0.15%)</title><rect x="84.0176%" y="501" width="0.1466%" height="15" fill="rgb(210,37,18)" fg:x="573" fg:w="1"/><text x="84.2676%" y="511.50"></text></g><g><title> (1 samples, 0.15%)</title><rect x="84.0176%" y="485" width="0.1466%" height="15" fill="rgb(224,184,40)" fg:x="573" fg:w="1"/><text x="84.2676%" y="495.50"></text></g><g><title>sparse_container::small_range_map&lt;unsigned long, VkImageLayout, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::IteratorImpl&lt;sparse_container::small_range_map&lt;unsigned long, VkImageLayout, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt; const, std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, VkImageLayout&gt; const&gt;::operator (1 samples, 0.15%)</title><rect x="84.0176%" y="469" width="0.1466%" height="15" fill="rgb(236,39,29)" fg:x="573" fg:w="1"/><text x="84.2676%" y="479.50"></text></g><g><title> (1 samples, 0.15%)</title><rect x="84.0176%" y="453" width="0.1466%" height="15" fill="rgb(232,48,39)" fg:x="573" fg:w="1"/><text x="84.2676%" y="463.50"></text></g><g><title>sparse_container::small_range_map&lt;unsigned long, VkImageLayout, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::get_value (1 samples, 0.15%)</title><rect x="84.0176%" y="437" width="0.1466%" height="15" fill="rgb(236,34,42)" fg:x="573" fg:w="1"/><text x="84.2676%" y="447.50"></text></g><g><title>std::array&lt;sparse_container::small_range_map&lt;unsigned long, VkImageLayout, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::BackingStore, 16ul&gt;::operator[] (1 samples, 0.15%)</title><rect x="84.0176%" y="421" width="0.1466%" height="15" fill="rgb(243,106,37)" fg:x="573" fg:w="1"/><text x="84.2676%" y="431.50"></text></g><g><title>std::__array_traits&lt;sparse_container::small_range_map&lt;unsigned long, VkImageLayout, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::BackingStore, 16ul&gt;::_S_ref (1 samples, 0.15%)</title><rect x="84.0176%" y="405" width="0.1466%" height="15" fill="rgb(218,96,6)" fg:x="573" fg:w="1"/><text x="84.2676%" y="415.50"></text></g><g><title>CoreChecks::ValidateCmdBufImageLayouts (7 samples, 1.03%)</title><rect x="83.2845%" y="517" width="1.0264%" height="15" fill="rgb(235,130,12)" fg:x="568" fg:w="7"/><text x="83.5345%" y="527.50"></text></g><g><title>subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt;::IteratorImpl&lt;subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt; const, std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; const, sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::const_iterator, sparse_container::range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, std::map&lt;sparse_container::range&lt;unsigned long&gt;, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, std::less&lt;sparse_container::range&lt;unsigned long&gt; &gt;, std::allocator&lt;std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; &gt; &gt; &gt;::const_iterator&gt;::operator!= (1 samples, 0.15%)</title><rect x="84.1642%" y="501" width="0.1466%" height="15" fill="rgb(231,95,0)" fg:x="574" fg:w="1"/><text x="84.4142%" y="511.50"></text></g><g><title>subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt;::IteratorImpl&lt;subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt; const, std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; const, sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::const_iterator, sparse_container::range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, std::map&lt;sparse_container::range&lt;unsigned long&gt;, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, std::less&lt;sparse_container::range&lt;unsigned long&gt; &gt;, std::allocator&lt;std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; &gt; &gt; &gt;::const_iterator&gt;::operator== (1 samples, 0.15%)</title><rect x="84.1642%" y="485" width="0.1466%" height="15" fill="rgb(228,12,23)" fg:x="574" fg:w="1"/><text x="84.4142%" y="495.50"></text></g><g><title>subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt;::IteratorImpl&lt;subresource_adapter::BothRangeMap&lt;image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, 16ul&gt; const, std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; const, sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::const_iterator, sparse_container::range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, std::map&lt;sparse_container::range&lt;unsigned long&gt;, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, std::less&lt;sparse_container::range&lt;unsigned long&gt; &gt;, std::allocator&lt;std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; &gt; &gt; &gt;::const_iterator&gt;::operator== (1 samples, 0.15%)</title><rect x="84.1642%" y="469" width="0.1466%" height="15" fill="rgb(216,12,1)" fg:x="574" fg:w="1"/><text x="84.4142%" y="479.50"></text></g><g><title>sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::IteratorImpl&lt;sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt; const, std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; const&gt;::operator== (1 samples, 0.15%)</title><rect x="84.1642%" y="453" width="0.1466%" height="15" fill="rgb(219,59,3)" fg:x="574" fg:w="1"/><text x="84.4142%" y="463.50"></text></g><g><title>sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt;::IteratorImpl&lt;sparse_container::small_range_map&lt;unsigned long, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry, sparse_container::range&lt;unsigned long&gt;, 16ul, unsigned char&gt; const, std::pair&lt;sparse_container::range&lt;unsigned long&gt; const, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry&gt; const&gt;::at_end (1 samples, 0.15%)</title><rect x="84.1642%" y="437" width="0.1466%" height="15" fill="rgb(215,208,46)" fg:x="574" fg:w="1"/><text x="84.4142%" y="447.50"></text></g><g><title>CoreChecks::PreCallValidateQueueSubmit (8 samples, 1.17%)</title><rect x="83.2845%" y="549" width="1.1730%" height="15" fill="rgb(254,224,29)" fg:x="568" fg:w="8"/><text x="83.5345%" y="559.50"></text></g><g><title>CommandBufferSubmitState::Validate (8 samples, 1.17%)</title><rect x="83.2845%" y="533" width="1.1730%" height="15" fill="rgb(232,14,29)" fg:x="568" fg:w="8"/><text x="83.5345%" y="543.50"></text></g><g><title>CoreChecks::ValidateQueueFamilyIndices (1 samples, 0.15%)</title><rect x="84.3109%" y="517" width="0.1466%" height="15" fill="rgb(208,45,52)" fg:x="575" fg:w="1"/><text x="84.5609%" y="527.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="85.7771%" y="373" width="0.2933%" height="15" fill="rgb(234,191,28)" fg:x="585" fg:w="2"/><text x="86.0271%" y="383.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (2 samples, 0.29%)</title><rect x="85.7771%" y="357" width="0.2933%" height="15" fill="rgb(244,67,43)" fg:x="585" fg:w="2"/><text x="86.0271%" y="367.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (1 samples, 0.15%)</title><rect x="85.9238%" y="341" width="0.1466%" height="15" fill="rgb(236,189,24)" fg:x="586" fg:w="1"/><text x="86.1738%" y="351.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="86.0704%" y="373" width="0.1466%" height="15" fill="rgb(239,214,33)" fg:x="587" fg:w="1"/><text x="86.3204%" y="383.50"></text></g><g><title>hell_renderer::vulkan::frame::VulkanFrameData::submit_queue (21 samples, 3.08%)</title><rect x="83.2845%" y="597" width="3.0792%" height="15" fill="rgb(226,176,41)" fg:x="568" fg:w="21"/><text x="83.5345%" y="607.50">hel..</text></g><g><title>ash::device::Device::queue_submit (21 samples, 3.08%)</title><rect x="83.2845%" y="581" width="3.0792%" height="15" fill="rgb(248,47,8)" fg:x="568" fg:w="21"/><text x="83.5345%" y="591.50">ash..</text></g><g><title>vulkan_layer_chassis::QueueSubmit (21 samples, 3.08%)</title><rect x="83.2845%" y="565" width="3.0792%" height="15" fill="rgb(218,81,44)" fg:x="568" fg:w="21"/><text x="83.5345%" y="575.50">vul..</text></g><g><title>DispatchQueueSubmit (13 samples, 1.91%)</title><rect x="84.4575%" y="549" width="1.9062%" height="15" fill="rgb(213,98,6)" fg:x="576" fg:w="13"/><text x="84.7075%" y="559.50">D..</text></g><g><title>[libGLX_nvidia.so.525.60.11] (13 samples, 1.91%)</title><rect x="84.4575%" y="533" width="1.9062%" height="15" fill="rgb(222,85,22)" fg:x="576" fg:w="13"/><text x="84.7075%" y="543.50">[..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (13 samples, 1.91%)</title><rect x="84.4575%" y="517" width="1.9062%" height="15" fill="rgb(239,46,39)" fg:x="576" fg:w="13"/><text x="84.7075%" y="527.50">[..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (13 samples, 1.91%)</title><rect x="84.4575%" y="501" width="1.9062%" height="15" fill="rgb(237,12,29)" fg:x="576" fg:w="13"/><text x="84.7075%" y="511.50">[..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (13 samples, 1.91%)</title><rect x="84.4575%" y="485" width="1.9062%" height="15" fill="rgb(214,77,8)" fg:x="576" fg:w="13"/><text x="84.7075%" y="495.50">[..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (12 samples, 1.76%)</title><rect x="84.6041%" y="469" width="1.7595%" height="15" fill="rgb(217,168,37)" fg:x="577" fg:w="12"/><text x="84.8541%" y="479.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (12 samples, 1.76%)</title><rect x="84.6041%" y="453" width="1.7595%" height="15" fill="rgb(221,217,23)" fg:x="577" fg:w="12"/><text x="84.8541%" y="463.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (12 samples, 1.76%)</title><rect x="84.6041%" y="437" width="1.7595%" height="15" fill="rgb(243,229,36)" fg:x="577" fg:w="12"/><text x="84.8541%" y="447.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (10 samples, 1.47%)</title><rect x="84.8974%" y="421" width="1.4663%" height="15" fill="rgb(251,163,40)" fg:x="579" fg:w="10"/><text x="85.1474%" y="431.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (9 samples, 1.32%)</title><rect x="85.0440%" y="405" width="1.3196%" height="15" fill="rgb(237,222,12)" fg:x="580" fg:w="9"/><text x="85.2940%" y="415.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (8 samples, 1.17%)</title><rect x="85.1906%" y="389" width="1.1730%" height="15" fill="rgb(248,132,6)" fg:x="581" fg:w="8"/><text x="85.4406%" y="399.50"></text></g><g><title>pthread_rwlock_wrlock (1 samples, 0.15%)</title><rect x="86.2170%" y="373" width="0.1466%" height="15" fill="rgb(227,167,50)" fg:x="588" fg:w="1"/><text x="86.4670%" y="383.50"></text></g><g><title>std::_Rb_tree&lt;VkDeviceMemory_T*, std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt; &gt;, std::less&lt;VkDeviceMemory_T*&gt;, std::allocator&lt;std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt; &gt; &gt;::_M_get_insert_hint_unique_pos (1 samples, 0.15%)</title><rect x="86.3636%" y="437" width="0.1466%" height="15" fill="rgb(242,84,37)" fg:x="589" fg:w="1"/><text x="86.6136%" y="447.50"></text></g><g><title>hell_renderer::vulkan::vulkan_backend::VulkanBackend::begin_render_pass (2 samples, 0.29%)</title><rect x="86.3636%" y="597" width="0.2933%" height="15" fill="rgb(212,4,50)" fg:x="589" fg:w="2"/><text x="86.6136%" y="607.50"></text></g><g><title>vulkan_layer_chassis::CmdBeginRenderPass (2 samples, 0.29%)</title><rect x="86.3636%" y="581" width="0.2933%" height="15" fill="rgb(230,228,32)" fg:x="589" fg:w="2"/><text x="86.6136%" y="591.50"></text></g><g><title>CoreChecks::ValidateCmdBeginRenderPass (2 samples, 0.29%)</title><rect x="86.3636%" y="565" width="0.2933%" height="15" fill="rgb(248,217,23)" fg:x="589" fg:w="2"/><text x="86.6136%" y="575.50"></text></g><g><title>CoreChecks::ValidateDependencies (2 samples, 0.29%)</title><rect x="86.3636%" y="549" width="0.2933%" height="15" fill="rgb(238,197,32)" fg:x="589" fg:w="2"/><text x="86.6136%" y="559.50"></text></g><g><title>MEMORY_TRACKED_RESOURCE_STATE&lt;IMAGE_STATE, BindableNoMemoryTracker&gt;::DoesResourceMemoryOverlap (2 samples, 0.29%)</title><rect x="86.3636%" y="533" width="0.2933%" height="15" fill="rgb(236,106,1)" fg:x="589" fg:w="2"/><text x="86.6136%" y="543.50"></text></g><g><title>MEMORY_TRACKED_RESOURCE_STATE&lt;IMAGE_STATE, BindableLinearMemoryTracker&gt;::GetBoundMemoryRange (2 samples, 0.29%)</title><rect x="86.3636%" y="517" width="0.2933%" height="15" fill="rgb(219,228,13)" fg:x="589" fg:w="2"/><text x="86.6136%" y="527.50"></text></g><g><title>BindableLinearMemoryTracker::GetBoundMemoryRange (2 samples, 0.29%)</title><rect x="86.3636%" y="501" width="0.2933%" height="15" fill="rgb(238,30,35)" fg:x="589" fg:w="2"/><text x="86.6136%" y="511.50"></text></g><g><title>std::map&lt;VkDeviceMemory_T*, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt;, std::less&lt;VkDeviceMemory_T*&gt;, std::allocator&lt;std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt; &gt; &gt;::map (2 samples, 0.29%)</title><rect x="86.3636%" y="485" width="0.2933%" height="15" fill="rgb(236,70,23)" fg:x="589" fg:w="2"/><text x="86.6136%" y="495.50"></text></g><g><title>std::_Rb_tree&lt;VkDeviceMemory_T*, std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt; &gt;, std::less&lt;VkDeviceMemory_T*&gt;, std::allocator&lt;std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt; &gt; &gt;::_M_insert_range_unique&lt;std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt; const*&gt; (2 samples, 0.29%)</title><rect x="86.3636%" y="469" width="0.2933%" height="15" fill="rgb(249,104,48)" fg:x="589" fg:w="2"/><text x="86.6136%" y="479.50"></text></g><g><title>std::_Rb_tree&lt;VkDeviceMemory_T*, std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt; &gt;, std::less&lt;VkDeviceMemory_T*&gt;, std::allocator&lt;std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt; &gt; &gt;::_M_insert_unique_&lt;std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt; const&amp;, std::_Rb_tree&lt;VkDeviceMemory_T*, std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt; &gt;, std::less&lt;VkDeviceMemory_T*&gt;, std::allocator&lt;std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt; &gt; &gt;::_Alloc_node&gt; (2 samples, 0.29%)</title><rect x="86.3636%" y="453" width="0.2933%" height="15" fill="rgb(254,117,50)" fg:x="589" fg:w="2"/><text x="86.6136%" y="463.50"></text></g><g><title>std::_Rb_tree&lt;VkDeviceMemory_T*, std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt;, std::_Select1st&lt;std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt; &gt;, std::less&lt;VkDeviceMemory_T*&gt;, std::allocator&lt;std::pair&lt;VkDeviceMemory_T* const, std::vector&lt;sparse_container::range&lt;unsigned long&gt;, std::allocator&lt;sparse_container::range&lt;unsigned long&gt; &gt; &gt; &gt; &gt; &gt;::_M_get_insert_unique_pos (1 samples, 0.15%)</title><rect x="86.5103%" y="437" width="0.1466%" height="15" fill="rgb(223,152,4)" fg:x="590" fg:w="1"/><text x="86.7603%" y="447.50"></text></g><g><title>CMD_BUFFER_STATE::GetImageSubresourceLayoutMap (2 samples, 0.29%)</title><rect x="86.8035%" y="405" width="0.2933%" height="15" fill="rgb(245,6,2)" fg:x="592" fg:w="2"/><text x="87.0535%" y="415.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, IMAGE_STATE const*, std::shared_ptr&lt;image_layout_map::ImageSubresourceLayoutMap&gt;, robin_hood::hash&lt;IMAGE_STATE const*, void&gt;, std::equal_to&lt;IMAGE_STATE const*&gt; &gt;::find (2 samples, 0.29%)</title><rect x="86.8035%" y="389" width="0.2933%" height="15" fill="rgb(249,150,24)" fg:x="592" fg:w="2"/><text x="87.0535%" y="399.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkImageView_T*, std::shared_ptr&lt;IMAGE_VIEW_STATE&gt;, robin_hood::hash&lt;VkImageView_T*, void&gt;, std::equal_to&lt;VkImageView_T*&gt; &gt;::findIdx&lt;VkImageView_T*&gt; (2 samples, 0.29%)</title><rect x="86.8035%" y="373" width="0.2933%" height="15" fill="rgb(228,185,42)" fg:x="592" fg:w="2"/><text x="87.0535%" y="383.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, VkCommandBuffer_T*, std::unique_ptr&lt;LoggingLabelState, std::default_delete&lt;LoggingLabelState&gt; &gt;, robin_hood::hash&lt;VkCommandBuffer_T*, void&gt;, std::equal_to&lt;VkCommandBuffer_T*&gt; &gt;::keyToIdx&lt;VkCommandBuffer_T* const&amp;&gt; (1 samples, 0.15%)</title><rect x="86.9501%" y="357" width="0.1466%" height="15" fill="rgb(226,39,33)" fg:x="593" fg:w="1"/><text x="87.2001%" y="367.50"></text></g><g><title>function&lt;CoreChecks::VerifyImageLayoutRange&lt;CoreChecks::VerifyImageLayout(const CMD_BUFFER_STATE&amp;, const IMAGE_VIEW_STATE&amp;, VkImageLayout, char const*, char const*, bool*) const::&lt;lambda(const ImageSubresourceLayoutMap&amp;)&gt; &gt;(const CMD_BUFFER_STATE&amp;, const IMAGE_STATE&amp;, VkImageAspectFlags, VkImageLayout, const CoreChecks::VerifyImageLayout(const CMD_BUFFER_STATE&amp;, const IMAGE_VIEW_STATE&amp;, VkImageLayout, char const*, char const*, bool*) const::&lt;lambda(const ImageSubresourceLayoutMap&amp;)&gt;&amp;, char const*, char const*, bool*) const::&lt;lambda(const LayoutRange&amp;, const LayoutEntry&amp;)&gt; &gt; (1 samples, 0.15%)</title><rect x="87.0968%" y="405" width="0.1466%" height="15" fill="rgb(221,166,19)" fg:x="594" fg:w="1"/><text x="87.3468%" y="415.50"></text></g><g><title>_M_init_functor&lt;CoreChecks::VerifyImageLayoutRange&lt;CoreChecks::VerifyImageLayout(const CMD_BUFFER_STATE&amp;, const IMAGE_VIEW_STATE&amp;, VkImageLayout, char const*, char const*, bool*) const::&lt;lambda(const ImageSubresourceLayoutMap&amp;)&gt; &gt;(const CMD_BUFFER_STATE&amp;, const IMAGE_STATE&amp;, VkImageAspectFlags, VkImageLayout, const CoreChecks::VerifyImageLayout(const CMD_BUFFER_STATE&amp;, const IMAGE_VIEW_STATE&amp;, VkImageLayout, char const*, char const*, bool*) const::&lt;lambda(const ImageSubresourceLayoutMap&amp;)&gt;&amp;, char const*, char const*, bool*) const::&lt;lambda(const LayoutRange&amp;, const LayoutEntry&amp;)&gt; &gt; (1 samples, 0.15%)</title><rect x="87.0968%" y="389" width="0.1466%" height="15" fill="rgb(209,109,2)" fg:x="594" fg:w="1"/><text x="87.3468%" y="399.50"></text></g><g><title>CoreChecks::ValidateDescriptor (1 samples, 0.15%)</title><rect x="87.0968%" y="373" width="0.1466%" height="15" fill="rgb(252,216,26)" fg:x="594" fg:w="1"/><text x="87.3468%" y="383.50"></text></g><g><title>operator new (1 samples, 0.15%)</title><rect x="87.0968%" y="357" width="0.1466%" height="15" fill="rgb(227,173,36)" fg:x="594" fg:w="1"/><text x="87.3468%" y="367.50"></text></g><g><title>malloc (1 samples, 0.15%)</title><rect x="87.0968%" y="341" width="0.1466%" height="15" fill="rgb(209,90,7)" fg:x="594" fg:w="1"/><text x="87.3468%" y="351.50"></text></g><g><title>VerifyImageLayoutRange&lt;CoreChecks::VerifyImageLayout(const CMD_BUFFER_STATE&amp;, const IMAGE_VIEW_STATE&amp;, VkImageLayout, char const*, char const*, bool*) const::&lt;lambda(const ImageSubresourceLayoutMap&amp;)&gt; &gt; (4 samples, 0.59%)</title><rect x="86.8035%" y="421" width="0.5865%" height="15" fill="rgb(250,194,11)" fg:x="592" fg:w="4"/><text x="87.0535%" y="431.50"></text></g><g><title>std::function&lt;bool (sparse_container::range&lt;unsigned long&gt; const&amp;, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry const&amp;)&gt;::~function (1 samples, 0.15%)</title><rect x="87.2434%" y="405" width="0.1466%" height="15" fill="rgb(220,72,50)" fg:x="595" fg:w="1"/><text x="87.4934%" y="415.50"></text></g><g><title>std::_Function_base::~_Function_base (1 samples, 0.15%)</title><rect x="87.2434%" y="389" width="0.1466%" height="15" fill="rgb(222,106,48)" fg:x="595" fg:w="1"/><text x="87.4934%" y="399.50"></text></g><g><title>std::_Function_handler&lt;bool (sparse_container::range&lt;unsigned long&gt; const&amp;, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry const&amp;), CoreChecks::VerifyImageLayoutRange&lt;CoreChecks::VerifyImageLayout(CMD_BUFFER_STATE const&amp;, IMAGE_VIEW_STATE const&amp;, VkImageLayout, char const*, char const*, bool*) const::{lambda(image_layout_map::ImageSubresourceLayoutMap const&amp;)#1}&gt;(CMD_BUFFER_STATE const&amp;, IMAGE_STATE const&amp;, unsigned int, VkImageLayout, CoreChecks::VerifyImageLayout(CMD_BUFFER_STATE const&amp;, IMAGE_VIEW_STATE const&amp;, VkImageLayout, char const*, char const*, bool*) const::{lambda(image_layout_map::ImageSubresourceLayoutMap const&amp;)#1} const&amp;, char const*, char const*, bool*) const::{lambda(sparse_container::range&lt;unsigned long&gt; const&amp;, image_layout_map::ImageSubresourceLayoutMap::LayoutEntry const&amp;)#1}&gt;::_M_manager (1 samples, 0.15%)</title><rect x="87.2434%" y="373" width="0.1466%" height="15" fill="rgb(216,220,45)" fg:x="595" fg:w="1"/><text x="87.4934%" y="383.50"></text></g><g><title>CoreChecks::VerifyImageLayout (5 samples, 0.73%)</title><rect x="86.8035%" y="453" width="0.7331%" height="15" fill="rgb(234,112,18)" fg:x="592" fg:w="5"/><text x="87.0535%" y="463.50"></text></g><g><title>CoreChecks::VerifyImageLayout (5 samples, 0.73%)</title><rect x="86.8035%" y="437" width="0.7331%" height="15" fill="rgb(206,179,9)" fg:x="592" fg:w="5"/><text x="87.0535%" y="447.50"></text></g><g><title>std::__shared_ptr_access&lt;IMAGE_STATE, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator* (1 samples, 0.15%)</title><rect x="87.3900%" y="421" width="0.1466%" height="15" fill="rgb(215,115,40)" fg:x="596" fg:w="1"/><text x="87.6400%" y="431.50"></text></g><g><title>IMAGE_VIEW_STATE::OverlapSubresource (1 samples, 0.15%)</title><rect x="87.5367%" y="453" width="0.1466%" height="15" fill="rgb(222,69,34)" fg:x="597" fg:w="1"/><text x="87.7867%" y="463.50"></text></g><g><title>std::vector&lt;SAMPLER_STATE const*, std::allocator&lt;SAMPLER_STATE const*&gt; &gt;::emplace_back&lt;SAMPLER_STATE const*&gt; (4 samples, 0.59%)</title><rect x="87.6833%" y="453" width="0.5865%" height="15" fill="rgb(209,161,10)" fg:x="598" fg:w="4"/><text x="87.9333%" y="463.50"></text></g><g><title>std::vector&lt;SAMPLER_STATE const*, std::allocator&lt;SAMPLER_STATE const*&gt; &gt;::_M_realloc_insert&lt;SAMPLER_STATE const*&gt; (4 samples, 0.59%)</title><rect x="87.6833%" y="437" width="0.5865%" height="15" fill="rgb(217,6,38)" fg:x="598" fg:w="4"/><text x="87.9333%" y="447.50"></text></g><g><title>std::_Vector_base&lt;SAMPLER_STATE const*, std::allocator&lt;SAMPLER_STATE const*&gt; &gt;::_M_allocate (4 samples, 0.59%)</title><rect x="87.6833%" y="421" width="0.5865%" height="15" fill="rgb(229,229,48)" fg:x="598" fg:w="4"/><text x="87.9333%" y="431.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;SAMPLER_STATE const*&gt; &gt;::allocate (4 samples, 0.59%)</title><rect x="87.6833%" y="405" width="0.5865%" height="15" fill="rgb(225,21,28)" fg:x="598" fg:w="4"/><text x="87.9333%" y="415.50"></text></g><g><title>std::__new_allocator&lt;VkDebugUtilsMessengerEXT_T*&gt;::allocate (4 samples, 0.59%)</title><rect x="87.6833%" y="389" width="0.5865%" height="15" fill="rgb(206,33,13)" fg:x="598" fg:w="4"/><text x="87.9333%" y="399.50"></text></g><g><title>operator new (4 samples, 0.59%)</title><rect x="87.6833%" y="373" width="0.5865%" height="15" fill="rgb(242,178,17)" fg:x="598" fg:w="4"/><text x="87.9333%" y="383.50"></text></g><g><title>malloc (4 samples, 0.59%)</title><rect x="87.6833%" y="357" width="0.5865%" height="15" fill="rgb(220,162,5)" fg:x="598" fg:w="4"/><text x="87.9333%" y="367.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="88.1232%" y="341" width="0.1466%" height="15" fill="rgb(210,33,43)" fg:x="601" fg:w="1"/><text x="88.3732%" y="351.50"></text></g><g><title>CoreChecks::ValidateDrawState (12 samples, 1.76%)</title><rect x="86.6569%" y="533" width="1.7595%" height="15" fill="rgb(216,116,54)" fg:x="591" fg:w="12"/><text x="86.9069%" y="543.50"></text></g><g><title>CoreChecks::ValidateDescriptorSetBindingData (12 samples, 1.76%)</title><rect x="86.6569%" y="517" width="1.7595%" height="15" fill="rgb(249,92,24)" fg:x="591" fg:w="12"/><text x="86.9069%" y="527.50"></text></g><g><title>CoreChecks::ValidateDescriptors&lt;cvdescriptorset::DescriptorBindingImpl&lt;cvdescriptorset::ImageSamplerDescriptor&gt; &gt; (12 samples, 1.76%)</title><rect x="86.6569%" y="501" width="1.7595%" height="15" fill="rgb(231,189,14)" fg:x="591" fg:w="12"/><text x="86.9069%" y="511.50"></text></g><g><title>CoreChecks::ValidateDescriptor (12 samples, 1.76%)</title><rect x="86.6569%" y="485" width="1.7595%" height="15" fill="rgb(230,8,41)" fg:x="591" fg:w="12"/><text x="86.9069%" y="495.50"></text></g><g><title>CoreChecks::ValidateDescriptor (11 samples, 1.61%)</title><rect x="86.8035%" y="469" width="1.6129%" height="15" fill="rgb(249,7,27)" fg:x="592" fg:w="11"/><text x="87.0535%" y="479.50"></text></g><g><title>std::vector&lt;SAMPLER_STATE const*, std::allocator&lt;SAMPLER_STATE const*&gt; &gt;::~vector (1 samples, 0.15%)</title><rect x="88.2698%" y="453" width="0.1466%" height="15" fill="rgb(232,86,5)" fg:x="602" fg:w="1"/><text x="88.5198%" y="463.50"></text></g><g><title>std::_Vector_base&lt;SAMPLER_STATE const*, std::allocator&lt;SAMPLER_STATE const*&gt; &gt;::~_Vector_base (1 samples, 0.15%)</title><rect x="88.2698%" y="437" width="0.1466%" height="15" fill="rgb(224,175,18)" fg:x="602" fg:w="1"/><text x="88.5198%" y="447.50"></text></g><g><title>std::_Vector_base&lt;SAMPLER_STATE const*, std::allocator&lt;SAMPLER_STATE const*&gt; &gt;::_M_deallocate (1 samples, 0.15%)</title><rect x="88.2698%" y="421" width="0.1466%" height="15" fill="rgb(220,129,12)" fg:x="602" fg:w="1"/><text x="88.5198%" y="431.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;SAMPLER_STATE const*&gt; &gt;::deallocate (1 samples, 0.15%)</title><rect x="88.2698%" y="405" width="0.1466%" height="15" fill="rgb(210,19,36)" fg:x="602" fg:w="1"/><text x="88.5198%" y="415.50"></text></g><g><title>std::__new_allocator&lt;SAMPLER_STATE const*&gt;::deallocate (1 samples, 0.15%)</title><rect x="88.2698%" y="389" width="0.1466%" height="15" fill="rgb(219,96,14)" fg:x="602" fg:w="1"/><text x="88.5198%" y="399.50"></text></g><g><title>cfree (1 samples, 0.15%)</title><rect x="88.2698%" y="373" width="0.1466%" height="15" fill="rgb(249,106,1)" fg:x="602" fg:w="1"/><text x="88.5198%" y="383.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="88.2698%" y="357" width="0.1466%" height="15" fill="rgb(249,155,20)" fg:x="602" fg:w="1"/><text x="88.5198%" y="367.50"></text></g><g><title>CoreChecks::IsDynamic (3 samples, 0.44%)</title><rect x="89.0029%" y="517" width="0.4399%" height="15" fill="rgb(244,168,9)" fg:x="607" fg:w="3"/><text x="89.2529%" y="527.50"></text></g><g><title>PIPELINE_STATE::IsDynamic (3 samples, 0.44%)</title><rect x="89.0029%" y="501" width="0.4399%" height="15" fill="rgb(216,23,50)" fg:x="607" fg:w="3"/><text x="89.2529%" y="511.50"></text></g><g><title>CoreChecks::ValidateStatus (5 samples, 0.73%)</title><rect x="89.4428%" y="517" width="0.7331%" height="15" fill="rgb(224,219,20)" fg:x="610" fg:w="5"/><text x="89.6928%" y="527.50"></text></g><g><title>std::bitset&lt;69ul&gt;::operator[] (1 samples, 0.15%)</title><rect x="90.0293%" y="501" width="0.1466%" height="15" fill="rgb(222,156,15)" fg:x="614" fg:w="1"/><text x="90.2793%" y="511.50"></text></g><g><title>std::bitset&lt;69ul&gt;::_Unchecked_test (1 samples, 0.15%)</title><rect x="90.0293%" y="485" width="0.1466%" height="15" fill="rgb(231,97,17)" fg:x="614" fg:w="1"/><text x="90.2793%" y="495.50"></text></g><g><title>RENDER_PASS_STATE::UsesDynamicRendering (1 samples, 0.15%)</title><rect x="90.1760%" y="517" width="0.1466%" height="15" fill="rgb(218,70,48)" fg:x="615" fg:w="1"/><text x="90.4260%" y="527.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, unsigned int, unsigned int, robin_hood::hash&lt;unsigned int, void&gt;, std::equal_to&lt;unsigned int&gt; &gt;::find (2 samples, 0.29%)</title><rect x="90.3226%" y="517" width="0.2933%" height="15" fill="rgb(212,196,52)" fg:x="616" fg:w="2"/><text x="90.5726%" y="527.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, unsigned int, int, robin_hood::hash&lt;unsigned int, void&gt;, std::equal_to&lt;unsigned int&gt; &gt;::findIdx&lt;unsigned int&gt; (2 samples, 0.29%)</title><rect x="90.3226%" y="501" width="0.2933%" height="15" fill="rgb(243,203,18)" fg:x="616" fg:w="2"/><text x="90.5726%" y="511.50"></text></g><g><title>robin_hood::detail::Table&lt;true, 80ul, unsigned int, int, robin_hood::hash&lt;unsigned int, void&gt;, std::equal_to&lt;unsigned int&gt; &gt;::keyToIdx&lt;unsigned int const&amp;&gt; (2 samples, 0.29%)</title><rect x="90.3226%" y="485" width="0.2933%" height="15" fill="rgb(252,125,41)" fg:x="616" fg:w="2"/><text x="90.5726%" y="495.50"></text></g><g><title>CoreChecks::ValidatePipelineDrawtimeState (16 samples, 2.35%)</title><rect x="88.4164%" y="533" width="2.3460%" height="15" fill="rgb(223,180,33)" fg:x="603" fg:w="16"/><text x="88.6664%" y="543.50">C..</text></g><g><title>std::vector&lt;VkVertexInputAttributeDescription, std::allocator&lt;VkVertexInputAttributeDescription&gt; &gt;::size (1 samples, 0.15%)</title><rect x="90.6158%" y="517" width="0.1466%" height="15" fill="rgb(254,159,46)" fg:x="618" fg:w="1"/><text x="90.8658%" y="527.50"></text></g><g><title>winit::platform_impl::platform::EventLoop&lt;T&gt;::run (64 samples, 9.38%)</title><rect x="81.5249%" y="725" width="9.3842%" height="15" fill="rgb(254,38,10)" fg:x="556" fg:w="64"/><text x="81.7749%" y="735.50">winit::platfo..</text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run (64 samples, 9.38%)</title><rect x="81.5249%" y="709" width="9.3842%" height="15" fill="rgb(208,217,32)" fg:x="556" fg:w="64"/><text x="81.7749%" y="719.50">winit::platfo..</text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run_return::single_iteration (64 samples, 9.38%)</title><rect x="81.5249%" y="693" width="9.3842%" height="15" fill="rgb(221,120,13)" fg:x="556" fg:w="64"/><text x="81.7749%" y="703.50">winit::platfo..</text></g><g><title>hell_winit::window::Window::main_loop::{{closure}} (64 samples, 9.38%)</title><rect x="81.5249%" y="677" width="9.3842%" height="15" fill="rgb(246,54,52)" fg:x="556" fg:w="64"/><text x="81.7749%" y="687.50">hell_winit::w..</text></g><g><title>hell_winit::window::Window::handle_redraw_request (64 samples, 9.38%)</title><rect x="81.5249%" y="661" width="9.3842%" height="15" fill="rgb(242,34,25)" fg:x="556" fg:w="64"/><text x="81.7749%" y="671.50">hell_winit::w..</text></g><g><title>hell_app::app::HellApp::draw_frame (64 samples, 9.38%)</title><rect x="81.5249%" y="645" width="9.3842%" height="15" fill="rgb(247,209,9)" fg:x="556" fg:w="64"/><text x="81.7749%" y="655.50">hell_app::app..</text></g><g><title>hell_renderer::hell_renderer::HellRenderer::draw_frame (64 samples, 9.38%)</title><rect x="81.5249%" y="629" width="9.3842%" height="15" fill="rgb(228,71,26)" fg:x="556" fg:w="64"/><text x="81.7749%" y="639.50">hell_renderer..</text></g><g><title>hell_renderer::vulkan::vulkan_backend::VulkanBackend::draw_frame (64 samples, 9.38%)</title><rect x="81.5249%" y="613" width="9.3842%" height="15" fill="rgb(222,145,49)" fg:x="556" fg:w="64"/><text x="81.7749%" y="623.50">hell_renderer..</text></g><g><title>vulkan_layer_chassis::CmdDrawIndexed (29 samples, 4.25%)</title><rect x="86.6569%" y="597" width="4.2522%" height="15" fill="rgb(218,121,17)" fg:x="591" fg:w="29"/><text x="86.9069%" y="607.50">vulka..</text></g><g><title>CoreChecks::PreCallValidateCmdDrawIndexed (29 samples, 4.25%)</title><rect x="86.6569%" y="581" width="4.2522%" height="15" fill="rgb(244,50,7)" fg:x="591" fg:w="29"/><text x="86.9069%" y="591.50">CoreC..</text></g><g><title>CoreChecks::ValidateCmdDrawType (29 samples, 4.25%)</title><rect x="86.6569%" y="565" width="4.2522%" height="15" fill="rgb(246,229,37)" fg:x="591" fg:w="29"/><text x="86.9069%" y="575.50">CoreC..</text></g><g><title>CoreChecks::ValidateCmdBufDrawState (29 samples, 4.25%)</title><rect x="86.6569%" y="549" width="4.2522%" height="15" fill="rgb(225,18,5)" fg:x="591" fg:w="29"/><text x="86.9069%" y="559.50">CoreC..</text></g><g><title>CoreChecks::VerifySetLayoutCompatibility (1 samples, 0.15%)</title><rect x="90.7625%" y="533" width="0.1466%" height="15" fill="rgb(213,204,8)" fg:x="619" fg:w="1"/><text x="91.0125%" y="543.50"></text></g><g><title>cvdescriptorset::DescriptorSet::IsPushDescriptor (1 samples, 0.15%)</title><rect x="90.7625%" y="517" width="0.1466%" height="15" fill="rgb(238,103,6)" fg:x="619" fg:w="1"/><text x="91.0125%" y="527.50"></text></g><g><title>cvdescriptorset::DescriptorSetLayout::IsPushDescriptor (1 samples, 0.15%)</title><rect x="90.7625%" y="501" width="0.1466%" height="15" fill="rgb(222,25,35)" fg:x="619" fg:w="1"/><text x="91.0125%" y="511.50"></text></g><g><title>std::__shared_ptr_access&lt;cvdescriptorset::DescriptorSetLayoutDef const, (__gnu_cxx::_Lock_policy)2, false, false&gt;::operator (1 samples, 0.15%)</title><rect x="90.7625%" y="485" width="0.1466%" height="15" fill="rgb(213,203,35)" fg:x="619" fg:w="1"/><text x="91.0125%" y="495.50"></text></g><g><title> (1 samples, 0.15%)</title><rect x="90.7625%" y="469" width="0.1466%" height="15" fill="rgb(221,79,53)" fg:x="619" fg:w="1"/><text x="91.0125%" y="479.50"></text></g><g><title>std::__shared_ptr_access&lt;cvdescriptorset::DescriptorSetLayoutDef const, (__gnu_cxx::_Lock_policy)2, false, false&gt;::_M_get (1 samples, 0.15%)</title><rect x="90.7625%" y="453" width="0.1466%" height="15" fill="rgb(243,200,35)" fg:x="619" fg:w="1"/><text x="91.0125%" y="463.50"></text></g><g><title>std::__shared_ptr&lt;cvdescriptorset::DescriptorSetLayoutDef const, (__gnu_cxx::_Lock_policy)2&gt;::get (1 samples, 0.15%)</title><rect x="90.7625%" y="437" width="0.1466%" height="15" fill="rgb(248,60,25)" fg:x="619" fg:w="1"/><text x="91.0125%" y="447.50"></text></g><g><title>[libc.so.6] (2 samples, 0.29%)</title><rect x="96.6276%" y="341" width="0.2933%" height="15" fill="rgb(227,53,46)" fg:x="659" fg:w="2"/><text x="96.8776%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.15%)</title><rect x="98.3871%" y="309" width="0.1466%" height="15" fill="rgb(216,120,32)" fg:x="671" fg:w="1"/><text x="98.6371%" y="319.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (3 samples, 0.44%)</title><rect x="98.5337%" y="309" width="0.4399%" height="15" fill="rgb(220,134,1)" fg:x="672" fg:w="3"/><text x="98.7837%" y="319.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (3 samples, 0.44%)</title><rect x="98.5337%" y="293" width="0.4399%" height="15" fill="rgb(237,168,5)" fg:x="672" fg:w="3"/><text x="98.7837%" y="303.50"></text></g><g><title>pthread_rwlock_wrlock (1 samples, 0.15%)</title><rect x="98.8270%" y="277" width="0.1466%" height="15" fill="rgb(231,100,33)" fg:x="674" fg:w="1"/><text x="99.0770%" y="287.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (8 samples, 1.17%)</title><rect x="97.9472%" y="325" width="1.1730%" height="15" fill="rgb(236,177,47)" fg:x="668" fg:w="8"/><text x="98.1972%" y="335.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.15%)</title><rect x="98.9736%" y="309" width="0.1466%" height="15" fill="rgb(235,7,49)" fg:x="675" fg:w="1"/><text x="99.2236%" y="319.50"></text></g><g><title>[libnvidia-glcore.so.525.60.11] (16 samples, 2.35%)</title><rect x="96.9208%" y="341" width="2.3460%" height="15" fill="rgb(232,119,22)" fg:x="661" fg:w="16"/><text x="97.1708%" y="351.50">[..</text></g><g><title>pthread_rwlock_wrlock (1 samples, 0.15%)</title><rect x="99.1202%" y="325" width="0.1466%" height="15" fill="rgb(254,73,53)" fg:x="676" fg:w="1"/><text x="99.3702%" y="335.50"></text></g><g><title>__vdso_gettimeofday (1 samples, 0.15%)</title><rect x="99.2669%" y="341" width="0.1466%" height="15" fill="rgb(251,35,20)" fg:x="677" fg:w="1"/><text x="99.5169%" y="351.50"></text></g><g><title>[[vdso]] (1 samples, 0.15%)</title><rect x="99.2669%" y="325" width="0.1466%" height="15" fill="rgb(241,119,20)" fg:x="677" fg:w="1"/><text x="99.5169%" y="335.50"></text></g><g><title>pthread_rwlock_unlock (1 samples, 0.15%)</title><rect x="99.4135%" y="341" width="0.1466%" height="15" fill="rgb(207,102,14)" fg:x="678" fg:w="1"/><text x="99.6635%" y="351.50"></text></g><g><title>all (682 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(248,201,50)" fg:x="0" fg:w="682"/><text x="0.2500%" y="783.50"></text></g><g><title>nocoru (659 samples, 96.63%)</title><rect x="3.3724%" y="757" width="96.6276%" height="15" fill="rgb(222,185,44)" fg:x="23" fg:w="659"/><text x="3.6224%" y="767.50">nocoru</text></g><g><title>[unknown] (580 samples, 85.04%)</title><rect x="14.9560%" y="741" width="85.0440%" height="15" fill="rgb(218,107,18)" fg:x="102" fg:w="580"/><text x="15.2060%" y="751.50">[unknown]</text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run (62 samples, 9.09%)</title><rect x="90.9091%" y="725" width="9.0909%" height="15" fill="rgb(237,177,39)" fg:x="620" fg:w="62"/><text x="91.1591%" y="735.50">winit::platfo..</text></g><g><title>winit::platform_impl::platform::x11::EventLoop&lt;T&gt;::run_return::single_iteration (62 samples, 9.09%)</title><rect x="90.9091%" y="709" width="9.0909%" height="15" fill="rgb(246,69,6)" fg:x="620" fg:w="62"/><text x="91.1591%" y="719.50">winit::platfo..</text></g><g><title>hell_winit::window::Window::main_loop::{{closure}} (62 samples, 9.09%)</title><rect x="90.9091%" y="693" width="9.0909%" height="15" fill="rgb(234,208,37)" fg:x="620" fg:w="62"/><text x="91.1591%" y="703.50">hell_winit::w..</text></g><g><title>hell_winit::window::Window::handle_redraw_request (62 samples, 9.09%)</title><rect x="90.9091%" y="677" width="9.0909%" height="15" fill="rgb(225,4,6)" fg:x="620" fg:w="62"/><text x="91.1591%" y="687.50">hell_winit::w..</text></g><g><title>hell_app::app::HellApp::draw_frame (62 samples, 9.09%)</title><rect x="90.9091%" y="661" width="9.0909%" height="15" fill="rgb(233,45,0)" fg:x="620" fg:w="62"/><text x="91.1591%" y="671.50">hell_app::app..</text></g><g><title>hell_renderer::hell_renderer::HellRenderer::draw_frame (62 samples, 9.09%)</title><rect x="90.9091%" y="645" width="9.0909%" height="15" fill="rgb(226,136,5)" fg:x="620" fg:w="62"/><text x="91.1591%" y="655.50">hell_renderer..</text></g><g><title>hell_renderer::vulkan::vulkan_backend::VulkanBackend::draw_frame (62 samples, 9.09%)</title><rect x="90.9091%" y="629" width="9.0909%" height="15" fill="rgb(211,91,47)" fg:x="620" fg:w="62"/><text x="91.1591%" y="639.50">hell_renderer..</text></g><g><title>hell_renderer::vulkan::frame::VulkanFrameData::present_queue (62 samples, 9.09%)</title><rect x="90.9091%" y="613" width="9.0909%" height="15" fill="rgb(242,88,51)" fg:x="620" fg:w="62"/><text x="91.1591%" y="623.50">hell_renderer..</text></g><g><title>ash::extensions::khr::swapchain::Swapchain::queue_present (62 samples, 9.09%)</title><rect x="90.9091%" y="597" width="9.0909%" height="15" fill="rgb(230,91,28)" fg:x="620" fg:w="62"/><text x="91.1591%" y="607.50">ash::extensio..</text></g><g><title>vulkan_layer_chassis::QueuePresentKHR (62 samples, 9.09%)</title><rect x="90.9091%" y="581" width="9.0909%" height="15" fill="rgb(254,186,29)" fg:x="620" fg:w="62"/><text x="91.1591%" y="591.50">vulkan_layer_..</text></g><g><title>DispatchQueuePresentKHR (62 samples, 9.09%)</title><rect x="90.9091%" y="565" width="9.0909%" height="15" fill="rgb(238,6,4)" fg:x="620" fg:w="62"/><text x="91.1591%" y="575.50">DispatchQueue..</text></g><g><title>[libGLX_nvidia.so.525.60.11] (62 samples, 9.09%)</title><rect x="90.9091%" y="549" width="9.0909%" height="15" fill="rgb(221,151,16)" fg:x="620" fg:w="62"/><text x="91.1591%" y="559.50">[libGLX_nvidi..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (62 samples, 9.09%)</title><rect x="90.9091%" y="533" width="9.0909%" height="15" fill="rgb(251,143,52)" fg:x="620" fg:w="62"/><text x="91.1591%" y="543.50">[libnvidia-gl..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (62 samples, 9.09%)</title><rect x="90.9091%" y="517" width="9.0909%" height="15" fill="rgb(206,90,15)" fg:x="620" fg:w="62"/><text x="91.1591%" y="527.50">[libnvidia-gl..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (62 samples, 9.09%)</title><rect x="90.9091%" y="501" width="9.0909%" height="15" fill="rgb(218,35,8)" fg:x="620" fg:w="62"/><text x="91.1591%" y="511.50">[libnvidia-gl..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (62 samples, 9.09%)</title><rect x="90.9091%" y="485" width="9.0909%" height="15" fill="rgb(239,215,6)" fg:x="620" fg:w="62"/><text x="91.1591%" y="495.50">[libnvidia-gl..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (62 samples, 9.09%)</title><rect x="90.9091%" y="469" width="9.0909%" height="15" fill="rgb(245,116,39)" fg:x="620" fg:w="62"/><text x="91.1591%" y="479.50">[libnvidia-gl..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (62 samples, 9.09%)</title><rect x="90.9091%" y="453" width="9.0909%" height="15" fill="rgb(242,65,28)" fg:x="620" fg:w="62"/><text x="91.1591%" y="463.50">[libnvidia-gl..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (62 samples, 9.09%)</title><rect x="90.9091%" y="437" width="9.0909%" height="15" fill="rgb(252,132,53)" fg:x="620" fg:w="62"/><text x="91.1591%" y="447.50">[libnvidia-gl..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (62 samples, 9.09%)</title><rect x="90.9091%" y="421" width="9.0909%" height="15" fill="rgb(224,159,50)" fg:x="620" fg:w="62"/><text x="91.1591%" y="431.50">[libnvidia-gl..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (60 samples, 8.80%)</title><rect x="91.2023%" y="405" width="8.7977%" height="15" fill="rgb(224,93,4)" fg:x="622" fg:w="60"/><text x="91.4523%" y="415.50">[libnvidia-g..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (60 samples, 8.80%)</title><rect x="91.2023%" y="389" width="8.7977%" height="15" fill="rgb(208,81,34)" fg:x="622" fg:w="60"/><text x="91.4523%" y="399.50">[libnvidia-g..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (60 samples, 8.80%)</title><rect x="91.2023%" y="373" width="8.7977%" height="15" fill="rgb(233,92,54)" fg:x="622" fg:w="60"/><text x="91.4523%" y="383.50">[libnvidia-g..</text></g><g><title>[libnvidia-glcore.so.525.60.11] (58 samples, 8.50%)</title><rect x="91.4956%" y="357" width="8.5044%" height="15" fill="rgb(237,21,14)" fg:x="624" fg:w="58"/><text x="91.7456%" y="367.50">[libnvidia-g..</text></g><g><title>pthread_rwlock_wrlock (3 samples, 0.44%)</title><rect x="99.5601%" y="341" width="0.4399%" height="15" fill="rgb(249,128,51)" fg:x="679" fg:w="3"/><text x="99.8101%" y="351.50"></text></g></svg></svg>